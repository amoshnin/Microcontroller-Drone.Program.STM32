
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d60  0800a090  0800a090  0001a090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf0  0800adf0  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf0  0800adf0  0001adf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf8  0800adf8  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf8  0800adf8  0001adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800ae00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200002dc  0800b0dc  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800b0dc  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f41b  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ae  00000000  00000000  0002f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00031fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00032da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002901a  00000000  00000000  00033a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001203d  00000000  00000000  0005ca22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f573a  00000000  00000000  0006ea5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f10  00000000  00000000  001641ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001690fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00169120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a078 	.word	0x0800a078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	0800a078 	.word	0x0800a078

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_GPIO_EXTI_Callback>:

int rescueStartTime = NULL;
int bpTime1 = NULL;
int bpTime2 = NULL;

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin) {
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5c:	d114      	bne.n	8000f88 <HAL_GPIO_EXTI_Callback+0x3c>
		if (bpTime1 == NULL) {
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <HAL_GPIO_EXTI_Callback+0x28>
			bpTime1 = HAL_GetTick();
 8000f66:	f003 f877 	bl	8004058 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f70:	601a      	str	r2, [r3, #0]
		} else if (bpTime2 == NULL) {
			bpTime2 = HAL_GetTick();
		}
	}
}
 8000f72:	e009      	b.n	8000f88 <HAL_GPIO_EXTI_Callback+0x3c>
		} else if (bpTime2 == NULL) {
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <HAL_GPIO_EXTI_Callback+0x3c>
			bpTime2 = HAL_GetTick();
 8000f7c:	f003 f86c 	bl	8004058 <HAL_GetTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000384 	.word	0x20000384
 8000f94:	20000388 	.word	0x20000388

08000f98 <main>:

// - Magnetometer Thresholds
float minMagnetometer = 1000;
float maxMagnetometer = 2200;

int main(void) {
 8000f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f9c:	f5ad 6d71 	sub.w	sp, sp, #3856	; 0xf10
 8000fa0:	af1c      	add	r7, sp, #112	; 0x70
	// Initialisation of (Systems)
	initialisePins();
 8000fa2:	f001 fb3f 	bl	8002624 <initialisePins>
	initialiseLED();
 8000fa6:	f001 fb05 	bl	80025b4 <initialiseLED>
	initialiseButton();
 8000faa:	f001 fbc3 	bl	8002734 <initialiseButton>
	initialiseSysTick();
 8000fae:	f001 fb33 	bl	8002618 <initialiseSysTick>
	initialiseSensors();
 8000fb2:	f001 fbc7 	bl	8002744 <initialiseSensors>
	initialiseUART();
 8000fb6:	f001 fb65 	bl	8002684 <initialiseUART>

	// Configuration of SysTick
	int counter = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 3e9c 	str.w	r3, [r7, #3740]	; 0xe9c

	uint32_t t1 = HAL_GetTick();
 8000fc0:	f003 f84a 	bl	8004058 <HAL_GetTick>
 8000fc4:	f8c7 0e98 	str.w	r0, [r7, #3736]	; 0xe98
	uint32_t t2 = HAL_GetTick();
 8000fc8:	f003 f846 	bl	8004058 <HAL_GetTick>
 8000fcc:	f8c7 0e7c 	str.w	r0, [r7, #3708]	; 0xe7c

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd4:	488a      	ldr	r0, [pc, #552]	; (8001200 <main+0x268>)
 8000fd6:	f003 fc13 	bl	8004800 <HAL_GPIO_TogglePin>
	printer("Drone Status: ACTIVE");
 8000fda:	488a      	ldr	r0, [pc, #552]	; (8001204 <main+0x26c>)
 8000fdc:	f001 f91e 	bl	800221c <printer>
	printer("Entering STANDBY MODE\r\n");
 8000fe0:	4889      	ldr	r0, [pc, #548]	; (8001208 <main+0x270>)
 8000fe2:	f001 f91b 	bl	800221c <printer>

	int accelerometerHistory [historySize] = {};
 8000fe6:	f607 630c 	addw	r3, r7, #3596	; 0xe0c
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fae5 	bl	80065be <memset>
	int magnetometerHistory [historySize] = {};
 8000ff4:	f607 53e4 	addw	r3, r7, #3556	; 0xde4
 8000ff8:	2228      	movs	r2, #40	; 0x28
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fade 	bl	80065be <memset>
	int gyroscopeHistory [historySize] = {};
 8001002:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f005 fad7 	bl	80065be <memset>
	int humidityHistory [historySize] = {};
 8001010:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001014:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001018:	4618      	mov	r0, r3
 800101a:	2328      	movs	r3, #40	; 0x28
 800101c:	461a      	mov	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f005 facd 	bl	80065be <memset>
	int pressureHistory [historySize] = {};
 8001024:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001028:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800102c:	4618      	mov	r0, r3
 800102e:	2328      	movs	r3, #40	; 0x28
 8001030:	461a      	mov	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f005 fac3 	bl	80065be <memset>
	int temperatureHistory [historySize] = {};
 8001038:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800103c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001040:	4618      	mov	r0, r3
 8001042:	2328      	movs	r3, #40	; 0x28
 8001044:	461a      	mov	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f005 fab9 	bl	80065be <memset>

	while (1) {
		t2 = HAL_GetTick();
 800104c:	f003 f804 	bl	8004058 <HAL_GetTick>
 8001050:	f8c7 0e7c 	str.w	r0, [r7, #3708]	; 0xe7c
		if ((t2 - t1) < 250) { continue; }
 8001054:	f8d7 2e7c 	ldr.w	r2, [r7, #3708]	; 0xe7c
 8001058:	f8d7 3e98 	ldr.w	r3, [r7, #3736]	; 0xe98
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2bf9      	cmp	r3, #249	; 0xf9
 8001060:	f241 80bc 	bls.w	80021dc <main+0x1244>
		t1 = HAL_GetTick();
 8001064:	f002 fff8 	bl	8004058 <HAL_GetTick>
 8001068:	f8c7 0e98 	str.w	r0, [r7, #3736]	; 0xe98
		counter++;
 800106c:	f8d7 3e9c 	ldr.w	r3, [r7, #3740]	; 0xe9c
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 3e9c 	str.w	r3, [r7, #3740]	; 0xe9c

		if (isDanger && (healthLevel == 0)) {
 8001076:	4b65      	ldr	r3, [pc, #404]	; (800120c <main+0x274>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d015      	beq.n	80010aa <main+0x112>
 800107e:	4b64      	ldr	r3, [pc, #400]	; (8001210 <main+0x278>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d111      	bne.n	80010aa <main+0x112>
			printer("Structural Integrity have been Compromised! Goodbye World!\r\n");
 8001086:	4863      	ldr	r0, [pc, #396]	; (8001214 <main+0x27c>)
 8001088:	f001 f8c8 	bl	800221c <printer>
			printer("Drone Status: INACTIVE");
 800108c:	4862      	ldr	r0, [pc, #392]	; (8001218 <main+0x280>)
 800108e:	f001 f8c5 	bl	800221c <printer>
				printer("!!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! DRONE WARNING for COMMAND CENTER (DANGER STATE) !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!!\r\n\n");
			}
		}
	}

	BSP_GYRO_DeInit();     // DeInitialise (Gyroscope)
 8001092:	f002 f8fd 	bl	8003290 <BSP_GYRO_DeInit>
	BSP_MAGNETO_DeInit();  // DeInitialise (Magnetometer)
 8001096:	f002 f981 	bl	800339c <BSP_MAGNETO_DeInit>
	BSP_ACCELERO_DeInit(); // DeInitialise (Accelerometer)
 800109a:	f002 f88b 	bl	80031b4 <BSP_ACCELERO_DeInit>
	HAL_UART_DeInit(&huart);  // DeInitialise (UART)
 800109e:	485f      	ldr	r0, [pc, #380]	; (800121c <main+0x284>)
 80010a0:	f004 fa46 	bl	8005530 <HAL_UART_DeInit>
 80010a4:	2300      	movs	r3, #0
 80010a6:	f001 b89c 	b.w	80021e2 <main+0x124a>
		if (bpTime1 != NULL && bpTime2 != NULL) {
 80010aa:	4b5d      	ldr	r3, [pc, #372]	; (8001220 <main+0x288>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d03e      	beq.n	8001130 <main+0x198>
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <main+0x28c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d03a      	beq.n	8001130 <main+0x198>
			if (bpTime2 - bpTime1 <= 500) {
 80010ba:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <main+0x28c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b58      	ldr	r3, [pc, #352]	; (8001220 <main+0x288>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010c8:	f300 808f 	bgt.w	80011ea <main+0x252>
				if (isDanger) {
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <main+0x274>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d015      	beq.n	8001100 <main+0x168>
					isDanger = false;
 80010d4:	4b4d      	ldr	r3, [pc, #308]	; (800120c <main+0x274>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
					rescueStartTime = NULL;
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <main+0x290>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
					gotAttacked = false;
 80010e0:	4b52      	ldr	r3, [pc, #328]	; (800122c <main+0x294>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
					healthLevel = max(healthLevel, 5);
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <main+0x278>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2105      	movs	r1, #5
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fa41 	bl	8002574 <max>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a46      	ldr	r2, [pc, #280]	; (8001210 <main+0x278>)
 80010f6:	6013      	str	r3, [r2, #0]
					printer("Entering BATTLE MODE\r\n");
 80010f8:	484d      	ldr	r0, [pc, #308]	; (8001230 <main+0x298>)
 80010fa:	f001 f88f 	bl	800221c <printer>
 80010fe:	e010      	b.n	8001122 <main+0x18a>
					if (isStandby) {
 8001100:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <main+0x29c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <main+0x17e>
						isStandby = false;
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <main+0x29c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
						printer("Entering BATTLE MODE\r\n");
 800110e:	4848      	ldr	r0, [pc, #288]	; (8001230 <main+0x298>)
 8001110:	f001 f884 	bl	800221c <printer>
 8001114:	e005      	b.n	8001122 <main+0x18a>
						isStandby = true;
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <main+0x29c>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
						printer("Entering STANDBY MODE\r\n");
 800111c:	483a      	ldr	r0, [pc, #232]	; (8001208 <main+0x270>)
 800111e:	f001 f87d 	bl	800221c <printer>
				bpTime1 = NULL;
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <main+0x288>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
				bpTime2 = NULL;
 8001128:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <main+0x28c>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
			if (bpTime2 - bpTime1 <= 500) {
 800112e:	e05c      	b.n	80011ea <main+0x252>
		} else if (bpTime1 != NULL && (t2 - bpTime1 > 500) && bpTime2 == NULL) {
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <main+0x288>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d058      	beq.n	80011ea <main+0x252>
 8001138:	4b39      	ldr	r3, [pc, #228]	; (8001220 <main+0x288>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	f8d7 3e7c 	ldr.w	r3, [r7, #3708]	; 0xe7c
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001148:	d94f      	bls.n	80011ea <main+0x252>
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <main+0x28c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d14b      	bne.n	80011ea <main+0x252>
			bpTime1 = NULL;
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <main+0x288>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
			if (!isStandby && !isDanger) {
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <main+0x29c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d023      	beq.n	80011ae <main+0x216>
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <main+0x274>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01c      	beq.n	80011ae <main+0x216>
				printer("Increment Battery\r\n");
 8001174:	4830      	ldr	r0, [pc, #192]	; (8001238 <main+0x2a0>)
 8001176:	f001 f851 	bl	800221c <printer>
				incrementBattery(&batteryLevel);
 800117a:	4830      	ldr	r0, [pc, #192]	; (800123c <main+0x2a4>)
 800117c:	f001 f9b6 	bl	80024ec <incrementBattery>
				sprintf(msg, "Battery Level: %d\r\n", batteryLevel);
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <main+0x2a4>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8001188:	492d      	ldr	r1, [pc, #180]	; (8001240 <main+0x2a8>)
 800118a:	4618      	mov	r0, r3
 800118c:	f005 ff2e 	bl	8006fec <siprintf>
				printer(msg);
 8001190:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f841 	bl	800221c <printer>
				if (batteryLevel >= 5) {
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <main+0x2a4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	dd05      	ble.n	80011ae <main+0x216>
					printer("Laser Gun Fired!\r\n");
 80011a2:	4828      	ldr	r0, [pc, #160]	; (8001244 <main+0x2ac>)
 80011a4:	f001 f83a 	bl	800221c <printer>
					decrementBattery(&batteryLevel);
 80011a8:	4824      	ldr	r0, [pc, #144]	; (800123c <main+0x2a4>)
 80011aa:	f001 f9b1 	bl	8002510 <decrementBattery>
			if (isStandby) {
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <main+0x29c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d019      	beq.n	80011ea <main+0x252>
				if (healthLevel < 10) {
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <main+0x278>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b09      	cmp	r3, #9
 80011bc:	dc15      	bgt.n	80011ea <main+0x252>
					int newHealthLevel = healthLevel + 1;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <main+0x278>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8c7 3e78 	str.w	r3, [r7, #3704]	; 0xe78
					sprintf(increaseHealthText, "Drone Structural Integrity Level (Health Level) Increased to %d\r\n", newHealthLevel);
 80011c8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80011cc:	f8d7 2e78 	ldr.w	r2, [r7, #3704]	; 0xe78
 80011d0:	491d      	ldr	r1, [pc, #116]	; (8001248 <main+0x2b0>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 ff0a 	bl	8006fec <siprintf>
					printer(increaseHealthText);
 80011d8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f81d 	bl	800221c <printer>
					healthLevel = newHealthLevel;
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <main+0x278>)
 80011e4:	f8d7 3e78 	ldr.w	r3, [r7, #3704]	; 0xe78
 80011e8:	6013      	str	r3, [r2, #0]
		if (isStandby) {
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <main+0x29c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d02c      	beq.n	800124c <main+0x2b4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f8:	4801      	ldr	r0, [pc, #4]	; (8001200 <main+0x268>)
 80011fa:	f003 fae9 	bl	80047d0 <HAL_GPIO_WritePin>
 80011fe:	e040      	b.n	8001282 <main+0x2ea>
 8001200:	48000400 	.word	0x48000400
 8001204:	0800a0e0 	.word	0x0800a0e0
 8001208:	0800a0f8 	.word	0x0800a0f8
 800120c:	2000037c 	.word	0x2000037c
 8001210:	20000004 	.word	0x20000004
 8001214:	0800a110 	.word	0x0800a110
 8001218:	0800a150 	.word	0x0800a150
 800121c:	200002f8 	.word	0x200002f8
 8001220:	20000384 	.word	0x20000384
 8001224:	20000388 	.word	0x20000388
 8001228:	20000380 	.word	0x20000380
 800122c:	2000037d 	.word	0x2000037d
 8001230:	0800a168 	.word	0x0800a168
 8001234:	20000000 	.word	0x20000000
 8001238:	0800a180 	.word	0x0800a180
 800123c:	20000378 	.word	0x20000378
 8001240:	0800a194 	.word	0x0800a194
 8001244:	0800a1a8 	.word	0x0800a1a8
 8001248:	0800a1bc 	.word	0x0800a1bc
			if (isDanger && counter % 1 == 0) {
 800124c:	4bce      	ldr	r3, [pc, #824]	; (8001588 <main+0x5f0>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <main+0x2c6>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001254:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001258:	48cc      	ldr	r0, [pc, #816]	; (800158c <main+0x5f4>)
 800125a:	f003 fad1 	bl	8004800 <HAL_GPIO_TogglePin>
			if (!isDanger && counter % 2 == 0) {
 800125e:	4bca      	ldr	r3, [pc, #808]	; (8001588 <main+0x5f0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f083 0301 	eor.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <main+0x2ea>
 800126c:	f8d7 3e9c 	ldr.w	r3, [r7, #3740]	; 0xe9c
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <main+0x2ea>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127c:	48c3      	ldr	r0, [pc, #780]	; (800158c <main+0x5f4>)
 800127e:	f003 fabf 	bl	8004800 <HAL_GPIO_TogglePin>
		readGyroscope(&g_x, &g_y, &g_z);
 8001282:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 8001286:	f607 513c 	addw	r1, r7, #3388	; 0xd3c
 800128a:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fa68 	bl	8002764 <readGyroscope>
		float gyroscope = sqrt(pow(g_x, 2) + pow(g_y, 2) + pow(g_z, 2));
 8001294:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001298:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f952 	bl	8000548 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8001580 <main+0x5e8>
 80012ac:	ec43 2b10 	vmov	d0, r2, r3
 80012b0:	f007 ff92 	bl	80091d8 <pow>
 80012b4:	ec55 4b10 	vmov	r4, r5, d0
 80012b8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80012bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f940 	bl	8000548 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	ed9f 1bac 	vldr	d1, [pc, #688]	; 8001580 <main+0x5e8>
 80012d0:	ec43 2b10 	vmov	d0, r2, r3
 80012d4:	f007 ff80 	bl	80091d8 <pow>
 80012d8:	ec53 2b10 	vmov	r2, r3, d0
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ffd4 	bl	800028c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80012f0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f926 	bl	8000548 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 8001580 <main+0x5e8>
 8001304:	ec43 2b10 	vmov	d0, r2, r3
 8001308:	f007 ff66 	bl	80091d8 <pow>
 800130c:	ec53 2b10 	vmov	r2, r3, d0
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7fe ffba 	bl	800028c <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	ec43 2b17 	vmov	d7, r2, r3
 8001320:	eeb0 0a47 	vmov.f32	s0, s14
 8001324:	eef0 0a67 	vmov.f32	s1, s15
 8001328:	f007 ffc6 	bl	80092b8 <sqrt>
 800132c:	ec53 2b10 	vmov	r2, r3, d0
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc38 	bl	8000ba8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	f607 6274 	addw	r2, r7, #3700	; 0xe74
 800133e:	6013      	str	r3, [r2, #0]
		bool isGyroscopeCrazy = (gyroscope < minGyroscope) || (gyroscope > maxGyroscope);
 8001340:	4b93      	ldr	r3, [pc, #588]	; (8001590 <main+0x5f8>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	d40b      	bmi.n	8001370 <main+0x3d8>
 8001358:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <main+0x5fc>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	dd01      	ble.n	8001374 <main+0x3dc>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <main+0x3de>
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3e73 	strb.w	r3, [r7, #3699]	; 0xe73
 800137a:	f897 3e73 	ldrb.w	r3, [r7, #3699]	; 0xe73
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	f887 3e73 	strb.w	r3, [r7, #3699]	; 0xe73
		readMagnetometer(&m_x, &m_y, &m_z);
 8001386:	f607 522c 	addw	r2, r7, #3372	; 0xd2c
 800138a:	f507 6153 	add.w	r1, r7, #3376	; 0xd30
 800138e:	f607 5334 	addw	r3, r7, #3380	; 0xd34
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fa26 	bl	80027e4 <readMagnetometer>
		float magnetometer = sqrt(pow(m_z, 2) + pow(m_y, 2) + pow(m_z, 2));
 8001398:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800139c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8d0 	bl	8000548 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001580 <main+0x5e8>
 80013b0:	ec43 2b10 	vmov	d0, r2, r3
 80013b4:	f007 ff10 	bl	80091d8 <pow>
 80013b8:	ec55 4b10 	vmov	r4, r5, d0
 80013bc:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80013c0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8001580 <main+0x5e8>
 80013d4:	ec43 2b10 	vmov	d0, r2, r3
 80013d8:	f007 fefe 	bl	80091d8 <pow>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7fe ff52 	bl	800028c <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80013f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8a4 	bl	8000548 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001580 <main+0x5e8>
 8001408:	ec43 2b10 	vmov	d0, r2, r3
 800140c:	f007 fee4 	bl	80091d8 <pow>
 8001410:	ec53 2b10 	vmov	r2, r3, d0
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7fe ff38 	bl	800028c <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b17 	vmov	d7, r2, r3
 8001424:	eeb0 0a47 	vmov.f32	s0, s14
 8001428:	eef0 0a67 	vmov.f32	s1, s15
 800142c:	f007 ff44 	bl	80092b8 <sqrt>
 8001430:	ec53 2b10 	vmov	r2, r3, d0
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbb6 	bl	8000ba8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	f607 626c 	addw	r2, r7, #3692	; 0xe6c
 8001442:	6013      	str	r3, [r2, #0]
		bool isMagnetometerCrazy = (magnetometer < minMagnetometer || magnetometer > maxMagnetometer);
 8001444:	4b54      	ldr	r3, [pc, #336]	; (8001598 <main+0x600>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d40b      	bmi.n	8001474 <main+0x4dc>
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <main+0x604>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 8001466:	ed93 7a00 	vldr	s14, [r3]
 800146a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	dd01      	ble.n	8001478 <main+0x4e0>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <main+0x4e2>
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3e6b 	strb.w	r3, [r7, #3691]	; 0xe6b
 800147e:	f897 3e6b 	ldrb.w	r3, [r7, #3691]	; 0xe6b
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	f887 3e6b 	strb.w	r3, [r7, #3691]	; 0xe6b
		readAccelerometer(&a_x, &a_y, &a_z);
 800148a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800148e:	f607 5124 	addw	r1, r7, #3364	; 0xd24
 8001492:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fa2e 	bl	80028f8 <readAccelerometer>
		float accelerometer = sqrt(pow(a_x, 2) + pow(a_y, 2) + pow(a_z, 2));
 800149c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80014a0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001580 <main+0x5e8>
 80014b4:	ec43 2b10 	vmov	d0, r2, r3
 80014b8:	f007 fe8e 	bl	80091d8 <pow>
 80014bc:	ec55 4b10 	vmov	r4, r5, d0
 80014c0:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80014c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f83c 	bl	8000548 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001580 <main+0x5e8>
 80014d8:	ec43 2b10 	vmov	d0, r2, r3
 80014dc:	f007 fe7c 	bl	80091d8 <pow>
 80014e0:	ec53 2b10 	vmov	r2, r3, d0
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f7fe fed0 	bl	800028c <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80014f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f822 	bl	8000548 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001580 <main+0x5e8>
 800150c:	ec43 2b10 	vmov	d0, r2, r3
 8001510:	f007 fe62 	bl	80091d8 <pow>
 8001514:	ec53 2b10 	vmov	r2, r3, d0
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7fe feb6 	bl	800028c <__adddf3>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ec43 2b17 	vmov	d7, r2, r3
 8001528:	eeb0 0a47 	vmov.f32	s0, s14
 800152c:	eef0 0a67 	vmov.f32	s1, s15
 8001530:	f007 fec2 	bl	80092b8 <sqrt>
 8001534:	ec53 2b10 	vmov	r2, r3, d0
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb34 	bl	8000ba8 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	f607 6264 	addw	r2, r7, #3684	; 0xe64
 8001546:	6013      	str	r3, [r2, #0]
		bool isAccelerometerCrazy = (accelerometer < minAccelerometer) || (accelerometer > maxAccelerometer);
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <main+0x608>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	f607 6364 	addw	r3, r7, #3684	; 0xe64
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	d40b      	bmi.n	8001578 <main+0x5e0>
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <main+0x60c>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	f607 6364 	addw	r3, r7, #3684	; 0xe64
 800156a:	ed93 7a00 	vldr	s14, [r3]
 800156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	dd17      	ble.n	80015a8 <main+0x610>
 8001578:	2301      	movs	r3, #1
 800157a:	e016      	b.n	80015aa <main+0x612>
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	40000000 	.word	0x40000000
 8001588:	2000037c 	.word	0x2000037c
 800158c:	48000400 	.word	0x48000400
 8001590:	20000028 	.word	0x20000028
 8001594:	2000002c 	.word	0x2000002c
 8001598:	20000030 	.word	0x20000030
 800159c:	20000034 	.word	0x20000034
 80015a0:	20000020 	.word	0x20000020
 80015a4:	20000024 	.word	0x20000024
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3e63 	strb.w	r3, [r7, #3683]	; 0xe63
 80015ae:	f897 3e63 	ldrb.w	r3, [r7, #3683]	; 0xe63
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	f887 3e63 	strb.w	r3, [r7, #3683]	; 0xe63
		readPressureSensor(&pressure);
 80015ba:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f952 	bl	8002868 <readPressureSensor>
		bool isPressureCrazy = (pressure < minPressure || pressure > maxPressure);
 80015c4:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80015c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	4bcb      	ldr	r3, [pc, #812]	; (8001900 <main+0x968>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d40d      	bmi.n	80015fc <main+0x664>
 80015e0:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80015e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	4bc5      	ldr	r3, [pc, #788]	; (8001904 <main+0x96c>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	dd01      	ble.n	8001600 <main+0x668>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <main+0x66a>
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3e62 	strb.w	r3, [r7, #3682]	; 0xe62
 8001606:	f897 3e62 	ldrb.w	r3, [r7, #3682]	; 0xe62
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	f887 3e62 	strb.w	r3, [r7, #3682]	; 0xe62
		readHumiditySensor(&humidity);
 8001612:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001616:	4618      	mov	r0, r3
 8001618:	f001 f958 	bl	80028cc <readHumiditySensor>
		bool isHumidityCrazy = (humidity < minHumidity || humidity > maxHumidity);
 800161c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001620:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001624:	ed93 7a00 	vldr	s14, [r3]
 8001628:	4bb7      	ldr	r3, [pc, #732]	; (8001908 <main+0x970>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d40d      	bmi.n	8001654 <main+0x6bc>
 8001638:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800163c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	4bb1      	ldr	r3, [pc, #708]	; (800190c <main+0x974>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd01      	ble.n	8001658 <main+0x6c0>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <main+0x6c2>
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3e61 	strb.w	r3, [r7, #3681]	; 0xe61
 800165e:	f897 3e61 	ldrb.w	r3, [r7, #3681]	; 0xe61
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	f887 3e61 	strb.w	r3, [r7, #3681]	; 0xe61
		readTemperatureSensor(&temperature);
 800166a:	f607 5314 	addw	r3, r7, #3348	; 0xd14
 800166e:	4618      	mov	r0, r3
 8001670:	f001 f994 	bl	800299c <readTemperatureSensor>
		bool isTemperatureCrazy = (temperature < minTemperature || temperature > maxTemperature);
 8001674:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001678:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <main+0x978>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	d40d      	bmi.n	80016ac <main+0x714>
 8001690:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001694:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	4b9d      	ldr	r3, [pc, #628]	; (8001914 <main+0x97c>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	dd01      	ble.n	80016b0 <main+0x718>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <main+0x71a>
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3e60 	strb.w	r3, [r7, #3680]	; 0xe60
 80016b6:	f897 3e60 	ldrb.w	r3, [r7, #3680]	; 0xe60
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	f887 3e60 	strb.w	r3, [r7, #3680]	; 0xe60
		bool isMonitoring = isGyroscopeCrazy | isMagnetometerCrazy | isPressureCrazy | isHumidityCrazy | isTemperatureCrazy | isAccelerometerCrazy;
 80016c2:	f897 2e73 	ldrb.w	r2, [r7, #3699]	; 0xe73
 80016c6:	f897 3e6b 	ldrb.w	r3, [r7, #3691]	; 0xe6b
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	f897 3e62 	ldrb.w	r3, [r7, #3682]	; 0xe62
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	f897 3e61 	ldrb.w	r3, [r7, #3681]	; 0xe61
 80016da:	4313      	orrs	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	f897 3e60 	ldrb.w	r3, [r7, #3680]	; 0xe60
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	f897 3e63 	ldrb.w	r3, [r7, #3683]	; 0xe63
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	f887 3e5f 	strb.w	r3, [r7, #3679]	; 0xe5f
		if (counter % 4 == 0) {
 80016fa:	f8d7 3e9c 	ldr.w	r3, [r7, #3740]	; 0xe9c
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 8537 	bne.w	8002176 <main+0x11de>
			for (int i = 0; i < historySize - 1; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3e94 	str.w	r3, [r7, #3732]	; 0xe94
 800170e:	e019      	b.n	8001744 <main+0x7ac>
				accelerometerHistory[i] = accelerometerHistory[i + 1];
 8001710:	f8d7 3e94 	ldr.w	r3, [r7, #3732]	; 0xe94
 8001714:	3301      	adds	r3, #1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 800171c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001720:	4413      	add	r3, r2
 8001722:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001726:	f8d7 3e94 	ldr.w	r3, [r7, #3732]	; 0xe94
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8001730:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001734:	440b      	add	r3, r1
 8001736:	f843 2c94 	str.w	r2, [r3, #-148]
			for (int i = 0; i < historySize - 1; i++) {
 800173a:	f8d7 3e94 	ldr.w	r3, [r7, #3732]	; 0xe94
 800173e:	3301      	adds	r3, #1
 8001740:	f8c7 3e94 	str.w	r3, [r7, #3732]	; 0xe94
 8001744:	f8d7 3e94 	ldr.w	r3, [r7, #3732]	; 0xe94
 8001748:	2b08      	cmp	r3, #8
 800174a:	dde1      	ble.n	8001710 <main+0x778>
			accelerometerHistory[historySize - 1] = (int)accelerometer;
 800174c:	f607 6364 	addw	r3, r7, #3684	; 0xe64
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	f8c7 3e30 	str.w	r3, [r7, #3632]	; 0xe30
			for (int i = 0; i < historySize - 1; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3e90 	str.w	r3, [r7, #3728]	; 0xe90
 8001766:	e019      	b.n	800179c <main+0x804>
				magnetometerHistory[i] = magnetometerHistory[i + 1];
 8001768:	f8d7 3e90 	ldr.w	r3, [r7, #3728]	; 0xe90
 800176c:	3301      	adds	r3, #1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8001774:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001778:	4413      	add	r3, r2
 800177a:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 800177e:	f8d7 3e90 	ldr.w	r3, [r7, #3728]	; 0xe90
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8001788:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800178c:	440b      	add	r3, r1
 800178e:	f843 2cbc 	str.w	r2, [r3, #-188]
			for (int i = 0; i < historySize - 1; i++) {
 8001792:	f8d7 3e90 	ldr.w	r3, [r7, #3728]	; 0xe90
 8001796:	3301      	adds	r3, #1
 8001798:	f8c7 3e90 	str.w	r3, [r7, #3728]	; 0xe90
 800179c:	f8d7 3e90 	ldr.w	r3, [r7, #3728]	; 0xe90
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	dde1      	ble.n	8001768 <main+0x7d0>
			magnetometerHistory[historySize - 1] = (int)magnetometer;
 80017a4:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b0:	ee17 3a90 	vmov	r3, s15
 80017b4:	f8c7 3e08 	str.w	r3, [r7, #3592]	; 0xe08
			for (int i = 0; i < historySize - 1; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 3e8c 	str.w	r3, [r7, #3724]	; 0xe8c
 80017be:	e019      	b.n	80017f4 <main+0x85c>
				gyroscopeHistory[i] = gyroscopeHistory[i + 1];
 80017c0:	f8d7 3e8c 	ldr.w	r3, [r7, #3724]	; 0xe8c
 80017c4:	3301      	adds	r3, #1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 80017cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80017d0:	4413      	add	r3, r2
 80017d2:	f853 2ce4 	ldr.w	r2, [r3, #-228]
 80017d6:	f8d7 3e8c 	ldr.w	r3, [r7, #3724]	; 0xe8c
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 80017e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80017e4:	440b      	add	r3, r1
 80017e6:	f843 2ce4 	str.w	r2, [r3, #-228]
			for (int i = 0; i < historySize - 1; i++) {
 80017ea:	f8d7 3e8c 	ldr.w	r3, [r7, #3724]	; 0xe8c
 80017ee:	3301      	adds	r3, #1
 80017f0:	f8c7 3e8c 	str.w	r3, [r7, #3724]	; 0xe8c
 80017f4:	f8d7 3e8c 	ldr.w	r3, [r7, #3724]	; 0xe8c
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	dde1      	ble.n	80017c0 <main+0x828>
			gyroscopeHistory[historySize - 1] = (int)gyroscope;
 80017fc:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001808:	ee17 3a90 	vmov	r3, s15
 800180c:	f8c7 3de0 	str.w	r3, [r7, #3552]	; 0xde0
			for (int i = 0; i < historySize - 1; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 3e88 	str.w	r3, [r7, #3720]	; 0xe88
 8001816:	e015      	b.n	8001844 <main+0x8ac>
				humidityHistory[i] = humidityHistory[i + 1];
 8001818:	f8d7 3e88 	ldr.w	r3, [r7, #3720]	; 0xe88
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800182a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800182e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001832:	f8d7 2e88 	ldr.w	r2, [r7, #3720]	; 0xe88
 8001836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < historySize - 1; i++) {
 800183a:	f8d7 3e88 	ldr.w	r3, [r7, #3720]	; 0xe88
 800183e:	3301      	adds	r3, #1
 8001840:	f8c7 3e88 	str.w	r3, [r7, #3720]	; 0xe88
 8001844:	f8d7 3e88 	ldr.w	r3, [r7, #3720]	; 0xe88
 8001848:	2b08      	cmp	r3, #8
 800184a:	dde5      	ble.n	8001818 <main+0x880>
			humidityHistory[historySize - 1] = (int)humidity;
 800184c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001850:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 2a90 	vmov	r2, s15
 8001860:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001864:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
			for (int i = 0; i < historySize - 1; i++) {
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 3e84 	str.w	r3, [r7, #3716]	; 0xe84
 8001870:	e015      	b.n	800189e <main+0x906>
				pressureHistory[i] = pressureHistory[i + 1];
 8001872:	f8d7 3e84 	ldr.w	r3, [r7, #3716]	; 0xe84
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800187c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001884:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001888:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800188c:	f8d7 2e84 	ldr.w	r2, [r7, #3716]	; 0xe84
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < historySize - 1; i++) {
 8001894:	f8d7 3e84 	ldr.w	r3, [r7, #3716]	; 0xe84
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 3e84 	str.w	r3, [r7, #3716]	; 0xe84
 800189e:	f8d7 3e84 	ldr.w	r3, [r7, #3716]	; 0xe84
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	dde5      	ble.n	8001872 <main+0x8da>
			pressureHistory[historySize - 1] = (int)(pressure * (101.3 * 1000) / 100);
 80018a6:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80018aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe49 	bl	8000548 <__aeabi_f2d>
 80018b6:	a310      	add	r3, pc, #64	; (adr r3, 80018f8 <main+0x960>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe9c 	bl	80005f8 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <main+0x980>)
 80018ce:	f7fe ffbd 	bl	800084c <__aeabi_ddiv>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f93d 	bl	8000b58 <__aeabi_d2iz>
 80018de:	4602      	mov	r2, r0
 80018e0:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80018e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
			for (int i = 0; i < historySize - 1; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 3e80 	str.w	r3, [r7, #3712]	; 0xe80
 80018f0:	e02a      	b.n	8001948 <main+0x9b0>
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40f8bb40 	.word	0x40f8bb40
 8001900:	20000010 	.word	0x20000010
 8001904:	20000014 	.word	0x20000014
 8001908:	20000018 	.word	0x20000018
 800190c:	2000001c 	.word	0x2000001c
 8001910:	20000008 	.word	0x20000008
 8001914:	2000000c 	.word	0x2000000c
 8001918:	40590000 	.word	0x40590000
				temperatureHistory[i] = temperatureHistory[i + 1];
 800191c:	f8d7 3e80 	ldr.w	r3, [r7, #3712]	; 0xe80
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001926:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800192a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800192e:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001932:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001936:	f8d7 2e80 	ldr.w	r2, [r7, #3712]	; 0xe80
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < historySize - 1; i++) {
 800193e:	f8d7 3e80 	ldr.w	r3, [r7, #3712]	; 0xe80
 8001942:	3301      	adds	r3, #1
 8001944:	f8c7 3e80 	str.w	r3, [r7, #3712]	; 0xe80
 8001948:	f8d7 3e80 	ldr.w	r3, [r7, #3712]	; 0xe80
 800194c:	2b08      	cmp	r3, #8
 800194e:	dde5      	ble.n	800191c <main+0x984>
			temperatureHistory[historySize - 1] = (int)temperature;
 8001950:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001954:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 2a90 	vmov	r2, s15
 8001964:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001968:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
			char* titles[] = {"Accelerometer", "Magnetometer", "Gyroscope", "Humidity", "Pressure", "Temperature"};
 800196e:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001972:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001976:	4a9e      	ldr	r2, [pc, #632]	; (8001bf0 <main+0xc58>)
 8001978:	461c      	mov	r4, r3
 800197a:	4615      	mov	r5, r2
 800197c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001980:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001984:	e884 0003 	stmia.w	r4, {r0, r1}
			float max_values[] = {maxAccelerometer, maxMagnetometer, maxGyroscope, maxHumidity, maxPressure * (101.3 * 1000) / 100, maxTemperature};
 8001988:	4b9a      	ldr	r3, [pc, #616]	; (8001bf4 <main+0xc5c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001990:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b98      	ldr	r3, [pc, #608]	; (8001bf8 <main+0xc60>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800199e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	4b95      	ldr	r3, [pc, #596]	; (8001bfc <main+0xc64>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80019ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	4b93      	ldr	r3, [pc, #588]	; (8001c00 <main+0xc68>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80019ba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <main+0xc6c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdbf 	bl	8000548 <__aeabi_f2d>
 80019ca:	a387      	add	r3, pc, #540	; (adr r3, 8001be8 <main+0xc50>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fe12 	bl	80005f8 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <main+0xc70>)
 80019e2:	f7fe ff33 	bl	800084c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8db 	bl	8000ba8 <__aeabi_d2f>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 80019f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <main+0xc74>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001a06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a0a:	615a      	str	r2, [r3, #20]
			memcpy(dataArrays[0], accelerometerHistory, sizeof(accelerometerHistory));
 8001a0c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001a10:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001a14:	461d      	mov	r5, r3
 8001a16:	f607 640c 	addw	r4, r7, #3596	; 0xe0c
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a26:	e885 0003 	stmia.w	r5, {r0, r1}
			memcpy(dataArrays[1], magnetometerHistory, sizeof(magnetometerHistory));
 8001a2a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001a2e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001a32:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001a36:	f607 55e4 	addw	r5, r7, #3556	; 0xde4
 8001a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a46:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(dataArrays[2], gyroscopeHistory, sizeof(gyroscopeHistory));
 8001a4a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001a4e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001a52:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001a56:	f607 55bc 	addw	r5, r7, #3516	; 0xdbc
 8001a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a66:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(dataArrays[3], humidityHistory, sizeof(humidityHistory));
 8001a6a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001a6e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001a72:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8001a76:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001a7a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001a7e:	4615      	mov	r5, r2
 8001a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a8c:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(dataArrays[4], pressureHistory, sizeof(pressureHistory));
 8001a90:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001a94:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001a98:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8001a9c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8001aa0:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001aa4:	4615      	mov	r5, r2
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ab2:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(dataArrays[5], temperatureHistory, sizeof(temperatureHistory));
 8001ab6:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001aba:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001abe:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8001ac2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ac6:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8001aca:	4615      	mov	r5, r2
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ad8:	e884 0003 	stmia.w	r4, {r0, r1}
			int milliseconds = HAL_GetTick();
 8001adc:	f002 fabc 	bl	8004058 <HAL_GetTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f8c7 3e58 	str.w	r3, [r7, #3672]	; 0xe58
			int millisecondsPerDay = 24 * 60 * 60 * 1000;
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <main+0xc78>)
 8001ae8:	f8c7 3e54 	str.w	r3, [r7, #3668]	; 0xe54
			int millisecondsPerHour = 60 * 60 * 1000;
 8001aec:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <main+0xc7c>)
 8001aee:	f8c7 3e50 	str.w	r3, [r7, #3664]	; 0xe50
			int millisecondsPerMinute = 60 * 1000;
 8001af2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001af6:	f8c7 3e4c 	str.w	r3, [r7, #3660]	; 0xe4c
			int millisecondsPerSecond = 1000;
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	f8c7 3e48 	str.w	r3, [r7, #3656]	; 0xe48
			int days = milliseconds / millisecondsPerDay;
 8001b02:	f8d7 2e58 	ldr.w	r2, [r7, #3672]	; 0xe58
 8001b06:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	; 0xe54
 8001b0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b0e:	f8c7 3e44 	str.w	r3, [r7, #3652]	; 0xe44
			milliseconds %= millisecondsPerDay;
 8001b12:	f8d7 3e58 	ldr.w	r3, [r7, #3672]	; 0xe58
 8001b16:	f8d7 2e54 	ldr.w	r2, [r7, #3668]	; 0xe54
 8001b1a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b1e:	f8d7 1e54 	ldr.w	r1, [r7, #3668]	; 0xe54
 8001b22:	fb01 f202 	mul.w	r2, r1, r2
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	f8c7 3e58 	str.w	r3, [r7, #3672]	; 0xe58
			int hours = milliseconds / millisecondsPerHour;
 8001b2c:	f8d7 2e58 	ldr.w	r2, [r7, #3672]	; 0xe58
 8001b30:	f8d7 3e50 	ldr.w	r3, [r7, #3664]	; 0xe50
 8001b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b38:	f8c7 3e40 	str.w	r3, [r7, #3648]	; 0xe40
			milliseconds %= millisecondsPerHour;
 8001b3c:	f8d7 3e58 	ldr.w	r3, [r7, #3672]	; 0xe58
 8001b40:	f8d7 2e50 	ldr.w	r2, [r7, #3664]	; 0xe50
 8001b44:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b48:	f8d7 1e50 	ldr.w	r1, [r7, #3664]	; 0xe50
 8001b4c:	fb01 f202 	mul.w	r2, r1, r2
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	f8c7 3e58 	str.w	r3, [r7, #3672]	; 0xe58
			int minutes = milliseconds / millisecondsPerMinute;
 8001b56:	f8d7 2e58 	ldr.w	r2, [r7, #3672]	; 0xe58
 8001b5a:	f8d7 3e4c 	ldr.w	r3, [r7, #3660]	; 0xe4c
 8001b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b62:	f8c7 3e3c 	str.w	r3, [r7, #3644]	; 0xe3c
			milliseconds %= millisecondsPerMinute;
 8001b66:	f8d7 3e58 	ldr.w	r3, [r7, #3672]	; 0xe58
 8001b6a:	f8d7 2e4c 	ldr.w	r2, [r7, #3660]	; 0xe4c
 8001b6e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b72:	f8d7 1e4c 	ldr.w	r1, [r7, #3660]	; 0xe4c
 8001b76:	fb01 f202 	mul.w	r2, r1, r2
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	f8c7 3e58 	str.w	r3, [r7, #3672]	; 0xe58
			int seconds = milliseconds / millisecondsPerSecond;
 8001b80:	f8d7 2e58 	ldr.w	r2, [r7, #3672]	; 0xe58
 8001b84:	f8d7 3e48 	ldr.w	r3, [r7, #3656]	; 0xe48
 8001b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b8c:	f8c7 3e38 	str.w	r3, [r7, #3640]	; 0xe38
			milliseconds %= millisecondsPerSecond;
 8001b90:	f8d7 3e58 	ldr.w	r3, [r7, #3672]	; 0xe58
 8001b94:	f8d7 2e48 	ldr.w	r2, [r7, #3656]	; 0xe48
 8001b98:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b9c:	f8d7 1e48 	ldr.w	r1, [r7, #3656]	; 0xe48
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	f8c7 3e58 	str.w	r3, [r7, #3672]	; 0xe58
			if (isDanger) {
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <main+0xc80>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d038      	beq.n	8001c24 <main+0xc8c>
				healthLevel = max(0, healthLevel - 1);
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <main+0xc84>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 fcda 	bl	8002574 <max>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <main+0xc84>)
 8001bc4:	6013      	str	r3, [r2, #0]
				sprintf(attackText, "Drone Was Attacked! Structural Integrity Level (Health Level): %d\r\n", healthLevel);
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <main+0xc84>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001bce:	4914      	ldr	r1, [pc, #80]	; (8001c20 <main+0xc88>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 fa0b 	bl	8006fec <siprintf>
				printer(attackText);
 8001bd6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fb1e 	bl	800221c <printer>
 8001be0:	e2c9      	b.n	8002176 <main+0x11de>
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40f8bb40 	.word	0x40f8bb40
 8001bf0:	0800a918 	.word	0x0800a918
 8001bf4:	20000024 	.word	0x20000024
 8001bf8:	20000034 	.word	0x20000034
 8001bfc:	2000002c 	.word	0x2000002c
 8001c00:	2000001c 	.word	0x2000001c
 8001c04:	20000014 	.word	0x20000014
 8001c08:	40590000 	.word	0x40590000
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	05265c00 	.word	0x05265c00
 8001c14:	0036ee80 	.word	0x0036ee80
 8001c18:	2000037c 	.word	0x2000037c
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	0800a200 	.word	0x0800a200
				int msg_size = 60;
 8001c24:	233c      	movs	r3, #60	; 0x3c
 8001c26:	f8c7 3e34 	str.w	r3, [r7, #3636]	; 0xe34
				printer("\r\n\n");
 8001c2a:	4856      	ldr	r0, [pc, #344]	; (8001d84 <main+0xdec>)
 8001c2c:	f000 faf6 	bl	800221c <printer>
				if (isMonitoring) {
 8001c30:	f897 3e5f 	ldrb.w	r3, [r7, #3679]	; 0xe5f
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80d1 	beq.w	8001ddc <main+0xe44>
					printer(">>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> DRONE STATISTICS for COMMAND CENTER (WARNING STATE) <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<<\r\n\n");
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <main+0xdf0>)
 8001c3c:	f000 faee 	bl	800221c <printer>
					if (isGyroscopeCrazy) {
 8001c40:	f897 3e73 	ldrb.w	r3, [r7, #3699]	; 0xe73
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <main+0xcd2>
						printCrazyMessage("G", gyroscope, minGyroscope, maxGyroscope);
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <main+0xdf4>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <main+0xdf8>)
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	eeb0 1a47 	vmov.f32	s2, s14
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8001c60:	ed93 0a00 	vldr	s0, [r3]
 8001c64:	484b      	ldr	r0, [pc, #300]	; (8001d94 <main+0xdfc>)
 8001c66:	f000 faef 	bl	8002248 <printCrazyMessage>
					if (isMagnetometerCrazy) {
 8001c6a:	f897 3e6b 	ldrb.w	r3, [r7, #3691]	; 0xe6b
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <main+0xcfc>
						printCrazyMessage("M", magnetometer, minMagnetometer, maxMagnetometer);
 8001c72:	4b49      	ldr	r3, [pc, #292]	; (8001d98 <main+0xe00>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <main+0xe04>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	eeb0 1a47 	vmov.f32	s2, s14
 8001c82:	eef0 0a67 	vmov.f32	s1, s15
 8001c86:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 8001c8a:	ed93 0a00 	vldr	s0, [r3]
 8001c8e:	4844      	ldr	r0, [pc, #272]	; (8001da0 <main+0xe08>)
 8001c90:	f000 fada 	bl	8002248 <printCrazyMessage>
					if (isPressureCrazy) {
 8001c94:	f897 3e62 	ldrb.w	r3, [r7, #3682]	; 0xe62
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d014      	beq.n	8001cc6 <main+0xd2e>
						printCrazyMessage("P", pressure, minPressure, maxPressure);
 8001c9c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001ca0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <main+0xe0c>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <main+0xe10>)
 8001cb0:	edd3 6a00 	vldr	s13, [r3]
 8001cb4:	eeb0 1a66 	vmov.f32	s2, s13
 8001cb8:	eef0 0a47 	vmov.f32	s1, s14
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	483a      	ldr	r0, [pc, #232]	; (8001dac <main+0xe14>)
 8001cc2:	f000 fac1 	bl	8002248 <printCrazyMessage>
					if (isHumidityCrazy) {
 8001cc6:	f897 3e61 	ldrb.w	r3, [r7, #3681]	; 0xe61
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d014      	beq.n	8001cf8 <main+0xd60>
						printCrazyMessage("H", humidity, minHumidity, maxHumidity);
 8001cce:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001cd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <main+0xe18>)
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <main+0xe1c>)
 8001ce2:	edd3 6a00 	vldr	s13, [r3]
 8001ce6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cea:	eef0 0a47 	vmov.f32	s1, s14
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	4831      	ldr	r0, [pc, #196]	; (8001db8 <main+0xe20>)
 8001cf4:	f000 faa8 	bl	8002248 <printCrazyMessage>
					if (!isStandby) {
 8001cf8:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <main+0xe24>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02d      	beq.n	8001d62 <main+0xdca>
						if (isTemperatureCrazy) {
 8001d06:	f897 3e60 	ldrb.w	r3, [r7, #3680]	; 0xe60
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d014      	beq.n	8001d38 <main+0xda0>
							printCrazyMessage("T", temperature, minTemperature, maxTemperature);
 8001d0e:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001d12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <main+0xe28>)
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <main+0xe2c>)
 8001d22:	edd3 6a00 	vldr	s13, [r3]
 8001d26:	eeb0 1a66 	vmov.f32	s2, s13
 8001d2a:	eef0 0a47 	vmov.f32	s1, s14
 8001d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d32:	4825      	ldr	r0, [pc, #148]	; (8001dc8 <main+0xe30>)
 8001d34:	f000 fa88 	bl	8002248 <printCrazyMessage>
						if (isAccelerometerCrazy) {
 8001d38:	f897 3e63 	ldrb.w	r3, [r7, #3683]	; 0xe63
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <main+0xdca>
							printCrazyMessage("A", accelerometer, minAccelerometer, maxAccelerometer);
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <main+0xe34>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <main+0xe38>)
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001d50:	eef0 0a67 	vmov.f32	s1, s15
 8001d54:	f607 6364 	addw	r3, r7, #3684	; 0xe64
 8001d58:	ed93 0a00 	vldr	s0, [r3]
 8001d5c:	481d      	ldr	r0, [pc, #116]	; (8001dd4 <main+0xe3c>)
 8001d5e:	f000 fa73 	bl	8002248 <printCrazyMessage>
					drawGraphs(dataArrays, max_values, numberOfSensors, titles);
 8001d62:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8001d66:	f507 614d 	add.w	r1, r7, #3280	; 0xcd0
 8001d6a:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001d6e:	2206      	movs	r2, #6
 8001d70:	f000 fa9c 	bl	80022ac <drawGraphs>
					printer("\r\n\n");
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <main+0xdec>)
 8001d76:	f000 fa51 	bl	800221c <printer>
					printer(">>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> >>>>>> <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<< <<<<<<\r\n");
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <main+0xe40>)
 8001d7c:	f000 fa4e 	bl	800221c <printer>
 8001d80:	e1f9      	b.n	8002176 <main+0x11de>
 8001d82:	bf00      	nop
 8001d84:	0800a244 	.word	0x0800a244
 8001d88:	0800a248 	.word	0x0800a248
 8001d8c:	20000028 	.word	0x20000028
 8001d90:	2000002c 	.word	0x2000002c
 8001d94:	0800a300 	.word	0x0800a300
 8001d98:	20000030 	.word	0x20000030
 8001d9c:	20000034 	.word	0x20000034
 8001da0:	0800a304 	.word	0x0800a304
 8001da4:	20000010 	.word	0x20000010
 8001da8:	20000014 	.word	0x20000014
 8001dac:	0800a308 	.word	0x0800a308
 8001db0:	20000018 	.word	0x20000018
 8001db4:	2000001c 	.word	0x2000001c
 8001db8:	0800a30c 	.word	0x0800a30c
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	0800a310 	.word	0x0800a310
 8001dcc:	20000020 	.word	0x20000020
 8001dd0:	20000024 	.word	0x20000024
 8001dd4:	0800a314 	.word	0x0800a314
 8001dd8:	0800a318 	.word	0x0800a318
					if (isStandby) {
 8001ddc:	4bbe      	ldr	r3, [pc, #760]	; (80020d8 <main+0x1140>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8081 	beq.w	8001ee8 <main+0xf50>
						sprintf(message, "G:(x=%.4f, y=%.4f, z=%.4f, total=%.4f) (Degrees Per Second), M:(x=%.4f, y=%.4f, z=%.4f, total=%.4f) (milli gauus), P:(%.4f) (atm), H:(%.4f)(Relative Humidity) \r\n",
 8001de6:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001dea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fba9 	bl	8000548 <__aeabi_f2d>
 8001df6:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8001dfa:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001dfe:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_f2d>
 8001e0a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001e0e:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001e12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb95 	bl	8000548 <__aeabi_f2d>
 8001e1e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001e22:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f7fe fb8e 	bl	8000548 <__aeabi_f2d>
 8001e2c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001e30:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001e34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb84 	bl	8000548 <__aeabi_f2d>
 8001e40:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001e44:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001e48:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb7a 	bl	8000548 <__aeabi_f2d>
 8001e54:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001e58:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001e5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb70 	bl	8000548 <__aeabi_f2d>
 8001e68:	4682      	mov	sl, r0
 8001e6a:	468b      	mov	fp, r1
 8001e6c:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f7fe fb69 	bl	8000548 <__aeabi_f2d>
 8001e76:	4680      	mov	r8, r0
 8001e78:	4689      	mov	r9, r1
 8001e7a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001e7e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb5f 	bl	8000548 <__aeabi_f2d>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001e92:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb55 	bl	8000548 <__aeabi_f2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8001ea6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001eaa:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001eae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001eb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001eb6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001eba:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001ebe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001ec2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ec6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001eca:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ece:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001ed2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001ed6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001eda:	ed8d 7b00 	vstr	d7, [sp]
 8001ede:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ee2:	497e      	ldr	r1, [pc, #504]	; (80020dc <main+0x1144>)
 8001ee4:	f005 f882 	bl	8006fec <siprintf>
					if (!isStandby && !isDanger) {
 8001ee8:	4b7b      	ldr	r3, [pc, #492]	; (80020d8 <main+0x1140>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80cc 	beq.w	8002090 <main+0x10f8>
 8001ef8:	4b79      	ldr	r3, [pc, #484]	; (80020e0 <main+0x1148>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80c4 	beq.w	8002090 <main+0x10f8>
						sprintf(message, "G:(x=%.4f, y=%.4f, z=%.4f, total=%.4f) (Degrees Per Second), M:(x=%.4f, y=%.4f, z=%.4f, total=%.4f) (milli gauus), P:(%.4f) (atm), H:(%.4f) (Relative Humidity), T:(%.4f) (Degrees Celsius), A:(x=%.4f, y=%.4f, z=%.4f, total=%.4f) (m/s^2) \r\n",
 8001f08:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001f0c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8001f1c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001f20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb0e 	bl	8000548 <__aeabi_f2d>
 8001f2c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001f30:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001f34:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb04 	bl	8000548 <__aeabi_f2d>
 8001f40:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001f44:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	f7fe fafd 	bl	8000548 <__aeabi_f2d>
 8001f4e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001f52:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001f56:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe faf3 	bl	8000548 <__aeabi_f2d>
 8001f62:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001f66:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001f6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fae9 	bl	8000548 <__aeabi_f2d>
 8001f76:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001f7a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001f7e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fadf 	bl	8000548 <__aeabi_f2d>
 8001f8a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001f8e:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	f7fe fad8 	bl	8000548 <__aeabi_f2d>
 8001f98:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001f9c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001fa0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe face 	bl	8000548 <__aeabi_f2d>
 8001fac:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001fb0:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001fb4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fac4 	bl	8000548 <__aeabi_f2d>
 8001fc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001fc4:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001fc8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe faba 	bl	8000548 <__aeabi_f2d>
 8001fd4:	e9c7 0100 	strd	r0, r1, [r7]
 8001fd8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001fdc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fab0 	bl	8000548 <__aeabi_f2d>
 8001fe8:	4682      	mov	sl, r0
 8001fea:	468b      	mov	fp, r1
 8001fec:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8001ff0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe faa6 	bl	8000548 <__aeabi_f2d>
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	4689      	mov	r9, r1
 8002000:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8002004:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
 8002014:	f607 6364 	addw	r3, r7, #3684	; 0xe64
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	f7fe fa95 	bl	8000548 <__aeabi_f2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8002026:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 800202a:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 800202e:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8002032:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8002036:	ed97 7b00 	vldr	d7, [r7]
 800203a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800203e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002042:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002046:	ed97 7b04 	vldr	d7, [r7, #16]
 800204a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800204e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002052:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002056:	ed97 7b08 	vldr	d7, [r7, #32]
 800205a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800205e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002062:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002066:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800206a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800206e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002072:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002076:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800207a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800207e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002082:	ed8d 7b00 	vstr	d7, [sp]
 8002086:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800208a:	4916      	ldr	r1, [pc, #88]	; (80020e4 <main+0x114c>)
 800208c:	f004 ffae 	bl	8006fec <siprintf>
					printer("······ ······ ······ ······ ······ ······ ······ ······ ······ DRONE STATISTICS for COMMAND CENTER (HEALTHY STATE) ······ ······ ······ ······ ······ ······ ······ ······ ······\r\n\n");
 8002090:	4815      	ldr	r0, [pc, #84]	; (80020e8 <main+0x1150>)
 8002092:	f000 f8c3 	bl	800221c <printer>
					sprintf(flightTime, "Flight Time:");
 8002096:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800209a:	4914      	ldr	r1, [pc, #80]	; (80020ec <main+0x1154>)
 800209c:	4618      	mov	r0, r3
 800209e:	f004 ffa5 	bl	8006fec <siprintf>
					if (days > 0) {
 80020a2:	f8d7 3e44 	ldr.w	r3, [r7, #3652]	; 0xe44
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	dd08      	ble.n	80020bc <main+0x1124>
						sprintf(flightTime, "%s %d Days |", flightTime, days);
 80020aa:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80020ae:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80020b2:	f8d7 3e44 	ldr.w	r3, [r7, #3652]	; 0xe44
 80020b6:	490e      	ldr	r1, [pc, #56]	; (80020f0 <main+0x1158>)
 80020b8:	f004 ff98 	bl	8006fec <siprintf>
					if (hours > 0) {
 80020bc:	f8d7 3e40 	ldr.w	r3, [r7, #3648]	; 0xe40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	dd19      	ble.n	80020f8 <main+0x1160>
						sprintf(flightTime, "%s %d Hours |", flightTime, hours);
 80020c4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80020c8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80020cc:	f8d7 3e40 	ldr.w	r3, [r7, #3648]	; 0xe40
 80020d0:	4908      	ldr	r1, [pc, #32]	; (80020f4 <main+0x115c>)
 80020d2:	f004 ff8b 	bl	8006fec <siprintf>
 80020d6:	e00f      	b.n	80020f8 <main+0x1160>
 80020d8:	20000000 	.word	0x20000000
 80020dc:	0800a3d0 	.word	0x0800a3d0
 80020e0:	2000037c 	.word	0x2000037c
 80020e4:	0800a474 	.word	0x0800a474
 80020e8:	0800a564 	.word	0x0800a564
 80020ec:	0800a688 	.word	0x0800a688
 80020f0:	0800a698 	.word	0x0800a698
 80020f4:	0800a6a8 	.word	0x0800a6a8
					if (minutes > 0) {
 80020f8:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	; 0xe3c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dd08      	ble.n	8002112 <main+0x117a>
						sprintf(flightTime, "%s %d Minutes |", flightTime, minutes);
 8002100:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8002104:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8002108:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	; 0xe3c
 800210c:	4938      	ldr	r1, [pc, #224]	; (80021f0 <main+0x1258>)
 800210e:	f004 ff6d 	bl	8006fec <siprintf>
					sprintf(flightTime, "%s %d Seconds | %d Milliseconds\r\n", flightTime, seconds, milliseconds);
 8002112:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8002116:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 800211a:	f8d7 3e58 	ldr.w	r3, [r7, #3672]	; 0xe58
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	; 0xe38
 8002124:	4933      	ldr	r1, [pc, #204]	; (80021f4 <main+0x125c>)
 8002126:	f004 ff61 	bl	8006fec <siprintf>
					printer(flightTime);
 800212a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f874 	bl	800221c <printer>
					sprintf(healthInfo, "Structural Integrity Level (Health Level); %d\r\n", healthLevel);
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <main+0x1260>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800213c:	492f      	ldr	r1, [pc, #188]	; (80021fc <main+0x1264>)
 800213e:	4618      	mov	r0, r3
 8002140:	f004 ff54 	bl	8006fec <siprintf>
					printer(healthInfo);
 8002144:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f867 	bl	800221c <printer>
					printer(message);
 800214e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f862 	bl	800221c <printer>
					drawGraphs(dataArrays, max_values, numberOfSensors, titles);
 8002158:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 800215c:	f507 614d 	add.w	r1, r7, #3280	; 0xcd0
 8002160:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002164:	2206      	movs	r2, #6
 8002166:	f000 f8a1 	bl	80022ac <drawGraphs>
					printer("\r\n\n");
 800216a:	4825      	ldr	r0, [pc, #148]	; (8002200 <main+0x1268>)
 800216c:	f000 f856 	bl	800221c <printer>
					printer("······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······ ······\r\n");
 8002170:	4824      	ldr	r0, [pc, #144]	; (8002204 <main+0x126c>)
 8002172:	f000 f853 	bl	800221c <printer>
		if (!isStandby && !gotAttacked) {
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <main+0x1270>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	f43e af63 	beq.w	800104c <main+0xb4>
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <main+0x1274>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f43e af5b 	beq.w	800104c <main+0xb4>
			if (a_z < -8) { gotAttacked = true; }
 8002196:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800219a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80021a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	d502      	bpl.n	80021b6 <main+0x121e>
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <main+0x1274>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
			if (gotAttacked) {
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <main+0x1274>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f43e af46 	beq.w	800104c <main+0xb4>
				isDanger = true;
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <main+0x1278>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
				rescueStartTime = HAL_GetTick();
 80021c6:	f001 ff47 	bl	8004058 <HAL_GetTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <main+0x127c>)
 80021d0:	601a      	str	r2, [r3, #0]
				printer("!!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! DRONE WARNING for COMMAND CENTER (DANGER STATE) !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!!\r\n\n");
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <main+0x1280>)
 80021d4:	f000 f822 	bl	800221c <printer>
 80021d8:	f7fe bf38 	b.w	800104c <main+0xb4>
		if ((t2 - t1) < 250) { continue; }
 80021dc:	bf00      	nop
	while (1) {
 80021de:	f7fe bf35 	b.w	800104c <main+0xb4>
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	f507 676a 	add.w	r7, r7, #3744	; 0xea0
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	0800a6b8 	.word	0x0800a6b8
 80021f4:	0800a6c8 	.word	0x0800a6c8
 80021f8:	20000004 	.word	0x20000004
 80021fc:	0800a6ec 	.word	0x0800a6ec
 8002200:	0800a244 	.word	0x0800a244
 8002204:	0800a71c 	.word	0x0800a71c
 8002208:	20000000 	.word	0x20000000
 800220c:	2000037d 	.word	0x2000037d
 8002210:	2000037c 	.word	0x2000037c
 8002214:	20000380 	.word	0x20000380
 8002218:	0800a864 	.word	0x0800a864

0800221c <printer>:

// Function for (Printing)
static void printer(char message[2622]) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart, (uint8_t*)message, strlen(message),0xFFFF);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fd ffd3 	bl	80001d0 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <printer+0x28>)
 8002236:	f003 f9b0 	bl	800559a <HAL_UART_Transmit>
};
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200002f8 	.word	0x200002f8

08002248 <printCrazyMessage>:

static void printCrazyMessage(const char* sensorName, float value, float min, float max) {
 8002248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800224c:	b09a      	sub	sp, #104	; 0x68
 800224e:	af06      	add	r7, sp, #24
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	ed87 0a02 	vstr	s0, [r7, #8]
 8002256:	edc7 0a01 	vstr	s1, [r7, #4]
 800225a:	ed87 1a00 	vstr	s2, [r7]
	char text[60];
	sprintf(text, "%s: %f exceeds the limits of %f - %f\r\n", sensorName, value, min, max);
 800225e:	68b8      	ldr	r0, [r7, #8]
 8002260:	f7fe f972 	bl	8000548 <__aeabi_f2d>
 8002264:	4604      	mov	r4, r0
 8002266:	460d      	mov	r5, r1
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe f96d 	bl	8000548 <__aeabi_f2d>
 800226e:	4680      	mov	r8, r0
 8002270:	4689      	mov	r9, r1
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	f107 0014 	add.w	r0, r7, #20
 8002280:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002284:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002288:	e9cd 4500 	strd	r4, r5, [sp]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4906      	ldr	r1, [pc, #24]	; (80022a8 <printCrazyMessage+0x60>)
 8002290:	f004 feac 	bl	8006fec <siprintf>
	printer(text);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ffbf 	bl	800221c <printer>
}
 800229e:	bf00      	nop
 80022a0:	3750      	adds	r7, #80	; 0x50
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022a8:	0800a930 	.word	0x0800a930

080022ac <drawGraphs>:

void drawGraphs(int dataArrays[][historySize], float max_values[], int numGraphs, char* titles[]) {
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b09d      	sub	sp, #116	; 0x74
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
	int max = 13;
 80022ba:	230d      	movs	r3, #13
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
	int graphSize = 29;
 80022be:	231d      	movs	r3, #29
 80022c0:	643b      	str	r3, [r7, #64]	; 0x40

	printer("\n");
 80022c2:	487b      	ldr	r0, [pc, #492]	; (80024b0 <drawGraphs+0x204>)
 80022c4:	f7ff ffaa 	bl	800221c <printer>
	for (int row = max; row > 0; row--) {
 80022c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022cc:	e05f      	b.n	800238e <drawGraphs+0xe2>
		// Display y-values on the left for each row
		for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80022d2:	e052      	b.n	800237a <drawGraphs+0xce>
			char yValue[20];
			sprintf(yValue, "%3d%%| ", row * 10);
 80022d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	461a      	mov	r2, r3
 80022e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e4:	4973      	ldr	r1, [pc, #460]	; (80024b4 <drawGraphs+0x208>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 fe80 	bl	8006fec <siprintf>
			printer(yValue);
 80022ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff93 	bl	800221c <printer>

			for (int col = 0; col < historySize; col++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	667b      	str	r3, [r7, #100]	; 0x64
 80022fa:	e035      	b.n	8002368 <drawGraphs+0xbc>
				int newData = (int)((dataArrays[graphIndex][col] / max_values[graphIndex]) * 10.0);
 80022fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800230e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800232a:	ee16 0a90 	vmov	r0, s13
 800232e:	f7fe f90b 	bl	8000548 <__aeabi_f2d>
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <drawGraphs+0x20c>)
 8002338:	f7fe f95e 	bl	80005f8 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc08 	bl	8000b58 <__aeabi_d2iz>
 8002348:	4603      	mov	r3, r0
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c

				if (newData >= row) {
 800234c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002350:	429a      	cmp	r2, r3
 8002352:	db03      	blt.n	800235c <drawGraphs+0xb0>
					printer("| ");
 8002354:	4859      	ldr	r0, [pc, #356]	; (80024bc <drawGraphs+0x210>)
 8002356:	f7ff ff61 	bl	800221c <printer>
 800235a:	e002      	b.n	8002362 <drawGraphs+0xb6>
				} else {
					printer("  ");
 800235c:	4858      	ldr	r0, [pc, #352]	; (80024c0 <drawGraphs+0x214>)
 800235e:	f7ff ff5d 	bl	800221c <printer>
			for (int col = 0; col < historySize; col++) {
 8002362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002364:	3301      	adds	r3, #1
 8002366:	667b      	str	r3, [r7, #100]	; 0x64
 8002368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800236a:	2b09      	cmp	r3, #9
 800236c:	ddc6      	ble.n	80022fc <drawGraphs+0x50>
				}
			}

			// Separate graphs with some space
			printer("   ");
 800236e:	4855      	ldr	r0, [pc, #340]	; (80024c4 <drawGraphs+0x218>)
 8002370:	f7ff ff54 	bl	800221c <printer>
		for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 8002374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002376:	3301      	adds	r3, #1
 8002378:	66bb      	str	r3, [r7, #104]	; 0x68
 800237a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	dba8      	blt.n	80022d4 <drawGraphs+0x28>
		}
		printer("\r\n");
 8002382:	4851      	ldr	r0, [pc, #324]	; (80024c8 <drawGraphs+0x21c>)
 8002384:	f7ff ff4a 	bl	800221c <printer>
	for (int row = max; row > 0; row--) {
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	3b01      	subs	r3, #1
 800238c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	2b00      	cmp	r3, #0
 8002392:	dc9c      	bgt.n	80022ce <drawGraphs+0x22>
	}

	// X-axis (time) for each graph
	printer("     ");
 8002394:	484d      	ldr	r0, [pc, #308]	; (80024cc <drawGraphs+0x220>)
 8002396:	f7ff ff41 	bl	800221c <printer>
	for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
 800239e:	e011      	b.n	80023c4 <drawGraphs+0x118>
		for (int i = 0; i < historySize; i++) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a4:	e005      	b.n	80023b2 <drawGraphs+0x106>
			printer("--");
 80023a6:	484a      	ldr	r0, [pc, #296]	; (80024d0 <drawGraphs+0x224>)
 80023a8:	f7ff ff38 	bl	800221c <printer>
		for (int i = 0; i < historySize; i++) {
 80023ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ae:	3301      	adds	r3, #1
 80023b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	ddf6      	ble.n	80023a6 <drawGraphs+0xfa>
		}
		printer("         ");  // Separate graphs with some space
 80023b8:	4846      	ldr	r0, [pc, #280]	; (80024d4 <drawGraphs+0x228>)
 80023ba:	f7ff ff2f 	bl	800221c <printer>
	for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 80023be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c0:	3301      	adds	r3, #1
 80023c2:	663b      	str	r3, [r7, #96]	; 0x60
 80023c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbe9      	blt.n	80023a0 <drawGraphs+0xf4>
	}
	printer("\r\n      ");
 80023cc:	4842      	ldr	r0, [pc, #264]	; (80024d8 <drawGraphs+0x22c>)
 80023ce:	f7ff ff25 	bl	800221c <printer>
	for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023d6:	e01b      	b.n	8002410 <drawGraphs+0x164>
		for (int i = 0; i < historySize; i++) {
 80023d8:	2300      	movs	r3, #0
 80023da:	657b      	str	r3, [r7, #84]	; 0x54
 80023dc:	e00f      	b.n	80023fe <drawGraphs+0x152>
			char mai[20];
			sprintf(mai, "%d ", i + 1);
 80023de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	493d      	ldr	r1, [pc, #244]	; (80024dc <drawGraphs+0x230>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fdff 	bl	8006fec <siprintf>
			printer(mai);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff12 	bl	800221c <printer>
		for (int i = 0; i < historySize; i++) {
 80023f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fa:	3301      	adds	r3, #1
 80023fc:	657b      	str	r3, [r7, #84]	; 0x54
 80023fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002400:	2b09      	cmp	r3, #9
 8002402:	ddec      	ble.n	80023de <drawGraphs+0x132>
		}

		// Separate graphs with some space
		printer("        ");
 8002404:	4836      	ldr	r0, [pc, #216]	; (80024e0 <drawGraphs+0x234>)
 8002406:	f7ff ff09 	bl	800221c <printer>
	for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 800240a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240c:	3301      	adds	r3, #1
 800240e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbdf      	blt.n	80023d8 <drawGraphs+0x12c>
	}
	printer("\r\n\n");
 8002418:	4832      	ldr	r0, [pc, #200]	; (80024e4 <drawGraphs+0x238>)
 800241a:	f7ff feff 	bl	800221c <printer>

	for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 800241e:	2300      	movs	r3, #0
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
 8002422:	e03c      	b.n	800249e <drawGraphs+0x1f2>
		for (int i = 0; i < (int)((graphSize - strlen(titles[graphIndex])) / 2); i++) {
 8002424:	2300      	movs	r3, #0
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002428:	e005      	b.n	8002436 <drawGraphs+0x18a>
			printer(" ");
 800242a:	482f      	ldr	r0, [pc, #188]	; (80024e8 <drawGraphs+0x23c>)
 800242c:	f7ff fef6 	bl	800221c <printer>
		for (int i = 0; i < (int)((graphSize - strlen(titles[graphIndex])) / 2); i++) {
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	3301      	adds	r3, #1
 8002434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002436:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd fec4 	bl	80001d0 <strlen>
 8002448:	4603      	mov	r3, r0
 800244a:	1ae3      	subs	r3, r4, r3
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	461a      	mov	r2, r3
 8002450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002452:	4293      	cmp	r3, r2
 8002454:	dbe9      	blt.n	800242a <drawGraphs+0x17e>
		}
		printer(titles[graphIndex]);
 8002456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fedb 	bl	800221c <printer>
		for (int i = 0; i < (int)((graphSize - strlen(titles[graphIndex])) / 2); i++) {
 8002466:	2300      	movs	r3, #0
 8002468:	64bb      	str	r3, [r7, #72]	; 0x48
 800246a:	e005      	b.n	8002478 <drawGraphs+0x1cc>
			printer(" ");
 800246c:	481e      	ldr	r0, [pc, #120]	; (80024e8 <drawGraphs+0x23c>)
 800246e:	f7ff fed5 	bl	800221c <printer>
		for (int i = 0; i < (int)((graphSize - strlen(titles[graphIndex])) / 2); i++) {
 8002472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002474:	3301      	adds	r3, #1
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
 8002478:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd fea3 	bl	80001d0 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	1ae3      	subs	r3, r4, r3
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	461a      	mov	r2, r3
 8002492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002494:	4293      	cmp	r3, r2
 8002496:	dbe9      	blt.n	800246c <drawGraphs+0x1c0>
	for (int graphIndex = 0; graphIndex < numGraphs; graphIndex++) {
 8002498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249a:	3301      	adds	r3, #1
 800249c:	653b      	str	r3, [r7, #80]	; 0x50
 800249e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbbe      	blt.n	8002424 <drawGraphs+0x178>
		}
	}
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3774      	adds	r7, #116	; 0x74
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	0800a958 	.word	0x0800a958
 80024b4:	0800a95c 	.word	0x0800a95c
 80024b8:	40240000 	.word	0x40240000
 80024bc:	0800a964 	.word	0x0800a964
 80024c0:	0800a968 	.word	0x0800a968
 80024c4:	0800a96c 	.word	0x0800a96c
 80024c8:	0800a970 	.word	0x0800a970
 80024cc:	0800a974 	.word	0x0800a974
 80024d0:	0800a97c 	.word	0x0800a97c
 80024d4:	0800a980 	.word	0x0800a980
 80024d8:	0800a98c 	.word	0x0800a98c
 80024dc:	0800a998 	.word	0x0800a998
 80024e0:	0800a99c 	.word	0x0800a99c
 80024e4:	0800a244 	.word	0x0800a244
 80024e8:	0800a9a8 	.word	0x0800a9a8

080024ec <incrementBattery>:

// Functions for (Modification)
static void incrementBattery(int *batteryLevel) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	*batteryLevel = min(*batteryLevel + 3, 10);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3303      	adds	r3, #3
 80024fa:	210a      	movs	r1, #10
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f849 	bl	8002594 <min>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <decrementBattery>:

static void decrementBattery(int *batteryLevel) {
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	*batteryLevel -= 5;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	1f5a      	subs	r2, r3, #5
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <roundToFourDecimalPlaces>:

float roundToFourDecimalPlaces(float num) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	ed87 0a01 	vstr	s0, [r7, #4]
	float rounded = roundf(num * 10000.0) / 10000.0;
 800253a:	edd7 7a01 	vldr	s15, [r7, #4]
 800253e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002570 <roundToFourDecimalPlaces+0x40>
 8002542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002546:	eeb0 0a67 	vmov.f32	s0, s15
 800254a:	f006 fe21 	bl	8009190 <roundf>
 800254e:	eeb0 7a40 	vmov.f32	s14, s0
 8002552:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002570 <roundToFourDecimalPlaces+0x40>
 8002556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800255a:	edc7 7a03 	vstr	s15, [r7, #12]
	return rounded;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	ee07 3a90 	vmov	s15, r3
}
 8002564:	eeb0 0a67 	vmov.f32	s0, s15
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	461c4000 	.word	0x461c4000

08002574 <max>:

int max(int a, int b) {
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	return (a > b) ? a : b;
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4293      	cmp	r3, r2
 8002584:	bfb8      	it	lt
 8002586:	4613      	movlt	r3, r2
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <min>:

int min(int a, int b) {
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	return (a < b) ? a : b;
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	bfa8      	it	ge
 80025a6:	4613      	movge	r3, r2
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <initialiseLED>:

// Functions for (Initialising Systems)
static void initialiseLED(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE(); /* GPIO Ports Clock Enable */
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <initialiseLED+0x5c>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <initialiseLED+0x5c>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <initialiseLED+0x5c>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); /*Configure GPIO pin Output Level */
 80025e0:	2200      	movs	r2, #0
 80025e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025e6:	480b      	ldr	r0, [pc, #44]	; (8002614 <initialiseLED+0x60>)
 80025e8:	f002 f8f2 	bl	80047d0 <HAL_GPIO_WritePin>
	/*Configure GPIO pin LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 80025ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025f0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4804      	ldr	r0, [pc, #16]	; (8002614 <initialiseLED+0x60>)
 8002604:	f001 fe46 	bl	8004294 <HAL_GPIO_Init>
}
 8002608:	bf00      	nop
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	48000400 	.word	0x48000400

08002618 <initialiseSysTick>:

static void initialiseSysTick(void) {
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	HAL_Init();
 800261c:	f001 fcb8 	bl	8003f90 <HAL_Init>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}

08002624 <initialisePins>:

static void initialisePins(void) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable AHB2 Bus for GPIOC
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <initialisePins+0x54>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <initialisePins+0x54>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <initialisePins+0x54>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002654:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <initialisePins+0x58>)
 8002658:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4807      	ldr	r0, [pc, #28]	; (8002680 <initialisePins+0x5c>)
 8002664:	f001 fe16 	bl	8004294 <HAL_GPIO_Init>
	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002668:	2028      	movs	r0, #40	; 0x28
 800266a:	f001 fdf8 	bl	800425e <HAL_NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	10210000 	.word	0x10210000
 8002680:	48000800 	.word	0x48000800

08002684 <initialiseUART>:

static void initialiseUART(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <initialiseUART+0xa0>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <initialiseUART+0xa0>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <initialiseUART+0xa0>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b0:	2307      	movs	r3, #7
 80026b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80026b4:	23c0      	movs	r3, #192	; 0xc0
 80026b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	4817      	ldr	r0, [pc, #92]	; (8002728 <initialiseUART+0xa4>)
 80026ca:	f001 fde3 	bl	8004294 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart.Instance = USART1;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <initialiseUART+0xa8>)
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <initialiseUART+0xac>)
 80026d2:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <initialiseUART+0xa8>)
 80026d6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026da:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <initialiseUART+0xa8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <initialiseUART+0xa8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <initialiseUART+0xa8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <initialiseUART+0xa8>)
 80026f0:	220c      	movs	r2, #12
 80026f2:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <initialiseUART+0xa8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <initialiseUART+0xa8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	61da      	str	r2, [r3, #28]
	huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <initialiseUART+0xa8>)
 8002702:	2200      	movs	r2, #0
 8002704:	621a      	str	r2, [r3, #32]
	huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <initialiseUART+0xa8>)
 8002708:	2200      	movs	r2, #0
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart) != HAL_OK)
 800270c:	4807      	ldr	r0, [pc, #28]	; (800272c <initialiseUART+0xa8>)
 800270e:	f002 fec1 	bl	8005494 <HAL_UART_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d000      	beq.n	800271a <initialiseUART+0x96>
	{
		while(1);
 8002718:	e7fe      	b.n	8002718 <initialiseUART+0x94>
	}
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	48000400 	.word	0x48000400
 800272c:	200002f8 	.word	0x200002f8
 8002730:	40013800 	.word	0x40013800

08002734 <initialiseButton>:

static void initialiseButton(void) {
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002738:	2100      	movs	r1, #0
 800273a:	2000      	movs	r0, #0
 800273c:	f000 fb56 	bl	8002dec <BSP_PB_Init>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <initialiseSensors>:

static void initialiseSensors(void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	BSP_GYRO_Init();     // Initialise (Gyroscope) (Units: )
 8002748:	f000 fd60 	bl	800320c <BSP_GYRO_Init>
	BSP_MAGNETO_Init();  // Initialise (Magnetometer) (Units: )
 800274c:	f000 fdfa 	bl	8003344 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();  // Initialise (Pressure Sensor) (Units: Atmosphere (atm))
 8002750:	f000 fe50 	bl	80033f4 <BSP_PSENSOR_Init>
	BSP_HSENSOR_Init();  // Initialise (Humidity Sensor) (Units: Relative Humidity (RL))
 8002754:	f000 fdc8 	bl	80032e8 <BSP_HSENSOR_Init>
	BSP_ACCELERO_Init(); // Initialise (Accelerometer) (Units: )
 8002758:	f000 fcee 	bl	8003138 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();  // Initialise (Temperature Sensor) (Units: Degrees Celsius (Cº))
 800275c:	f000 fe78 	bl	8003450 <BSP_TSENSOR_Init>
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}

08002764 <readGyroscope>:

// Functions for (Reading Sensors)
static void readGyroscope(float *x, float *y, float *z) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
	float constant = pow(10, -3);
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <readGyroscope+0x7c>)
 8002772:	61fb      	str	r3, [r7, #28]
	float data[3];
	BSP_GYRO_GetXYZ(data);
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fd9d 	bl	80032b8 <BSP_GYRO_GetXYZ>
	*x = roundToFourDecimalPlaces(data[0] * constant);
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 7a07 	vldr	s15, [r7, #28]
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	f7ff fecf 	bl	8002530 <roundToFourDecimalPlaces>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	edc3 7a00 	vstr	s15, [r3]
	*y = roundToFourDecimalPlaces(data[1] * constant);
 800279c:	ed97 7a05 	vldr	s14, [r7, #20]
 80027a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ac:	f7ff fec0 	bl	8002530 <roundToFourDecimalPlaces>
 80027b0:	eef0 7a40 	vmov.f32	s15, s0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	edc3 7a00 	vstr	s15, [r3]
	*z = roundToFourDecimalPlaces(data[2] * constant);
 80027ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80027be:	edd7 7a07 	vldr	s15, [r7, #28]
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ca:	f7ff feb1 	bl	8002530 <roundToFourDecimalPlaces>
 80027ce:	eef0 7a40 	vmov.f32	s15, s0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	edc3 7a00 	vstr	s15, [r3]
}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	3a83126f 	.word	0x3a83126f

080027e4 <readMagnetometer>:

static void readMagnetometer(float *x, float *y, float *z) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
	int16_t data[3] = { 0 };
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	809a      	strh	r2, [r3, #4]
	BSP_MAGNETO_GetXYZ(data);
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fde0 	bl	80033c4 <BSP_MAGNETO_GetXYZ>
	*x = roundToFourDecimalPlaces((float)data[0]);
 8002804:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	f7ff fe8c 	bl	8002530 <roundToFourDecimalPlaces>
 8002818:	eef0 7a40 	vmov.f32	s15, s0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	edc3 7a00 	vstr	s15, [r3]
	*y = roundToFourDecimalPlaces((float)data[1]);
 8002822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282e:	eeb0 0a67 	vmov.f32	s0, s15
 8002832:	f7ff fe7d 	bl	8002530 <roundToFourDecimalPlaces>
 8002836:	eef0 7a40 	vmov.f32	s15, s0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	edc3 7a00 	vstr	s15, [r3]
	*z = roundToFourDecimalPlaces((float)data[2]);
 8002840:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284c:	eeb0 0a67 	vmov.f32	s0, s15
 8002850:	f7ff fe6e 	bl	8002530 <roundToFourDecimalPlaces>
 8002854:	eef0 7a40 	vmov.f32	s15, s0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edc3 7a00 	vstr	s15, [r3]
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <readPressureSensor>:

static void readPressureSensor(float *pressure) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	*pressure = roundToFourDecimalPlaces((BSP_PSENSOR_ReadPressure() * 100) / (101.3 * 1000));
 8002870:	f000 fde0 	bl	8003434 <BSP_PSENSOR_ReadPressure>
 8002874:	eef0 7a40 	vmov.f32	s15, s0
 8002878:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028c8 <readPressureSensor+0x60>
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002880:	ee17 0a90 	vmov	r0, s15
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_f2d>
 8002888:	a30d      	add	r3, pc, #52	; (adr r3, 80028c0 <readPressureSensor+0x58>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd ffdd 	bl	800084c <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f985 	bl	8000ba8 <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	ee00 3a10 	vmov	s0, r3
 80028a4:	f7ff fe44 	bl	8002530 <roundToFourDecimalPlaces>
 80028a8:	eef0 7a40 	vmov.f32	s15, s0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edc3 7a00 	vstr	s15, [r3]
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40f8bb40 	.word	0x40f8bb40
 80028c8:	42c80000 	.word	0x42c80000

080028cc <readHumiditySensor>:

static void readHumiditySensor(float *humidity) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	*humidity = roundToFourDecimalPlaces(BSP_HSENSOR_ReadHumidity());
 80028d4:	f000 fd28 	bl	8003328 <BSP_HSENSOR_ReadHumidity>
 80028d8:	eef0 7a40 	vmov.f32	s15, s0
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	f7ff fe26 	bl	8002530 <roundToFourDecimalPlaces>
 80028e4:	eef0 7a40 	vmov.f32	s15, s0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a00 	vstr	s15, [r3]
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <readAccelerometer>:

static void readAccelerometer(float *x, float *y, float *z) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
	float constant = (9.8/1000.0f);
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <readAccelerometer+0xa0>)
 8002906:	61fb      	str	r3, [r7, #28]
	int16_t data[3] = { 0 };			// array to store the x, y and z readings.
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(data);		// read accelerometer
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fc60 	bl	80031dc <BSP_ACCELERO_AccGetXYZ>
	// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
	// Converting to float to print the actual acceleration.
	*x = roundToFourDecimalPlaces((float)data[0] * constant);
 800291c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002928:	edd7 7a07 	vldr	s15, [r7, #28]
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	f7ff fdfc 	bl	8002530 <roundToFourDecimalPlaces>
 8002938:	eef0 7a40 	vmov.f32	s15, s0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	edc3 7a00 	vstr	s15, [r3]
	*y = roundToFourDecimalPlaces((float)data[1] * constant);
 8002942:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	f7ff fde9 	bl	8002530 <roundToFourDecimalPlaces>
 800295e:	eef0 7a40 	vmov.f32	s15, s0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	edc3 7a00 	vstr	s15, [r3]
	*z = roundToFourDecimalPlaces((float)data[2] * constant);
 8002968:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002974:	edd7 7a07 	vldr	s15, [r7, #28]
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	eeb0 0a67 	vmov.f32	s0, s15
 8002980:	f7ff fdd6 	bl	8002530 <roundToFourDecimalPlaces>
 8002984:	eef0 7a40 	vmov.f32	s15, s0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edc3 7a00 	vstr	s15, [r3]
}
 800298e:	bf00      	nop
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	3c20902e 	.word	0x3c20902e

0800299c <readTemperatureSensor>:

static void readTemperatureSensor(float *temperature) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	*temperature = roundToFourDecimalPlaces(BSP_TSENSOR_ReadTemp());
 80029a4:	f000 fd70 	bl	8003488 <BSP_TSENSOR_ReadTemp>
 80029a8:	eef0 7a40 	vmov.f32	s15, s0
 80029ac:	eeb0 0a67 	vmov.f32	s0, s15
 80029b0:	f7ff fdbe 	bl	8002530 <roundToFourDecimalPlaces>
 80029b4:	eef0 7a40 	vmov.f32	s15, s0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	edc3 7a00 	vstr	s15, [r3]
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_MspInit+0x44>)
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_MspInit+0x44>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6613      	str	r3, [r2, #96]	; 0x60
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_MspInit+0x44>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_MspInit+0x44>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_MspInit+0x44>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_MspInit+0x44>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_I2C_MspInit+0x7c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d128      	bne.n	8002a84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002a4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a50:	2312      	movs	r3, #18
 8002a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4619      	mov	r1, r3
 8002a66:	480b      	ldr	r0, [pc, #44]	; (8002a94 <HAL_I2C_MspInit+0x84>)
 8002a68:	f001 fc14 	bl	8004294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a76:	6593      	str	r3, [r2, #88]	; 0x58
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40005800 	.word	0x40005800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	48000400 	.word	0x48000400

08002a98 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_I2C_MspDeInit+0x30>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_I2C_MspDeInit+0x34>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_I2C_MspDeInit+0x34>)
 8002ab0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8002ab6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <HAL_I2C_MspDeInit+0x38>)
 8002abc:	f001 fd94 	bl	80045e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40005800 	.word	0x40005800
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	48000400 	.word	0x48000400

08002ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_UART_MspInit+0xd8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d128      	bne.n	8002b48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b00:	6613      	str	r3, [r2, #96]	; 0x60
 8002b02:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b36:	2307      	movs	r3, #7
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481c      	ldr	r0, [pc, #112]	; (8002bb4 <HAL_UART_MspInit+0xe0>)
 8002b42:	f001 fba7 	bl	8004294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b46:	e02d      	b.n	8002ba4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <HAL_UART_MspInit+0xe4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d128      	bne.n	8002ba4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b94:	2307      	movs	r3, #7
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4807      	ldr	r0, [pc, #28]	; (8002bbc <HAL_UART_MspInit+0xe8>)
 8002ba0:	f001 fb78 	bl	8004294 <HAL_GPIO_Init>
}
 8002ba4:	bf00      	nop
 8002ba6:	3730      	adds	r7, #48	; 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	40004800 	.word	0x40004800
 8002bbc:	48000c00 	.word	0x48000c00

08002bc0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_UART_MspDeInit+0x50>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10a      	bne.n	8002be8 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_UART_MspDeInit+0x54>)
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_UART_MspDeInit+0x54>)
 8002bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bdc:	6613      	str	r3, [r2, #96]	; 0x60
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOB, ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin);
 8002bde:	21c0      	movs	r1, #192	; 0xc0
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <HAL_UART_MspDeInit+0x58>)
 8002be2:	f001 fd01 	bl	80045e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002be6:	e00f      	b.n	8002c08 <HAL_UART_MspDeInit+0x48>
  else if(huart->Instance==USART3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <HAL_UART_MspDeInit+0x5c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10a      	bne.n	8002c08 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_UART_MspDeInit+0x54>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_UART_MspDeInit+0x54>)
 8002bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOD, INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin);
 8002bfe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <HAL_UART_MspDeInit+0x60>)
 8002c04:	f001 fcf0 	bl	80045e8 <HAL_GPIO_DeInit>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40021000 	.word	0x40021000
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	40004800 	.word	0x40004800
 8002c20:	48000c00 	.word	0x48000c00

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <MemManage_Handler+0x4>

08002c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c78:	f001 f9dc 	bl	8004034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002c84:	2020      	movs	r0, #32
 8002c86:	f001 fdd5 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c8a:	2040      	movs	r0, #64	; 0x40
 8002c8c:	f001 fdd2 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c90:	2080      	movs	r0, #128	; 0x80
 8002c92:	f001 fdcf 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c9a:	f001 fdcb 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002ca6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002caa:	f001 fdc3 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002cae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cb2:	f001 fdbf 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cba:	f001 fdbb 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002cbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cc2:	f001 fdb7 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002cc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002cca:	f001 fdb3 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <_sbrk+0x50>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x16>
		heap_end = &end;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <_sbrk+0x50>)
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <_sbrk+0x54>)
 8002ce8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <_sbrk+0x50>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <_sbrk+0x50>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	466a      	mov	r2, sp
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d907      	bls.n	8002d0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002cfe:	f003 fb2d 	bl	800635c <__errno>
 8002d02:	4603      	mov	r3, r0
 8002d04:	220c      	movs	r2, #12
 8002d06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d0c:	e006      	b.n	8002d1c <_sbrk+0x48>
	}

	heap_end += incr;
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <_sbrk+0x50>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a03      	ldr	r2, [pc, #12]	; (8002d24 <_sbrk+0x50>)
 8002d18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000038c 	.word	0x2000038c
 8002d28:	200004a8 	.word	0x200004a8

08002d2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <SystemInit+0x64>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <SystemInit+0x64>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <SystemInit+0x68>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <SystemInit+0x68>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <SystemInit+0x68>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <SystemInit+0x68>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <SystemInit+0x68>)
 8002d58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <SystemInit+0x68>)
 8002d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <SystemInit+0x68>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <SystemInit+0x68>)
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <SystemInit+0x68>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <SystemInit+0x64>)
 8002d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d82:	609a      	str	r2, [r3, #8]
#endif
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	40021000 	.word	0x40021000

08002d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d9e:	e003      	b.n	8002da8 <LoopCopyDataInit>

08002da0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002da2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002da4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002da6:	3104      	adds	r1, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002da8:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002dac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002dae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002db0:	d3f6      	bcc.n	8002da0 <CopyDataInit>
	ldr	r2, =_sbss
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002db4:	e002      	b.n	8002dbc <LoopFillZerobss>

08002db6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002db6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002db8:	f842 3b04 	str.w	r3, [r2], #4

08002dbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <LoopForever+0x16>)
	cmp	r2, r3
 8002dbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002dc0:	d3f9      	bcc.n	8002db6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dc2:	f7ff ffb3 	bl	8002d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f003 fbc5 	bl	8006554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dca:	f7fe f8e5 	bl	8000f98 <main>

08002dce <LoopForever>:

LoopForever:
    b LoopForever
 8002dce:	e7fe      	b.n	8002dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002dd4:	0800ae00 	.word	0x0800ae00
	ldr	r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ddc:	200002dc 	.word	0x200002dc
	ldr	r2, =_sbss
 8002de0:	200002dc 	.word	0x200002dc
	ldr	r3, = _ebss
 8002de4:	200004a8 	.word	0x200004a8

08002de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC1_2_IRQHandler>
	...

08002dec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	460a      	mov	r2, r1
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <BSP_PB_Init+0xa0>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <BSP_PB_Init+0xa0>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <BSP_PB_Init+0xa0>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002e14:	79bb      	ldrb	r3, [r7, #6]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d112      	bne.n	8002e40 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e1e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002e24:	2301      	movs	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <BSP_PB_Init+0xa4>)
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	f107 020c 	add.w	r2, r7, #12
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fa2a 	bl	8004294 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002e40:	79bb      	ldrb	r3, [r7, #6]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d11e      	bne.n	8002e84 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e4a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <BSP_PB_Init+0xa8>)
 8002e56:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <BSP_PB_Init+0xa4>)
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	f107 020c 	add.w	r2, r7, #12
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fa14 	bl	8004294 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002e6c:	2328      	movs	r3, #40	; 0x28
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	2200      	movs	r2, #0
 8002e72:	210f      	movs	r1, #15
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 f9d6 	bl	8004226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002e7a:	2328      	movs	r3, #40	; 0x28
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f9ed 	bl	800425e <HAL_NVIC_EnableIRQ>
  }
}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	2000003c 	.word	0x2000003c
 8002e94:	10110000 	.word	0x10110000

08002e98 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002eb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ebc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ebe:	2312      	movs	r3, #18
 8002ec0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	481b      	ldr	r0, [pc, #108]	; (8002f44 <I2Cx_MspInit+0xac>)
 8002ed6:	f001 f9dd 	bl	8004294 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4818      	ldr	r0, [pc, #96]	; (8002f44 <I2Cx_MspInit+0xac>)
 8002ee2:	f001 f9d7 	bl	8004294 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f08:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <I2Cx_MspInit+0xa8>)
 8002f10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f14:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	210f      	movs	r1, #15
 8002f1a:	2021      	movs	r0, #33	; 0x21
 8002f1c:	f001 f983 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f20:	2021      	movs	r0, #33	; 0x21
 8002f22:	f001 f99c 	bl	800425e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	210f      	movs	r1, #15
 8002f2a:	2022      	movs	r0, #34	; 0x22
 8002f2c:	f001 f97b 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002f30:	2022      	movs	r0, #34	; 0x22
 8002f32:	f001 f994 	bl	800425e <HAL_NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	48000400 	.word	0x48000400

08002f48 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <I2Cx_Init+0x54>)
 8002f54:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <I2Cx_Init+0x58>)
 8002f5a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff89 	bl	8002e98 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f001 fc6c 	bl	8004864 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f002 f970 	bl	8005274 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40005800 	.word	0x40005800
 8002fa0:	00702681 	.word	0x00702681

08002fa4 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	72fb      	strb	r3, [r7, #11]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	b299      	uxth	r1, r3
 8002fc6:	88f8      	ldrh	r0, [r7, #6]
 8002fc8:	893a      	ldrh	r2, [r7, #8]
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f001 fe14 	bl	8004c08 <HAL_I2C_Mem_Read>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	4619      	mov	r1, r3
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f832 	bl	8003058 <I2Cx_Error>
  }
  return status;
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	; 0x28
 8003002:	af04      	add	r7, sp, #16
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	4608      	mov	r0, r1
 8003008:	4611      	mov	r1, r2
 800300a:	461a      	mov	r2, r3
 800300c:	4603      	mov	r3, r0
 800300e:	72fb      	strb	r3, [r7, #11]
 8003010:	460b      	mov	r3, r1
 8003012:	813b      	strh	r3, [r7, #8]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	b299      	uxth	r1, r3
 8003020:	88f8      	ldrh	r0, [r7, #6]
 8003022:	893a      	ldrh	r2, [r7, #8]
 8003024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4603      	mov	r3, r0
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f001 fcd3 	bl	80049e0 <HAL_I2C_Mem_Write>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f805 	bl	8003058 <I2Cx_Error>
  }
  return status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f001 fc8c 	bl	8004982 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff6c 	bl	8002f48 <I2Cx_Init>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <SENSOR_IO_Init+0x10>)
 800307e:	f7ff ff63 	bl	8002f48 <I2Cx_Init>
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000390 	.word	0x20000390

0800308c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af02      	add	r7, sp, #8
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	460b      	mov	r3, r1
 8003098:	71bb      	strb	r3, [r7, #6]
 800309a:	4613      	mov	r3, r2
 800309c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800309e:	79bb      	ldrb	r3, [r7, #6]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	79f9      	ldrb	r1, [r7, #7]
 80030a4:	2301      	movs	r3, #1
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	1d7b      	adds	r3, r7, #5
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	4803      	ldr	r0, [pc, #12]	; (80030bc <SENSOR_IO_Write+0x30>)
 80030b0:	f7ff ffa5 	bl	8002ffe <I2Cx_WriteMultiple>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000390 	.word	0x20000390

080030c0 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	4603      	mov	r3, r0
 80030c8:	460a      	mov	r2, r1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	79f9      	ldrb	r1, [r7, #7]
 80030da:	2301      	movs	r3, #1
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	f107 030f 	add.w	r3, r7, #15
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2301      	movs	r3, #1
 80030e6:	4804      	ldr	r0, [pc, #16]	; (80030f8 <SENSOR_IO_Read+0x38>)
 80030e8:	f7ff ff5c 	bl	8002fa4 <I2Cx_ReadMultiple>

  return read_value;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000390 	.word	0x20000390

080030fc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af02      	add	r7, sp, #8
 8003102:	603a      	str	r2, [r7, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	460b      	mov	r3, r1
 800310c:	71bb      	strb	r3, [r7, #6]
 800310e:	4613      	mov	r3, r2
 8003110:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003112:	79bb      	ldrb	r3, [r7, #6]
 8003114:	b29a      	uxth	r2, r3
 8003116:	79f9      	ldrb	r1, [r7, #7]
 8003118:	88bb      	ldrh	r3, [r7, #4]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <SENSOR_IO_ReadMultiple+0x38>)
 8003124:	f7ff ff3e 	bl	8002fa4 <I2Cx_ReadMultiple>
 8003128:	4603      	mov	r3, r0
 800312a:	b29b      	uxth	r3, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000390 	.word	0x20000390

08003138 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003142:	2300      	movs	r3, #0
 8003144:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <BSP_ACCELERO_Init+0x74>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4798      	blx	r3
 800314c:	4603      	mov	r3, r0
 800314e:	2b6a      	cmp	r3, #106	; 0x6a
 8003150:	d002      	beq.n	8003158 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	e024      	b.n	80031a2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003158:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <BSP_ACCELERO_Init+0x78>)
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <BSP_ACCELERO_Init+0x74>)
 800315c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800315e:	2330      	movs	r3, #48	; 0x30
 8003160:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003166:	2300      	movs	r3, #0
 8003168:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003176:	797a      	ldrb	r2, [r7, #5]
 8003178:	7abb      	ldrb	r3, [r7, #10]
 800317a:	4313      	orrs	r3, r2
 800317c:	b2db      	uxtb	r3, r3
 800317e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003180:	7a3b      	ldrb	r3, [r7, #8]
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	b2db      	uxtb	r3, r3
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	b21a      	sxth	r2, r3
 800318c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	b21b      	sxth	r3, r3
 8003194:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <BSP_ACCELERO_Init+0x78>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	89ba      	ldrh	r2, [r7, #12]
 800319e:	4610      	mov	r0, r2
 80031a0:	4798      	blx	r3
  }  

  return ret;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000009c 	.word	0x2000009c
 80031b0:	200003dc 	.word	0x200003dc

080031b4 <BSP_ACCELERO_DeInit>:
/**
  * @brief  DeInitialize the ACCELERO.
  * @retval None.
  */
void BSP_ACCELERO_DeInit(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* DeInitialize the accelerometer IO interfaces */
  if(AccelerometerDrv != NULL)
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <BSP_ACCELERO_DeInit+0x24>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <BSP_ACCELERO_DeInit+0x1e>
  {
    if(AccelerometerDrv->DeInit != NULL)
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <BSP_ACCELERO_DeInit+0x24>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <BSP_ACCELERO_DeInit+0x1e>
    {
      AccelerometerDrv->DeInit();
 80031ca:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <BSP_ACCELERO_DeInit+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4798      	blx	r3
    }
  }
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200003dc 	.word	0x200003dc

080031dc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200003dc 	.word	0x200003dc

0800320c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003216:	2300      	movs	r3, #0
 8003218:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <BSP_GYRO_Init+0x7c>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4798      	blx	r3
 8003220:	4603      	mov	r3, r0
 8003222:	2b6a      	cmp	r3, #106	; 0x6a
 8003224:	d002      	beq.n	800322c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e028      	b.n	800327e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <BSP_GYRO_Init+0x80>)
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <BSP_GYRO_Init+0x7c>)
 8003230:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003236:	2330      	movs	r3, #48	; 0x30
 8003238:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800324a:	230c      	movs	r3, #12
 800324c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800324e:	7aba      	ldrb	r2, [r7, #10]
 8003250:	797b      	ldrb	r3, [r7, #5]
 8003252:	4313      	orrs	r3, r2
 8003254:	b2db      	uxtb	r3, r3
 8003256:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003258:	7a3b      	ldrb	r3, [r7, #8]
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	b2db      	uxtb	r3, r3
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	b21a      	sxth	r2, r3
 8003264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	b21b      	sxth	r3, r3
 800326c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <BSP_GYRO_Init+0x80>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	89ba      	ldrh	r2, [r7, #12]
 8003276:	4610      	mov	r0, r2
 8003278:	4798      	blx	r3
    
    ret = GYRO_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200000d0 	.word	0x200000d0
 800328c:	200003e0 	.word	0x200003e0

08003290 <BSP_GYRO_DeInit>:

/**
  * @brief  DeInitialize Gyroscope.
  */
void BSP_GYRO_DeInit(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* DeInitialize the Gyroscope IO interfaces */
  if(GyroscopeDrv != NULL)
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <BSP_GYRO_DeInit+0x24>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <BSP_GYRO_DeInit+0x1e>
  {
    if(GyroscopeDrv->DeInit!= NULL)
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <BSP_GYRO_DeInit+0x24>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <BSP_GYRO_DeInit+0x1e>
    {
      GyroscopeDrv->DeInit();
 80032a6:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <BSP_GYRO_DeInit+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4798      	blx	r3
    }
  }
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200003e0 	.word	0x200003e0

080032b8 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <BSP_GYRO_GetXYZ+0x2c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <BSP_GYRO_GetXYZ+0x2c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <BSP_GYRO_GetXYZ+0x2c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200003e0 	.word	0x200003e0

080032e8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <BSP_HSENSOR_Init+0x38>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	20be      	movs	r0, #190	; 0xbe
 80032f4:	4798      	blx	r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	2bbc      	cmp	r3, #188	; 0xbc
 80032fa:	d002      	beq.n	8003302 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	e009      	b.n	8003316 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <BSP_HSENSOR_Init+0x3c>)
 8003304:	4a06      	ldr	r2, [pc, #24]	; (8003320 <BSP_HSENSOR_Init+0x38>)
 8003306:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <BSP_HSENSOR_Init+0x3c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	20be      	movs	r0, #190	; 0xbe
 8003310:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003316:	687b      	ldr	r3, [r7, #4]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000040 	.word	0x20000040
 8003324:	200003e4 	.word	0x200003e4

08003328 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <BSP_HSENSOR_ReadHumidity+0x18>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	20be      	movs	r0, #190	; 0xbe
 8003334:	4798      	blx	r3
 8003336:	eef0 7a40 	vmov.f32	s15, s0
}
 800333a:	eeb0 0a67 	vmov.f32	s0, s15
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200003e4 	.word	0x200003e4

08003344 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <BSP_MAGNETO_Init+0x50>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4798      	blx	r3
 8003354:	4603      	mov	r3, r0
 8003356:	2b3d      	cmp	r3, #61	; 0x3d
 8003358:	d002      	beq.n	8003360 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	e013      	b.n	8003388 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <BSP_MAGNETO_Init+0x54>)
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <BSP_MAGNETO_Init+0x50>)
 8003364:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003366:	2358      	movs	r3, #88	; 0x58
 8003368:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800336a:	2300      	movs	r3, #0
 800336c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800336e:	2300      	movs	r3, #0
 8003370:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003372:	2308      	movs	r3, #8
 8003374:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <BSP_MAGNETO_Init+0x54>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	463a      	mov	r2, r7
 8003382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003386:	4798      	blx	r3
  } 

  return ret;  
 8003388:	79fb      	ldrb	r3, [r7, #7]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000005c 	.word	0x2000005c
 8003398:	200003e8 	.word	0x200003e8

0800339c <BSP_MAGNETO_DeInit>:

/**
  * @brief  DeInitialize the MAGNETO.
  */
void BSP_MAGNETO_DeInit(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* DeInitialize the  magnetometer IO interfaces */
  if(MagnetoDrv != NULL)
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <BSP_MAGNETO_DeInit+0x24>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <BSP_MAGNETO_DeInit+0x1e>
  {
    if(MagnetoDrv->DeInit != NULL)
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <BSP_MAGNETO_DeInit+0x24>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <BSP_MAGNETO_DeInit+0x1e>
    {
      MagnetoDrv->DeInit();
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <BSP_MAGNETO_DeInit+0x24>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4798      	blx	r3
    }
  }
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200003e8 	.word	0x200003e8

080033c4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <BSP_MAGNETO_GetXYZ+0x2c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <BSP_MAGNETO_GetXYZ+0x2c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <BSP_MAGNETO_GetXYZ+0x2c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200003e8 	.word	0x200003e8

080033f4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <BSP_PSENSOR_Init+0x38>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	20ba      	movs	r0, #186	; 0xba
 8003400:	4798      	blx	r3
 8003402:	4603      	mov	r3, r0
 8003404:	2bb1      	cmp	r3, #177	; 0xb1
 8003406:	d002      	beq.n	800340e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	e009      	b.n	8003422 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <BSP_PSENSOR_Init+0x3c>)
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <BSP_PSENSOR_Init+0x38>)
 8003412:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <BSP_PSENSOR_Init+0x3c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	20ba      	movs	r0, #186	; 0xba
 800341c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003422:	687b      	ldr	r3, [r7, #4]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000090 	.word	0x20000090
 8003430:	200003ec 	.word	0x200003ec

08003434 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <BSP_PSENSOR_ReadPressure+0x18>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	20ba      	movs	r0, #186	; 0xba
 8003440:	4798      	blx	r3
 8003442:	eef0 7a40 	vmov.f32	s15, s0
}
 8003446:	eeb0 0a67 	vmov.f32	s0, s15
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200003ec 	.word	0x200003ec

08003450 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <BSP_TSENSOR_Init+0x30>)
 800345c:	4a09      	ldr	r2, [pc, #36]	; (8003484 <BSP_TSENSOR_Init+0x34>)
 800345e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003460:	f7ff fe0a 	bl	8003078 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <BSP_TSENSOR_Init+0x30>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2100      	movs	r1, #0
 800346c:	20be      	movs	r0, #190	; 0xbe
 800346e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003474:	79fb      	ldrb	r3, [r7, #7]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200003f0 	.word	0x200003f0
 8003484:	2000004c 	.word	0x2000004c

08003488 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <BSP_TSENSOR_ReadTemp+0x18>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	20be      	movs	r0, #190	; 0xbe
 8003494:	4798      	blx	r3
 8003496:	eef0 7a40 	vmov.f32	s15, s0
}
 800349a:	eeb0 0a67 	vmov.f32	s0, s15
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	200003f0 	.word	0x200003f0

080034a4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2120      	movs	r1, #32
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fe03 	bl	80030c0 <SENSOR_IO_Read>
 80034ba:	4603      	mov	r3, r0
 80034bc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	f023 0303 	bic.w	r3, r3, #3
 80034d4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034e4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	2120      	movs	r1, #32
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fdcc 	bl	800308c <SENSOR_IO_Write>
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800350a:	f7ff fdb5 	bl	8003078 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	210f      	movs	r1, #15
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fdd3 	bl	80030c0 <SENSOR_IO_Read>
 800351a:	4603      	mov	r3, r0
 800351c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	b2d8      	uxtb	r0, r3
 8003536:	f107 020c 	add.w	r2, r7, #12
 800353a:	2302      	movs	r3, #2
 800353c:	21b0      	movs	r1, #176	; 0xb0
 800353e:	f7ff fddd 	bl	80030fc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003542:	7b3b      	ldrb	r3, [r7, #12]
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800354a:	7b7b      	ldrb	r3, [r7, #13]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	b2d8      	uxtb	r0, r3
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	2302      	movs	r3, #2
 800355c:	21b6      	movs	r1, #182	; 0xb6
 800355e:	f7ff fdcd 	bl	80030fc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003562:	7b7b      	ldrb	r3, [r7, #13]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	b21a      	sxth	r2, r3
 8003568:	7b3b      	ldrb	r3, [r7, #12]
 800356a:	b21b      	sxth	r3, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	b2d8      	uxtb	r0, r3
 8003574:	f107 020c 	add.w	r2, r7, #12
 8003578:	2302      	movs	r3, #2
 800357a:	21ba      	movs	r1, #186	; 0xba
 800357c:	f7ff fdbe 	bl	80030fc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003580:	7b7b      	ldrb	r3, [r7, #13]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	b21a      	sxth	r2, r3
 8003586:	7b3b      	ldrb	r3, [r7, #12]
 8003588:	b21b      	sxth	r3, r3
 800358a:	4313      	orrs	r3, r2
 800358c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	b2d8      	uxtb	r0, r3
 8003592:	f107 020c 	add.w	r2, r7, #12
 8003596:	2302      	movs	r3, #2
 8003598:	21a8      	movs	r1, #168	; 0xa8
 800359a:	f7ff fdaf 	bl	80030fc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800359e:	7b7b      	ldrb	r3, [r7, #13]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	7b3b      	ldrb	r3, [r7, #12]
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80035ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035be:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80035c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035d4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80035d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fa:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80035fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003602:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800360a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800360e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003612:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003658 <HTS221_H_ReadHumidity+0x130>
 8003616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	dd01      	ble.n	8003624 <HTS221_H_ReadHumidity+0xfc>
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HTS221_H_ReadHumidity+0x134>)
 8003622:	e00a      	b.n	800363a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003624:	edd7 7a04 	vldr	s15, [r7, #16]
 8003628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	d502      	bpl.n	8003638 <HTS221_H_ReadHumidity+0x110>
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e000      	b.n	800363a <HTS221_H_ReadHumidity+0x112>
 8003638:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800363a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800363c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003640:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003644:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003648:	eef0 7a66 	vmov.f32	s15, s13
}
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	447a0000 	.word	0x447a0000
 800365c:	447a0000 	.word	0x447a0000

08003660 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2120      	movs	r1, #32
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fd24 	bl	80030c0 <SENSOR_IO_Read>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	f023 0304 	bic.w	r3, r3, #4
 8003682:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	f023 0303 	bic.w	r3, r3, #3
 8003692:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	2120      	movs	r1, #32
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fced 	bl	800308c <SENSOR_IO_Write>
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b088      	sub	sp, #32
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	b2d8      	uxtb	r0, r3
 80036c8:	f107 0208 	add.w	r2, r7, #8
 80036cc:	2302      	movs	r3, #2
 80036ce:	21b2      	movs	r1, #178	; 0xb2
 80036d0:	f7ff fd14 	bl	80030fc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2135      	movs	r1, #53	; 0x35
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fcf0 	bl	80030c0 <SENSOR_IO_Read>
 80036e0:	4603      	mov	r3, r0
 80036e2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	7a3b      	ldrb	r3, [r7, #8]
 80036f2:	b21b      	sxth	r3, r3
 80036f4:	4313      	orrs	r3, r2
 80036f6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80036f8:	7ffb      	ldrb	r3, [r7, #31]
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	b21a      	sxth	r2, r3
 8003704:	7a7b      	ldrb	r3, [r7, #9]
 8003706:	b21b      	sxth	r3, r3
 8003708:	4313      	orrs	r3, r2
 800370a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800370c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003710:	10db      	asrs	r3, r3, #3
 8003712:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003714:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003718:	10db      	asrs	r3, r3, #3
 800371a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	b2d8      	uxtb	r0, r3
 8003720:	f107 0208 	add.w	r2, r7, #8
 8003724:	2304      	movs	r3, #4
 8003726:	21bc      	movs	r1, #188	; 0xbc
 8003728:	f7ff fce8 	bl	80030fc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800372c:	7a7b      	ldrb	r3, [r7, #9]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	b21a      	sxth	r2, r3
 8003732:	7a3b      	ldrb	r3, [r7, #8]
 8003734:	b21b      	sxth	r3, r3
 8003736:	4313      	orrs	r3, r2
 8003738:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	b21a      	sxth	r2, r3
 8003740:	7abb      	ldrb	r3, [r7, #10]
 8003742:	b21b      	sxth	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	b2d8      	uxtb	r0, r3
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	2302      	movs	r3, #2
 8003752:	21aa      	movs	r1, #170	; 0xaa
 8003754:	f7ff fcd2 	bl	80030fc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003758:	7a7b      	ldrb	r3, [r7, #9]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	b21a      	sxth	r2, r3
 800375e:	7a3b      	ldrb	r3, [r7, #8]
 8003760:	b21b      	sxth	r3, r3
 8003762:	4313      	orrs	r3, r2
 8003764:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003766:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800376a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003778:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800377c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800378e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003792:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	ee07 3a90 	vmov	s15, r3
}
 80037be:	eeb0 0a67 	vmov.f32	s0, s15
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	463b      	mov	r3, r7
 80037d0:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80037d4:	783b      	ldrb	r3, [r7, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	2120      	movs	r1, #32
 80037da:	203c      	movs	r0, #60	; 0x3c
 80037dc:	f7ff fc56 	bl	800308c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	461a      	mov	r2, r3
 80037e4:	2121      	movs	r1, #33	; 0x21
 80037e6:	203c      	movs	r0, #60	; 0x3c
 80037e8:	f7ff fc50 	bl	800308c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80037ec:	78bb      	ldrb	r3, [r7, #2]
 80037ee:	461a      	mov	r2, r3
 80037f0:	2122      	movs	r1, #34	; 0x22
 80037f2:	203c      	movs	r0, #60	; 0x3c
 80037f4:	f7ff fc4a 	bl	800308c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	461a      	mov	r2, r3
 80037fc:	2123      	movs	r1, #35	; 0x23
 80037fe:	203c      	movs	r0, #60	; 0x3c
 8003800:	f7ff fc44 	bl	800308c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003804:	793b      	ldrb	r3, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	2124      	movs	r1, #36	; 0x24
 800380a:	203c      	movs	r0, #60	; 0x3c
 800380c:	f7ff fc3e 	bl	800308c <SENSOR_IO_Write>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003822:	2122      	movs	r1, #34	; 0x22
 8003824:	203c      	movs	r0, #60	; 0x3c
 8003826:	f7ff fc4b 	bl	80030c0 <SENSOR_IO_Read>
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f023 0303 	bic.w	r3, r3, #3
 8003834:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f043 0303 	orr.w	r3, r3, #3
 800383c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	461a      	mov	r2, r3
 8003842:	2122      	movs	r1, #34	; 0x22
 8003844:	203c      	movs	r0, #60	; 0x3c
 8003846:	f7ff fc21 	bl	800308c <SENSOR_IO_Write>
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003856:	f7ff fc0f 	bl	8003078 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800385a:	210f      	movs	r1, #15
 800385c:	203c      	movs	r0, #60	; 0x3c
 800385e:	f7ff fc2f 	bl	80030c0 <SENSOR_IO_Read>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}

08003868 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003876:	2122      	movs	r1, #34	; 0x22
 8003878:	203c      	movs	r0, #60	; 0x3c
 800387a:	f7ff fc21 	bl	80030c0 <SENSOR_IO_Read>
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	f023 0320 	bic.w	r3, r3, #32
 8003888:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	461a      	mov	r2, r3
 800389c:	2122      	movs	r1, #34	; 0x22
 800389e:	203c      	movs	r0, #60	; 0x3c
 80038a0:	f7ff fbf4 	bl	800308c <SENSOR_IO_Write>
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80038c2:	2121      	movs	r1, #33	; 0x21
 80038c4:	203c      	movs	r0, #60	; 0x3c
 80038c6:	f7ff fbfb 	bl	80030c0 <SENSOR_IO_Read>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80038ce:	f107 0208 	add.w	r2, r7, #8
 80038d2:	2306      	movs	r3, #6
 80038d4:	21a8      	movs	r1, #168	; 0xa8
 80038d6:	203c      	movs	r0, #60	; 0x3c
 80038d8:	f7ff fc10 	bl	80030fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e01c      	b.n	800391c <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	3301      	adds	r3, #1
 80038e8:	3320      	adds	r3, #32
 80038ea:	443b      	add	r3, r7
 80038ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	7ffb      	ldrb	r3, [r7, #31]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	3320      	adds	r3, #32
 80038fc:	443b      	add	r3, r7
 80038fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4413      	add	r3, r2
 8003906:	b29a      	uxth	r2, r3
 8003908:	7ffb      	ldrb	r3, [r7, #31]
 800390a:	b212      	sxth	r2, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	3320      	adds	r3, #32
 8003910:	443b      	add	r3, r7
 8003912:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003916:	7ffb      	ldrb	r3, [r7, #31]
 8003918:	3301      	adds	r3, #1
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	7ffb      	ldrb	r3, [r7, #31]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d9df      	bls.n	80038e2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003928:	2b60      	cmp	r3, #96	; 0x60
 800392a:	d013      	beq.n	8003954 <LIS3MDL_MagReadXYZ+0xa8>
 800392c:	2b60      	cmp	r3, #96	; 0x60
 800392e:	dc14      	bgt.n	800395a <LIS3MDL_MagReadXYZ+0xae>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d00c      	beq.n	800394e <LIS3MDL_MagReadXYZ+0xa2>
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	dc10      	bgt.n	800395a <LIS3MDL_MagReadXYZ+0xae>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <LIS3MDL_MagReadXYZ+0x96>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d003      	beq.n	8003948 <LIS3MDL_MagReadXYZ+0x9c>
 8003940:	e00b      	b.n	800395a <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <LIS3MDL_MagReadXYZ+0xfc>)
 8003944:	61bb      	str	r3, [r7, #24]
    break;
 8003946:	e008      	b.n	800395a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <LIS3MDL_MagReadXYZ+0x100>)
 800394a:	61bb      	str	r3, [r7, #24]
    break;
 800394c:	e005      	b.n	800395a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <LIS3MDL_MagReadXYZ+0x104>)
 8003950:	61bb      	str	r3, [r7, #24]
    break;
 8003952:	e002      	b.n	800395a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <LIS3MDL_MagReadXYZ+0x108>)
 8003956:	61bb      	str	r3, [r7, #24]
    break;    
 8003958:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e01a      	b.n	8003996 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003960:	7ffb      	ldrb	r3, [r7, #31]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	3320      	adds	r3, #32
 8003966:	443b      	add	r3, r7
 8003968:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003974:	edd7 7a06 	vldr	s15, [r7, #24]
 8003978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397c:	7ffb      	ldrb	r3, [r7, #31]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003988:	ee17 2a90 	vmov	r2, s15
 800398c:	b212      	sxth	r2, r2
 800398e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003990:	7ffb      	ldrb	r3, [r7, #31]
 8003992:	3301      	adds	r3, #1
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	7ffb      	ldrb	r3, [r7, #31]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d9e1      	bls.n	8003960 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	3e0f5c29 	.word	0x3e0f5c29
 80039ac:	3e947ae1 	.word	0x3e947ae1
 80039b0:	3edc28f6 	.word	0x3edc28f6
 80039b4:	3f147ae1 	.word	0x3f147ae1

080039b8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f879 	bl	8003abc <LPS22HB_Init>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80039e0:	f7ff fb4a 	bl	8003078 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	210f      	movs	r1, #15
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fb68 	bl	80030c0 <SENSOR_IO_Read>
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	74fb      	strb	r3, [r7, #19]
 8003a12:	e013      	b.n	8003a3c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	3328      	adds	r3, #40	; 0x28
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	7cfc      	ldrb	r4, [r7, #19]
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7ff fb4c 	bl	80030c0 <SENSOR_IO_Read>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f104 0318 	add.w	r3, r4, #24
 8003a30:	443b      	add	r3, r7
 8003a32:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	74fb      	strb	r3, [r7, #19]
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d9e8      	bls.n	8003a14 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	74fb      	strb	r3, [r7, #19]
 8003a46:	e00f      	b.n	8003a68 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	443b      	add	r3, r7
 8003a4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a52:	461a      	mov	r2, r3
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	3301      	adds	r3, #1
 8003a66:	74fb      	strb	r3, [r7, #19]
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d9ec      	bls.n	8003a48 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2264      	movs	r2, #100	; 0x64
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da01      	bge.n	8003a94 <LPS22HB_P_ReadPressure+0x94>
 8003a90:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003a94:	131b      	asrs	r3, r3, #12
 8003a96:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ab8 <LPS22HB_P_ReadPressure+0xb8>
 8003aa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003aaa:	eef0 7a66 	vmov.f32	s15, s13
}
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}
 8003ab8:	42c80000 	.word	0x42c80000

08003abc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	211a      	movs	r1, #26
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff faf7 	bl	80030c0 <SENSOR_IO_Read>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	211a      	movs	r1, #26
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff facc 	bl	800308c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2110      	movs	r1, #16
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fae0 	bl	80030c0 <SENSOR_IO_Read>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003b12:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	f023 0302 	bic.w	r3, r3, #2
 8003b1a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	2110      	movs	r1, #16
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff faad 	bl	800308c <SENSOR_IO_Write>
}  
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003b48:	2110      	movs	r1, #16
 8003b4a:	20d4      	movs	r0, #212	; 0xd4
 8003b4c:	f7ff fab8 	bl	80030c0 <SENSOR_IO_Read>
 8003b50:	4603      	mov	r3, r0
 8003b52:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003b60:	7bba      	ldrb	r2, [r7, #14]
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003b68:	7bbb      	ldrb	r3, [r7, #14]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2110      	movs	r1, #16
 8003b6e:	20d4      	movs	r0, #212	; 0xd4
 8003b70:	f7ff fa8c 	bl	800308c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003b74:	2112      	movs	r1, #18
 8003b76:	20d4      	movs	r0, #212	; 0xd4
 8003b78:	f7ff faa2 	bl	80030c0 <SENSOR_IO_Read>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003b8e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003b90:	7bba      	ldrb	r2, [r7, #14]
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003b98:	7bbb      	ldrb	r3, [r7, #14]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2112      	movs	r1, #18
 8003b9e:	20d4      	movs	r0, #212	; 0xd4
 8003ba0:	f7ff fa74 	bl	800308c <SENSOR_IO_Write>
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	20d4      	movs	r0, #212	; 0xd4
 8003bba:	f7ff fa81 	bl	80030c0 <SENSOR_IO_Read>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2110      	movs	r1, #16
 8003bd0:	20d4      	movs	r0, #212	; 0xd4
 8003bd2:	f7ff fa5b 	bl	800308c <SENSOR_IO_Write>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003be2:	f7ff fa49 	bl	8003078 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003be6:	210f      	movs	r1, #15
 8003be8:	20d4      	movs	r0, #212	; 0xd4
 8003bea:	f7ff fa69 	bl	80030c0 <SENSOR_IO_Read>
 8003bee:	4603      	mov	r3, r0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003c02:	2115      	movs	r1, #21
 8003c04:	20d4      	movs	r0, #212	; 0xd4
 8003c06:	f7ff fa5b 	bl	80030c0 <SENSOR_IO_Read>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	f023 0310 	bic.w	r3, r3, #16
 8003c14:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	f043 0310 	orr.w	r3, r3, #16
 8003c22:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	461a      	mov	r2, r3
 8003c28:	2115      	movs	r1, #21
 8003c2a:	20d4      	movs	r0, #212	; 0xd4
 8003c2c:	f7ff fa2e 	bl	800308c <SENSOR_IO_Write>
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003c4e:	2110      	movs	r1, #16
 8003c50:	20d4      	movs	r0, #212	; 0xd4
 8003c52:	f7ff fa35 	bl	80030c0 <SENSOR_IO_Read>
 8003c56:	4603      	mov	r3, r0
 8003c58:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003c5a:	f107 0208 	add.w	r2, r7, #8
 8003c5e:	2306      	movs	r3, #6
 8003c60:	2128      	movs	r1, #40	; 0x28
 8003c62:	20d4      	movs	r0, #212	; 0xd4
 8003c64:	f7ff fa4a 	bl	80030fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e01c      	b.n	8003ca8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c6e:	7ffb      	ldrb	r3, [r7, #31]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	3301      	adds	r3, #1
 8003c74:	3320      	adds	r3, #32
 8003c76:	443b      	add	r3, r7
 8003c78:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	3320      	adds	r3, #32
 8003c88:	443b      	add	r3, r7
 8003c8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	7ffb      	ldrb	r3, [r7, #31]
 8003c96:	b212      	sxth	r2, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	443b      	add	r3, r7
 8003c9e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	7ffb      	ldrb	r3, [r7, #31]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d9df      	bls.n	8003c6e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d829      	bhi.n	8003d0c <LSM6DSL_AccReadXYZ+0xd4>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <LSM6DSL_AccReadXYZ+0x88>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d0d 	.word	0x08003d0d
 8003cc8:	08003d0d 	.word	0x08003d0d
 8003ccc:	08003d0d 	.word	0x08003d0d
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003d0d 	.word	0x08003d0d
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003d0d 	.word	0x08003d0d
 8003ce0:	08003cfb 	.word	0x08003cfb
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d0d 	.word	0x08003d0d
 8003cf0:	08003d01 	.word	0x08003d01
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <LSM6DSL_AccReadXYZ+0x120>)
 8003cf6:	61bb      	str	r3, [r7, #24]
    break;
 8003cf8:	e008      	b.n	8003d0c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <LSM6DSL_AccReadXYZ+0x124>)
 8003cfc:	61bb      	str	r3, [r7, #24]
    break;
 8003cfe:	e005      	b.n	8003d0c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <LSM6DSL_AccReadXYZ+0x128>)
 8003d02:	61bb      	str	r3, [r7, #24]
    break;
 8003d04:	e002      	b.n	8003d0c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <LSM6DSL_AccReadXYZ+0x12c>)
 8003d08:	61bb      	str	r3, [r7, #24]
    break;    
 8003d0a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e01a      	b.n	8003d48 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	3320      	adds	r3, #32
 8003d18:	443b      	add	r3, r7
 8003d1a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	7ffb      	ldrb	r3, [r7, #31]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d3a:	ee17 2a90 	vmov	r2, s15
 8003d3e:	b212      	sxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	3301      	adds	r3, #1
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	7ffb      	ldrb	r3, [r7, #31]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d9e1      	bls.n	8003d12 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	3d79db23 	.word	0x3d79db23
 8003d5c:	3df9db23 	.word	0x3df9db23
 8003d60:	3e79db23 	.word	0x3e79db23
 8003d64:	3ef9db23 	.word	0x3ef9db23

08003d68 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003d76:	2111      	movs	r1, #17
 8003d78:	20d4      	movs	r0, #212	; 0xd4
 8003d7a:	f7ff f9a1 	bl	80030c0 <SENSOR_IO_Read>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003d86:	7bbb      	ldrb	r3, [r7, #14]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003d8e:	7bba      	ldrb	r2, [r7, #14]
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003d96:	7bbb      	ldrb	r3, [r7, #14]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2111      	movs	r1, #17
 8003d9c:	20d4      	movs	r0, #212	; 0xd4
 8003d9e:	f7ff f975 	bl	800308c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003da2:	2112      	movs	r1, #18
 8003da4:	20d4      	movs	r0, #212	; 0xd4
 8003da6:	f7ff f98b 	bl	80030c0 <SENSOR_IO_Read>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003db6:	7bbb      	ldrb	r3, [r7, #14]
 8003db8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003dbc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003dbe:	7bba      	ldrb	r2, [r7, #14]
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2112      	movs	r1, #18
 8003dcc:	20d4      	movs	r0, #212	; 0xd4
 8003dce:	f7ff f95d 	bl	800308c <SENSOR_IO_Write>
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003de0:	2300      	movs	r3, #0
 8003de2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003de4:	2111      	movs	r1, #17
 8003de6:	20d4      	movs	r0, #212	; 0xd4
 8003de8:	f7ff f96a 	bl	80030c0 <SENSOR_IO_Read>
 8003dec:	4603      	mov	r3, r0
 8003dee:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2111      	movs	r1, #17
 8003dfe:	20d4      	movs	r0, #212	; 0xd4
 8003e00:	f7ff f944 	bl	800308c <SENSOR_IO_Write>
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003e10:	f7ff f932 	bl	8003078 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003e14:	210f      	movs	r1, #15
 8003e16:	20d4      	movs	r0, #212	; 0xd4
 8003e18:	f7ff f952 	bl	80030c0 <SENSOR_IO_Read>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003e30:	2116      	movs	r1, #22
 8003e32:	20d4      	movs	r0, #212	; 0xd4
 8003e34:	f7ff f944 	bl	80030c0 <SENSOR_IO_Read>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e42:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e50:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	461a      	mov	r2, r3
 8003e56:	2116      	movs	r1, #22
 8003e58:	20d4      	movs	r0, #212	; 0xd4
 8003e5a:	f7ff f917 	bl	800308c <SENSOR_IO_Write>
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003e7e:	2111      	movs	r1, #17
 8003e80:	20d4      	movs	r0, #212	; 0xd4
 8003e82:	f7ff f91d 	bl	80030c0 <SENSOR_IO_Read>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003e8a:	f107 0208 	add.w	r2, r7, #8
 8003e8e:	2306      	movs	r3, #6
 8003e90:	2122      	movs	r1, #34	; 0x22
 8003e92:	20d4      	movs	r0, #212	; 0xd4
 8003e94:	f7ff f932 	bl	80030fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e01c      	b.n	8003ed8 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	443b      	add	r3, r7
 8003ea8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	3320      	adds	r3, #32
 8003eb8:	443b      	add	r3, r7
 8003eba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	7ffb      	ldrb	r3, [r7, #31]
 8003ec6:	b212      	sxth	r2, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	3320      	adds	r3, #32
 8003ecc:	443b      	add	r3, r7
 8003ece:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d9df      	bls.n	8003e9e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	d829      	bhi.n	8003f3c <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f3d 	.word	0x08003f3d
 8003ef8:	08003f3d 	.word	0x08003f3d
 8003efc:	08003f3d 	.word	0x08003f3d
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f3d 	.word	0x08003f3d
 8003f08:	08003f3d 	.word	0x08003f3d
 8003f0c:	08003f3d 	.word	0x08003f3d
 8003f10:	08003f31 	.word	0x08003f31
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f3d 	.word	0x08003f3d
 8003f20:	08003f37 	.word	0x08003f37
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003f26:	61bb      	str	r3, [r7, #24]
    break;
 8003f28:	e008      	b.n	8003f3c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003f2c:	61bb      	str	r3, [r7, #24]
    break;
 8003f2e:	e005      	b.n	8003f3c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003f30:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003f32:	61bb      	str	r3, [r7, #24]
    break;
 8003f34:	e002      	b.n	8003f3c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003f38:	61bb      	str	r3, [r7, #24]
    break;    
 8003f3a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e016      	b.n	8003f70 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	3320      	adds	r3, #32
 8003f48:	443b      	add	r3, r7
 8003f4a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d9e5      	bls.n	8003f42 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	410c0000 	.word	0x410c0000
 8003f84:	418c0000 	.word	0x418c0000
 8003f88:	420c0000 	.word	0x420c0000
 8003f8c:	428c0000 	.word	0x428c0000

08003f90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f9a:	2003      	movs	r0, #3
 8003f9c:	f000 f938 	bl	8004210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f000 f80d 	bl	8003fc0 <HAL_InitTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	71fb      	strb	r3, [r7, #7]
 8003fb0:	e001      	b.n	8003fb6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fb2:	f7fe fd09 	bl	80029c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_InitTick+0x68>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003fd4:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_InitTick+0x6c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <HAL_InitTick+0x68>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f946 	bl	800427a <HAL_SYSTICK_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10f      	bne.n	8004014 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	d809      	bhi.n	800400e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004002:	f000 f910 	bl	8004226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_InitTick+0x70>)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e007      	b.n	800401e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e004      	b.n	800401e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e001      	b.n	800401e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000108 	.word	0x20000108
 800402c:	20000038 	.word	0x20000038
 8004030:	20000104 	.word	0x20000104

08004034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_IncTick+0x1c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_IncTick+0x20>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4413      	add	r3, r2
 8004042:	4a03      	ldr	r2, [pc, #12]	; (8004050 <HAL_IncTick+0x1c>)
 8004044:	6013      	str	r3, [r2, #0]
}
 8004046:	bf00      	nop
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	200003f4 	.word	0x200003f4
 8004054:	20000108 	.word	0x20000108

08004058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return uwTick;
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_GetTick+0x14>)
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	200003f4 	.word	0x200003f4

08004070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	60d3      	str	r3, [r2, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <__NVIC_GetPriorityGrouping+0x18>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f003 0307 	and.w	r3, r3, #7
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	db0b      	blt.n	80040fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	4907      	ldr	r1, [pc, #28]	; (800410c <__NVIC_EnableIRQ+0x38>)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2001      	movs	r0, #1
 80040f6:	fa00 f202 	lsl.w	r2, r0, r2
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000e100 	.word	0xe000e100

08004110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	6039      	str	r1, [r7, #0]
 800411a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004120:	2b00      	cmp	r3, #0
 8004122:	db0a      	blt.n	800413a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	490c      	ldr	r1, [pc, #48]	; (800415c <__NVIC_SetPriority+0x4c>)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	0112      	lsls	r2, r2, #4
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	440b      	add	r3, r1
 8004134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004138:	e00a      	b.n	8004150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4908      	ldr	r1, [pc, #32]	; (8004160 <__NVIC_SetPriority+0x50>)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	3b04      	subs	r3, #4
 8004148:	0112      	lsls	r2, r2, #4
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	440b      	add	r3, r1
 800414e:	761a      	strb	r2, [r3, #24]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000e100 	.word	0xe000e100
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f1c3 0307 	rsb	r3, r3, #7
 800417e:	2b04      	cmp	r3, #4
 8004180:	bf28      	it	cs
 8004182:	2304      	movcs	r3, #4
 8004184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3304      	adds	r3, #4
 800418a:	2b06      	cmp	r3, #6
 800418c:	d902      	bls.n	8004194 <NVIC_EncodePriority+0x30>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3b03      	subs	r3, #3
 8004192:	e000      	b.n	8004196 <NVIC_EncodePriority+0x32>
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	401a      	ands	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	43d9      	mvns	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041bc:	4313      	orrs	r3, r2
         );
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041dc:	d301      	bcc.n	80041e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041de:	2301      	movs	r3, #1
 80041e0:	e00f      	b.n	8004202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <SysTick_Config+0x40>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ea:	210f      	movs	r1, #15
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f0:	f7ff ff8e 	bl	8004110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <SysTick_Config+0x40>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <SysTick_Config+0x40>)
 80041fc:	2207      	movs	r2, #7
 80041fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	e000e010 	.word	0xe000e010

08004210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff29 	bl	8004070 <__NVIC_SetPriorityGrouping>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	4603      	mov	r3, r0
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004238:	f7ff ff3e 	bl	80040b8 <__NVIC_GetPriorityGrouping>
 800423c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f7ff ff8e 	bl	8004164 <NVIC_EncodePriority>
 8004248:	4602      	mov	r2, r0
 800424a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ff5d 	bl	8004110 <__NVIC_SetPriority>
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff31 	bl	80040d4 <__NVIC_EnableIRQ>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ffa2 	bl	80041cc <SysTick_Config>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a2:	e17f      	b.n	80045a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2101      	movs	r1, #1
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8171 	beq.w	800459e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d00b      	beq.n	80042dc <HAL_GPIO_Init+0x48>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d007      	beq.n	80042dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d0:	2b11      	cmp	r3, #17
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b12      	cmp	r3, #18
 80042da:	d130      	bne.n	800433e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004312:	2201      	movs	r2, #1
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 0201 	and.w	r2, r3, #1
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b03      	cmp	r3, #3
 8004348:	d118      	bne.n	800437c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004350:	2201      	movs	r2, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	08db      	lsrs	r3, r3, #3
 8004366:	f003 0201 	and.w	r2, r3, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	2203      	movs	r2, #3
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x128>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b12      	cmp	r3, #18
 80043ba:	d123      	bne.n	8004404 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	08da      	lsrs	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3208      	adds	r2, #8
 80043c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	220f      	movs	r2, #15
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	2203      	movs	r2, #3
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0203 	and.w	r2, r3, #3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80ac 	beq.w	800459e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004446:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <HAL_GPIO_Init+0x330>)
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	4a5e      	ldr	r2, [pc, #376]	; (80045c4 <HAL_GPIO_Init+0x330>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6613      	str	r3, [r2, #96]	; 0x60
 8004452:	4b5c      	ldr	r3, [pc, #368]	; (80045c4 <HAL_GPIO_Init+0x330>)
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800445e:	4a5a      	ldr	r2, [pc, #360]	; (80045c8 <HAL_GPIO_Init+0x334>)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	3302      	adds	r3, #2
 8004466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	220f      	movs	r2, #15
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004488:	d025      	beq.n	80044d6 <HAL_GPIO_Init+0x242>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4f      	ldr	r2, [pc, #316]	; (80045cc <HAL_GPIO_Init+0x338>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01f      	beq.n	80044d2 <HAL_GPIO_Init+0x23e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4e      	ldr	r2, [pc, #312]	; (80045d0 <HAL_GPIO_Init+0x33c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d019      	beq.n	80044ce <HAL_GPIO_Init+0x23a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a4d      	ldr	r2, [pc, #308]	; (80045d4 <HAL_GPIO_Init+0x340>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_GPIO_Init+0x236>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4c      	ldr	r2, [pc, #304]	; (80045d8 <HAL_GPIO_Init+0x344>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00d      	beq.n	80044c6 <HAL_GPIO_Init+0x232>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_GPIO_Init+0x348>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <HAL_GPIO_Init+0x22e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4a      	ldr	r2, [pc, #296]	; (80045e0 <HAL_GPIO_Init+0x34c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_GPIO_Init+0x22a>
 80044ba:	2306      	movs	r3, #6
 80044bc:	e00c      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044be:	2307      	movs	r3, #7
 80044c0:	e00a      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044c2:	2305      	movs	r3, #5
 80044c4:	e008      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044c6:	2304      	movs	r3, #4
 80044c8:	e006      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044ca:	2303      	movs	r3, #3
 80044cc:	e004      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e002      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_GPIO_Init+0x244>
 80044d6:	2300      	movs	r3, #0
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	f002 0203 	and.w	r2, r2, #3
 80044de:	0092      	lsls	r2, r2, #2
 80044e0:	4093      	lsls	r3, r2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044e8:	4937      	ldr	r1, [pc, #220]	; (80045c8 <HAL_GPIO_Init+0x334>)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	3302      	adds	r3, #2
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_GPIO_Init+0x350>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800451a:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <HAL_GPIO_Init+0x350>)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004520:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_GPIO_Init+0x350>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004544:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <HAL_GPIO_Init+0x350>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <HAL_GPIO_Init+0x350>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800456e:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <HAL_GPIO_Init+0x350>)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_GPIO_Init+0x350>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004598:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <HAL_GPIO_Init+0x350>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	3301      	adds	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa22 f303 	lsr.w	r3, r2, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f47f ae78 	bne.w	80042a4 <HAL_GPIO_Init+0x10>
  }
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40010000 	.word	0x40010000
 80045cc:	48000400 	.word	0x48000400
 80045d0:	48000800 	.word	0x48000800
 80045d4:	48000c00 	.word	0x48000c00
 80045d8:	48001000 	.word	0x48001000
 80045dc:	48001400 	.word	0x48001400
 80045e0:	48001800 	.word	0x48001800
 80045e4:	40010400 	.word	0x40010400

080045e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80045f6:	e0cd      	b.n	8004794 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80045f8:	2201      	movs	r2, #1
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80c0 	beq.w	800478e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800460e:	4a68      	ldr	r2, [pc, #416]	; (80047b0 <HAL_GPIO_DeInit+0x1c8>)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	3302      	adds	r3, #2
 8004616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4013      	ands	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004636:	d025      	beq.n	8004684 <HAL_GPIO_DeInit+0x9c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a5e      	ldr	r2, [pc, #376]	; (80047b4 <HAL_GPIO_DeInit+0x1cc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d01f      	beq.n	8004680 <HAL_GPIO_DeInit+0x98>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_GPIO_DeInit+0x1d0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d019      	beq.n	800467c <HAL_GPIO_DeInit+0x94>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a5c      	ldr	r2, [pc, #368]	; (80047bc <HAL_GPIO_DeInit+0x1d4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_GPIO_DeInit+0x90>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a5b      	ldr	r2, [pc, #364]	; (80047c0 <HAL_GPIO_DeInit+0x1d8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00d      	beq.n	8004674 <HAL_GPIO_DeInit+0x8c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_GPIO_DeInit+0x1dc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <HAL_GPIO_DeInit+0x88>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a59      	ldr	r2, [pc, #356]	; (80047c8 <HAL_GPIO_DeInit+0x1e0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_GPIO_DeInit+0x84>
 8004668:	2306      	movs	r3, #6
 800466a:	e00c      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 800466c:	2307      	movs	r3, #7
 800466e:	e00a      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 8004670:	2305      	movs	r3, #5
 8004672:	e008      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 8004674:	2304      	movs	r3, #4
 8004676:	e006      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 8004678:	2303      	movs	r3, #3
 800467a:	e004      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 800467c:	2302      	movs	r3, #2
 800467e:	e002      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_GPIO_DeInit+0x9e>
 8004684:	2300      	movs	r3, #0
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	f002 0203 	and.w	r2, r2, #3
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	4093      	lsls	r3, r2
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	429a      	cmp	r2, r3
 8004694:	d132      	bne.n	80046fc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004696:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	43db      	mvns	r3, r3
 800469e:	494b      	ldr	r1, [pc, #300]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80046a4:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	4947      	ldr	r1, [pc, #284]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80046b2:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	4944      	ldr	r1, [pc, #272]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046bc:	4013      	ands	r3, r2
 80046be:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80046c0:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	4940      	ldr	r1, [pc, #256]	; (80047cc <HAL_GPIO_DeInit+0x1e4>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	220f      	movs	r2, #15
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80046de:	4a34      	ldr	r2, [pc, #208]	; (80047b0 <HAL_GPIO_DeInit+0x1c8>)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	4830      	ldr	r0, [pc, #192]	; (80047b0 <HAL_GPIO_DeInit+0x1c8>)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	400a      	ands	r2, r1
 80046f6:	3302      	adds	r3, #2
 80046f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2103      	movs	r1, #3
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	08da      	lsrs	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3208      	adds	r2, #8
 8004718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	220f      	movs	r2, #15
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	08d2      	lsrs	r2, r2, #3
 8004730:	4019      	ands	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3208      	adds	r2, #8
 8004736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	2103      	movs	r1, #3
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	2101      	movs	r1, #1
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	401a      	ands	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	2103      	movs	r1, #3
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	401a      	ands	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477e:	2101      	movs	r1, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3301      	adds	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	f47f af2b 	bne.w	80045f8 <HAL_GPIO_DeInit+0x10>
  }
}
 80047a2:	bf00      	nop
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40010000 	.word	0x40010000
 80047b4:	48000400 	.word	0x48000400
 80047b8:	48000800 	.word	0x48000800
 80047bc:	48000c00 	.word	0x48000c00
 80047c0:	48001000 	.word	0x48001000
 80047c4:	48001400 	.word	0x48001400
 80047c8:	48001800 	.word	0x48001800
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047ec:	e002      	b.n	80047f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	887b      	ldrh	r3, [r7, #2]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004818:	887a      	ldrh	r2, [r7, #2]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800481e:	e002      	b.n	8004826 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004820:	887a      	ldrh	r2, [r7, #2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800484a:	4a05      	ldr	r2, [pc, #20]	; (8004860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fc fb7a 	bl	8000f4c <HAL_GPIO_EXTI_Callback>
  }
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40010400 	.word	0x40010400

08004864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e081      	b.n	800497a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fe f8c0 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	; 0x24
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	e006      	b.n	80048ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d104      	bne.n	80048fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	ea42 0103 	orr.w	r1, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1a      	ldr	r2, [r3, #32]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e021      	b.n	80049d8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	; 0x24
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fe f873 	bl	8002a98 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	461a      	mov	r2, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	817b      	strh	r3, [r7, #10]
 80049f2:	460b      	mov	r3, r1
 80049f4:	813b      	strh	r3, [r7, #8]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	f040 80f9 	bne.w	8004bfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_I2C_Mem_Write+0x34>
 8004a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0ed      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_I2C_Mem_Write+0x4e>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e0e6      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a36:	f7ff fb0f 	bl	8004058 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2319      	movs	r3, #25
 8004a42:	2201      	movs	r2, #1
 8004a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fac3 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0d1      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2221      	movs	r2, #33	; 0x21
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2240      	movs	r2, #64	; 0x40
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a3a      	ldr	r2, [r7, #32]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a80:	88f8      	ldrh	r0, [r7, #6]
 8004a82:	893a      	ldrh	r2, [r7, #8]
 8004a84:	8979      	ldrh	r1, [r7, #10]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4603      	mov	r3, r0
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f9d3 	bl	8004e3c <I2C_RequestMemoryWrite>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0a9      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2bff      	cmp	r3, #255	; 0xff
 8004ab0:	d90e      	bls.n	8004ad0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	22ff      	movs	r2, #255	; 0xff
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	8979      	ldrh	r1, [r7, #10]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fba5 	bl	8005218 <I2C_TransferConfig>
 8004ace:	e00f      	b.n	8004af0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fb94 	bl	8005218 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 faad 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e07b      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d034      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x1c8>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d130      	bne.n	8004ba8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2180      	movs	r1, #128	; 0x80
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa3f 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e04d      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2bff      	cmp	r3, #255	; 0xff
 8004b68:	d90e      	bls.n	8004b88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	8979      	ldrh	r1, [r7, #10]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fb49 	bl	8005218 <I2C_TransferConfig>
 8004b86:	e00f      	b.n	8004ba8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	8979      	ldrh	r1, [r7, #10]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fb38 	bl	8005218 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d19e      	bne.n	8004af0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fa8c 	bl	80050d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e01a      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6859      	ldr	r1, [r3, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_I2C_Mem_Write+0x224>)
 8004bda:	400b      	ands	r3, r1
 8004bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	fe00e800 	.word	0xfe00e800

08004c08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	817b      	strh	r3, [r7, #10]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	813b      	strh	r3, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	f040 80fd 	bne.w	8004e2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x34>
 8004c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0f1      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x4e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0ea      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c5e:	f7ff f9fb 	bl	8004058 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2319      	movs	r3, #25
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f9af 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0d5      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2222      	movs	r2, #34	; 0x22
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2240      	movs	r2, #64	; 0x40
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ca8:	88f8      	ldrh	r0, [r7, #6]
 8004caa:	893a      	ldrh	r2, [r7, #8]
 8004cac:	8979      	ldrh	r1, [r7, #10]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f913 	bl	8004ee4 <I2C_RequestMemoryRead>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0ad      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2bff      	cmp	r3, #255	; 0xff
 8004cd8:	d90e      	bls.n	8004cf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	8979      	ldrh	r1, [r7, #10]
 8004ce8:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <HAL_I2C_Mem_Read+0x22c>)
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fa91 	bl	8005218 <I2C_TransferConfig>
 8004cf6:	e00f      	b.n	8004d18 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	8979      	ldrh	r1, [r7, #10]
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_I2C_Mem_Read+0x22c>)
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa80 	bl	8005218 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2104      	movs	r1, #4
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f956 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07c      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d034      	beq.n	8004dd8 <HAL_I2C_Mem_Read+0x1d0>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d130      	bne.n	8004dd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2180      	movs	r1, #128	; 0x80
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f927 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e04d      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2bff      	cmp	r3, #255	; 0xff
 8004d98:	d90e      	bls.n	8004db8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	; 0xff
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	8979      	ldrh	r1, [r7, #10]
 8004da8:	2300      	movs	r3, #0
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa31 	bl	8005218 <I2C_TransferConfig>
 8004db6:	e00f      	b.n	8004dd8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	8979      	ldrh	r1, [r7, #10]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fa20 	bl	8005218 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d19a      	bne.n	8004d18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f974 	bl	80050d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e01a      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_I2C_Mem_Read+0x230>)
 8004e0a:	400b      	ands	r3, r1
 8004e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	80002400 	.word	0x80002400
 8004e38:	fe00e800 	.word	0xfe00e800

08004e3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	817b      	strh	r3, [r7, #10]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	813b      	strh	r3, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	8979      	ldrh	r1, [r7, #10]
 8004e5c:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <I2C_RequestMemoryWrite+0xa4>)
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f9d7 	bl	8005218 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	69b9      	ldr	r1, [r7, #24]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f8f0 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e02c      	b.n	8004ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e84:	893b      	ldrh	r3, [r7, #8]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e8e:	e015      	b.n	8004ebc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	69b9      	ldr	r1, [r7, #24]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f8d6 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e012      	b.n	8004ed8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb2:	893b      	ldrh	r3, [r7, #8]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f884 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	80002000 	.word	0x80002000

08004ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	813b      	strh	r3, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <I2C_RequestMemoryRead+0xa4>)
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f984 	bl	8005218 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f89d 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e02c      	b.n	8004f7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
 8004f34:	e015      	b.n	8004f62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f36:	893b      	ldrh	r3, [r7, #8]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	69b9      	ldr	r1, [r7, #24]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f883 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e012      	b.n	8004f7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f58:	893b      	ldrh	r3, [r7, #8]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2140      	movs	r1, #64	; 0x40
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f831 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	80002000 	.word	0x80002000

08004f8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d103      	bne.n	8004faa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d007      	beq.n	8004fc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	619a      	str	r2, [r3, #24]
  }
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe4:	e022      	b.n	800502c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fec:	d01e      	beq.n	800502c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7ff f833 	bl	8004058 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e00f      	b.n	800504c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	429a      	cmp	r2, r3
 8005048:	d0cd      	beq.n	8004fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005060:	e02c      	b.n	80050bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f870 	bl	800514c <I2C_IsAcknowledgeFailed>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e02a      	b.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507c:	d01e      	beq.n	80050bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fe ffeb 	bl	8004058 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d113      	bne.n	80050bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e007      	b.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d1cb      	bne.n	8005062 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050e0:	e028      	b.n	8005134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f830 	bl	800514c <I2C_IsAcknowledgeFailed>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e026      	b.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fe ffaf 	bl	8004058 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e007      	b.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d1cf      	bne.n	80050e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b10      	cmp	r3, #16
 8005164:	d151      	bne.n	800520a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005166:	e022      	b.n	80051ae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800516e:	d01e      	beq.n	80051ae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005170:	f7fe ff72 	bl	8004058 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <I2C_IsAcknowledgeFailed+0x3a>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d113      	bne.n	80051ae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e02e      	b.n	800520c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d1d5      	bne.n	8005168 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2210      	movs	r2, #16
 80051c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2220      	movs	r2, #32
 80051ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fedd 	bl	8004f8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6859      	ldr	r1, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <I2C_IsAcknowledgeFailed+0xc8>)
 80051de:	400b      	ands	r3, r1
 80051e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	f043 0204 	orr.w	r2, r3, #4
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	fe00e800 	.word	0xfe00e800

08005218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	4613      	mov	r3, r2
 8005228:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	0d5b      	lsrs	r3, r3, #21
 8005234:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <I2C_TransferConfig+0x58>)
 800523a:	430b      	orrs	r3, r1
 800523c:	43db      	mvns	r3, r3
 800523e:	ea02 0103 	and.w	r1, r2, r3
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005248:	7a7b      	ldrb	r3, [r7, #9]
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	431a      	orrs	r2, r3
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	03ff63ff 	.word	0x03ff63ff

08005274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b20      	cmp	r3, #32
 8005288:	d138      	bne.n	80052fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005294:	2302      	movs	r3, #2
 8005296:	e032      	b.n	80052fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	; 0x24
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x34>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d121      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11e      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d102      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e004      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d101      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 8005392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d134      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0xac>
 80053b0:	e005      	b.n	80053be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 80053b4:	617b      	str	r3, [r7, #20]
      break;
 80053b6:	e005      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ba:	617b      	str	r3, [r7, #20]
      break;
 80053bc:	e002      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	fb03 f202 	mul.w	r2, r3, r2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0e5b      	lsrs	r3, r3, #25
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	3301      	adds	r3, #1
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	0800a9b4 	.word	0x0800a9b4
 800541c:	00f42400 	.word	0x00f42400
 8005420:	007a1200 	.word	0x007a1200

08005424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000038 	.word	0x20000038

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	0800a9ac 	.word	0x0800a9ac

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800546c:	f7ff ffda 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	0800a9ac 	.word	0x0800a9ac

08005494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e040      	b.n	8005528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fd fb0c 	bl	8002ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8f4 	bl	80056c0 <UART_SetConfig>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e022      	b.n	8005528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fc88 	bl	8005e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fd0f 	bl	8005f44 <UART_CheckIdleState>
 8005526:	4603      	mov	r3, r0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e027      	b.n	8005592 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2224      	movs	r2, #36	; 0x24
 8005546:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fd fb25 	bl	8002bc0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b08a      	sub	sp, #40	; 0x28
 800559e:	af02      	add	r7, sp, #8
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	f040 8081 	bne.w	80056b6 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_UART_Transmit+0x26>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e079      	b.n	80056b8 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit+0x38>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e072      	b.n	80056b8 <HAL_UART_Transmit+0x11e>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2221      	movs	r2, #33	; 0x21
 80055e4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80055e6:	f7fe fd37 	bl	8004058 <HAL_GetTick>
 80055ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005604:	d108      	bne.n	8005618 <HAL_UART_Transmit+0x7e>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e003      	b.n	8005620 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005628:	e02d      	b.n	8005686 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fcca 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e039      	b.n	80056b8 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005656:	b292      	uxth	r2, r2
 8005658:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3302      	adds	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e008      	b.n	8005674 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b292      	uxth	r2, r2
 800566c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3301      	adds	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1cb      	bne.n	800562a <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2200      	movs	r2, #0
 800569a:	2140      	movs	r1, #64	; 0x40
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fc96 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e005      	b.n	80056b8 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c4:	b0a0      	sub	sp, #128	; 0x80
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	49a4      	ldr	r1, [pc, #656]	; (8005988 <UART_SetConfig+0x2c8>)
 80056f8:	4019      	ands	r1, r3
 80056fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005700:	430b      	orrs	r3, r1
 8005702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800570e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	ea40 0301 	orr.w	r3, r0, r1
 800571a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800571c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b99      	ldr	r3, [pc, #612]	; (800598c <UART_SetConfig+0x2cc>)
 8005728:	429a      	cmp	r2, r3
 800572a:	d004      	beq.n	8005736 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800572c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005732:	4313      	orrs	r3, r2
 8005734:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005746:	430b      	orrs	r3, r1
 8005748:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b90      	ldr	r3, [pc, #576]	; (8005990 <UART_SetConfig+0x2d0>)
 8005750:	429a      	cmp	r2, r3
 8005752:	d125      	bne.n	80057a0 <UART_SetConfig+0xe0>
 8005754:	4b8f      	ldr	r3, [pc, #572]	; (8005994 <UART_SetConfig+0x2d4>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d81a      	bhi.n	8005798 <UART_SetConfig+0xd8>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0xa8>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005779 	.word	0x08005779
 800576c:	08005789 	.word	0x08005789
 8005770:	08005781 	.word	0x08005781
 8005774:	08005791 	.word	0x08005791
 8005778:	2301      	movs	r3, #1
 800577a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800577e:	e116      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005780:	2302      	movs	r3, #2
 8005782:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005786:	e112      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800578e:	e10e      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005796:	e10a      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800579e:	e106      	b.n	80059ae <UART_SetConfig+0x2ee>
 80057a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b7c      	ldr	r3, [pc, #496]	; (8005998 <UART_SetConfig+0x2d8>)
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d138      	bne.n	800581c <UART_SetConfig+0x15c>
 80057aa:	4b7a      	ldr	r3, [pc, #488]	; (8005994 <UART_SetConfig+0x2d4>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d82d      	bhi.n	8005814 <UART_SetConfig+0x154>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x100>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	08005815 	.word	0x08005815
 80057c8:	08005815 	.word	0x08005815
 80057cc:	08005815 	.word	0x08005815
 80057d0:	08005805 	.word	0x08005805
 80057d4:	08005815 	.word	0x08005815
 80057d8:	08005815 	.word	0x08005815
 80057dc:	08005815 	.word	0x08005815
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	08005815 	.word	0x08005815
 80057e8:	08005815 	.word	0x08005815
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80057fa:	e0d8      	b.n	80059ae <UART_SetConfig+0x2ee>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005802:	e0d4      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800580a:	e0d0      	b.n	80059ae <UART_SetConfig+0x2ee>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005812:	e0cc      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800581a:	e0c8      	b.n	80059ae <UART_SetConfig+0x2ee>
 800581c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b5e      	ldr	r3, [pc, #376]	; (800599c <UART_SetConfig+0x2dc>)
 8005822:	429a      	cmp	r2, r3
 8005824:	d125      	bne.n	8005872 <UART_SetConfig+0x1b2>
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <UART_SetConfig+0x2d4>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d016      	beq.n	8005862 <UART_SetConfig+0x1a2>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d818      	bhi.n	800586a <UART_SetConfig+0x1aa>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d00a      	beq.n	8005852 <UART_SetConfig+0x192>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d814      	bhi.n	800586a <UART_SetConfig+0x1aa>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <UART_SetConfig+0x18a>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d008      	beq.n	800585a <UART_SetConfig+0x19a>
 8005848:	e00f      	b.n	800586a <UART_SetConfig+0x1aa>
 800584a:	2300      	movs	r3, #0
 800584c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005850:	e0ad      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005852:	2302      	movs	r3, #2
 8005854:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005858:	e0a9      	b.n	80059ae <UART_SetConfig+0x2ee>
 800585a:	2304      	movs	r3, #4
 800585c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005860:	e0a5      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005862:	2308      	movs	r3, #8
 8005864:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005868:	e0a1      	b.n	80059ae <UART_SetConfig+0x2ee>
 800586a:	2310      	movs	r3, #16
 800586c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005870:	e09d      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b4a      	ldr	r3, [pc, #296]	; (80059a0 <UART_SetConfig+0x2e0>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d125      	bne.n	80058c8 <UART_SetConfig+0x208>
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <UART_SetConfig+0x2d4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005886:	2bc0      	cmp	r3, #192	; 0xc0
 8005888:	d016      	beq.n	80058b8 <UART_SetConfig+0x1f8>
 800588a:	2bc0      	cmp	r3, #192	; 0xc0
 800588c:	d818      	bhi.n	80058c0 <UART_SetConfig+0x200>
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d00a      	beq.n	80058a8 <UART_SetConfig+0x1e8>
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d814      	bhi.n	80058c0 <UART_SetConfig+0x200>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <UART_SetConfig+0x1e0>
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d008      	beq.n	80058b0 <UART_SetConfig+0x1f0>
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0x200>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80058a6:	e082      	b.n	80059ae <UART_SetConfig+0x2ee>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80058ae:	e07e      	b.n	80059ae <UART_SetConfig+0x2ee>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80058b6:	e07a      	b.n	80059ae <UART_SetConfig+0x2ee>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80058be:	e076      	b.n	80059ae <UART_SetConfig+0x2ee>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80058c6:	e072      	b.n	80059ae <UART_SetConfig+0x2ee>
 80058c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <UART_SetConfig+0x2e4>)
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d12a      	bne.n	8005928 <UART_SetConfig+0x268>
 80058d2:	4b30      	ldr	r3, [pc, #192]	; (8005994 <UART_SetConfig+0x2d4>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e0:	d01a      	beq.n	8005918 <UART_SetConfig+0x258>
 80058e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e6:	d81b      	bhi.n	8005920 <UART_SetConfig+0x260>
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d00c      	beq.n	8005908 <UART_SetConfig+0x248>
 80058ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f2:	d815      	bhi.n	8005920 <UART_SetConfig+0x260>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <UART_SetConfig+0x240>
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d008      	beq.n	8005910 <UART_SetConfig+0x250>
 80058fe:	e00f      	b.n	8005920 <UART_SetConfig+0x260>
 8005900:	2300      	movs	r3, #0
 8005902:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005906:	e052      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800590e:	e04e      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005916:	e04a      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800591e:	e046      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005926:	e042      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b17      	ldr	r3, [pc, #92]	; (800598c <UART_SetConfig+0x2cc>)
 800592e:	429a      	cmp	r2, r3
 8005930:	d13a      	bne.n	80059a8 <UART_SetConfig+0x2e8>
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <UART_SetConfig+0x2d4>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800593c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005940:	d01a      	beq.n	8005978 <UART_SetConfig+0x2b8>
 8005942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005946:	d81b      	bhi.n	8005980 <UART_SetConfig+0x2c0>
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d00c      	beq.n	8005968 <UART_SetConfig+0x2a8>
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005952:	d815      	bhi.n	8005980 <UART_SetConfig+0x2c0>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <UART_SetConfig+0x2a0>
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d008      	beq.n	8005970 <UART_SetConfig+0x2b0>
 800595e:	e00f      	b.n	8005980 <UART_SetConfig+0x2c0>
 8005960:	2300      	movs	r3, #0
 8005962:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005966:	e022      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005968:	2302      	movs	r3, #2
 800596a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800596e:	e01e      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005976:	e01a      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800597e:	e016      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005986:	e012      	b.n	80059ae <UART_SetConfig+0x2ee>
 8005988:	efff69f3 	.word	0xefff69f3
 800598c:	40008000 	.word	0x40008000
 8005990:	40013800 	.word	0x40013800
 8005994:	40021000 	.word	0x40021000
 8005998:	40004400 	.word	0x40004400
 800599c:	40004800 	.word	0x40004800
 80059a0:	40004c00 	.word	0x40004c00
 80059a4:	40005000 	.word	0x40005000
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4bb6      	ldr	r3, [pc, #728]	; (8005c8c <UART_SetConfig+0x5cc>)
 80059b4:	429a      	cmp	r2, r3
 80059b6:	f040 810c 	bne.w	8005bd2 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059ba:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d823      	bhi.n	8005a0a <UART_SetConfig+0x34a>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0x308>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	08005a0b 	.word	0x08005a0b
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	08005a0b 	.word	0x08005a0b
 80059d8:	080059fb 	.word	0x080059fb
 80059dc:	08005a0b 	.word	0x08005a0b
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a0b 	.word	0x08005a0b
 80059e8:	08005a03 	.word	0x08005a03
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80059ec:	f7ff fd26 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80059f0:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80059f2:	e00e      	b.n	8005a12 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80059f4:	4ba6      	ldr	r3, [pc, #664]	; (8005c90 <UART_SetConfig+0x5d0>)
 80059f6:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80059f8:	e00b      	b.n	8005a12 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80059fa:	f7ff fc87 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80059fe:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a00:	e007      	b.n	8005a12 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a08:	e003      	b.n	8005a12 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005a10:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 81e5 	beq.w	8005de4 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	441a      	add	r2, r3
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d305      	bcc.n	8005a36 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d903      	bls.n	8005a3e <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005a3c:	e1d2      	b.n	8005de4 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8005a3e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	f200 80b0 	bhi.w	8005ba8 <UART_SetConfig+0x4e8>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x390>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005ba9 	.word	0x08005ba9
 8005a58:	08005ad5 	.word	0x08005ad5
 8005a5c:	08005ba9 	.word	0x08005ba9
 8005a60:	08005b15 	.word	0x08005b15
 8005a64:	08005ba9 	.word	0x08005ba9
 8005a68:	08005ba9 	.word	0x08005ba9
 8005a6c:	08005ba9 	.word	0x08005ba9
 8005a70:	08005b71 	.word	0x08005b71
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7ff fce2 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8005a78:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4698      	mov	r8, r3
 8005a80:	4691      	mov	r9, r2
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8005a8e:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8005a92:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8005a96:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005a98:	6849      	ldr	r1, [r1, #4]
 8005a9a:	0849      	lsrs	r1, r1, #1
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	6539      	str	r1, [r7, #80]	; 0x50
 8005aa0:	6578      	str	r0, [r7, #84]	; 0x54
 8005aa2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	1851      	adds	r1, r2, r1
 8005aaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005aac:	4629      	mov	r1, r5
 8005aae:	eb43 0101 	adc.w	r1, r3, r1
 8005ab2:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	643b      	str	r3, [r7, #64]	; 0x40
 8005abc:	647a      	str	r2, [r7, #68]	; 0x44
 8005abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ac6:	f7fb f8bf 	bl	8000c48 <__aeabi_uldivmod>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4613      	mov	r3, r2
 8005ad0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ad2:	e06d      	b.n	8005bb0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	2200      	movs	r2, #0
 8005adc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ade:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ae0:	4b6c      	ldr	r3, [pc, #432]	; (8005c94 <UART_SetConfig+0x5d4>)
 8005ae2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	18d3      	adds	r3, r2, r3
 8005aea:	633b      	str	r3, [r7, #48]	; 0x30
 8005aec:	460b      	mov	r3, r1
 8005aee:	f143 0300 	adc.w	r3, r3, #0
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b06:	f7fb f89f 	bl	8000c48 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4613      	mov	r3, r2
 8005b10:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b12:	e04d      	b.n	8005bb0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005b14:	f7ff fbfa 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8005b18:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	461c      	mov	r4, r3
 8005b20:	4615      	mov	r5, r2
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	022b      	lsls	r3, r5, #8
 8005b2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b30:	0222      	lsls	r2, r4, #8
 8005b32:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005b34:	6849      	ldr	r1, [r1, #4]
 8005b36:	0849      	lsrs	r1, r1, #1
 8005b38:	2000      	movs	r0, #0
 8005b3a:	6239      	str	r1, [r7, #32]
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24
 8005b3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b42:	4621      	mov	r1, r4
 8005b44:	1851      	adds	r1, r2, r1
 8005b46:	61b9      	str	r1, [r7, #24]
 8005b48:	4629      	mov	r1, r5
 8005b4a:	eb43 0101 	adc.w	r1, r3, r1
 8005b4e:	61f9      	str	r1, [r7, #28]
 8005b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	617a      	str	r2, [r7, #20]
 8005b5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005b62:	f7fb f871 	bl	8000c48 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b6e:	e01f      	b.n	8005bb0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	2200      	movs	r2, #0
 8005b78:	469a      	mov	sl, r3
 8005b7a:	4693      	mov	fp, r2
 8005b7c:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	f14b 0300 	adc.w	r3, fp, #0
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b9a:	f7fb f855 	bl	8000c48 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ba6:	e003      	b.n	8005bb0 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8005bae:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb6:	d308      	bcc.n	8005bca <UART_SetConfig+0x50a>
 8005bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbe:	d204      	bcs.n	8005bca <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8005bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e10c      	b.n	8005de4 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005bd0:	e108      	b.n	8005de4 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bda:	f040 808f 	bne.w	8005cfc <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8005bde:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d864      	bhi.n	8005cb0 <UART_SetConfig+0x5f0>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x52c>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c31 	.word	0x08005c31
 8005bf4:	08005c51 	.word	0x08005c51
 8005bf8:	08005cb1 	.word	0x08005cb1
 8005bfc:	08005c6d 	.word	0x08005c6d
 8005c00:	08005cb1 	.word	0x08005cb1
 8005c04:	08005cb1 	.word	0x08005cb1
 8005c08:	08005cb1 	.word	0x08005cb1
 8005c0c:	08005c99 	.word	0x08005c99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c10:	f7ff fc14 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8005c14:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c18:	005a      	lsls	r2, r3, #1
 8005c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	441a      	add	r2, r3
 8005c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c2e:	e043      	b.n	8005cb8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c30:	f7ff fc1a 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8005c34:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c38:	005a      	lsls	r2, r3, #1
 8005c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	441a      	add	r2, r3
 8005c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c4e:	e033      	b.n	8005cb8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005c5a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005c5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c60:	6852      	ldr	r2, [r2, #4]
 8005c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c6a:	e025      	b.n	8005cb8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c6c:	f7ff fb4e 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8005c70:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c74:	005a      	lsls	r2, r3, #1
 8005c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	441a      	add	r2, r3
 8005c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c8a:	e015      	b.n	8005cb8 <UART_SetConfig+0x5f8>
 8005c8c:	40008000 	.word	0x40008000
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cae:	e003      	b.n	8005cb8 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	d91a      	bls.n	8005cf4 <UART_SetConfig+0x634>
 8005cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d216      	bcs.n	8005cf4 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f023 030f 	bic.w	r3, r3, #15
 8005cce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8005ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	e077      	b.n	8005de4 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005cfa:	e073      	b.n	8005de4 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8005cfc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d85c      	bhi.n	8005dbe <UART_SetConfig+0x6fe>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <UART_SetConfig+0x64c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d4f 	.word	0x08005d4f
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005dbf 	.word	0x08005dbf
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005dbf 	.word	0x08005dbf
 8005d24:	08005dbf 	.word	0x08005dbf
 8005d28:	08005dbf 	.word	0x08005dbf
 8005d2c:	08005da7 	.word	0x08005da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7ff fb84 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8005d34:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	085a      	lsrs	r2, r3, #1
 8005d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d3e:	441a      	add	r2, r3
 8005d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d4c:	e03b      	b.n	8005dc6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d4e:	f7ff fb8b 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8005d52:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	085a      	lsrs	r2, r3, #1
 8005d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d5c:	441a      	add	r2, r3
 8005d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d6a:	e02c      	b.n	8005dc6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005d76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005d7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d7c:	6852      	ldr	r2, [r2, #4]
 8005d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d86:	e01e      	b.n	8005dc6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d88:	f7ff fac0 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8005d8c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085a      	lsrs	r2, r3, #1
 8005d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d96:	441a      	add	r2, r3
 8005d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005da4:	e00f      	b.n	8005dc6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dbc:	e003      	b.n	8005dc6 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d908      	bls.n	8005dde <UART_SetConfig+0x71e>
 8005dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d204      	bcs.n	8005dde <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8005dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	e002      	b.n	8005de4 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de6:	2200      	movs	r2, #0
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dec:	2200      	movs	r2, #0
 8005dee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005df0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3780      	adds	r7, #128	; 0x80
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfe:	bf00      	nop

08005e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01a      	beq.n	8005f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efe:	d10a      	bne.n	8005f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f52:	f7fe f881 	bl	8004058 <HAL_GetTick>
 8005f56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d10e      	bne.n	8005f84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f82a 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e020      	b.n	8005fc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d10e      	bne.n	8005fb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f814 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e00a      	b.n	8005fc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fde:	e05d      	b.n	800609c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe6:	d059      	beq.n	800609c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe8:	f7fe f836 	bl	8004058 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11b      	bne.n	8006036 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800600c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e042      	b.n	80060bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d02b      	beq.n	800609c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006052:	d123      	bne.n	800609c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800606c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e00f      	b.n	80060bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4013      	ands	r3, r2
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d092      	beq.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <findslot>:
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <findslot+0x2c>)
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	b118      	cbz	r0, 80060d6 <findslot+0x12>
 80060ce:	6983      	ldr	r3, [r0, #24]
 80060d0:	b90b      	cbnz	r3, 80060d6 <findslot+0x12>
 80060d2:	f000 f9a1 	bl	8006418 <__sinit>
 80060d6:	2c13      	cmp	r4, #19
 80060d8:	d807      	bhi.n	80060ea <findslot+0x26>
 80060da:	4806      	ldr	r0, [pc, #24]	; (80060f4 <findslot+0x30>)
 80060dc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80060e0:	3201      	adds	r2, #1
 80060e2:	d002      	beq.n	80060ea <findslot+0x26>
 80060e4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	2000      	movs	r0, #0
 80060ec:	e7fc      	b.n	80060e8 <findslot+0x24>
 80060ee:	bf00      	nop
 80060f0:	2000010c 	.word	0x2000010c
 80060f4:	200003f8 	.word	0x200003f8

080060f8 <error>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	4604      	mov	r4, r0
 80060fc:	f000 f92e 	bl	800635c <__errno>
 8006100:	2613      	movs	r6, #19
 8006102:	4605      	mov	r5, r0
 8006104:	2700      	movs	r7, #0
 8006106:	4630      	mov	r0, r6
 8006108:	4639      	mov	r1, r7
 800610a:	beab      	bkpt	0x00ab
 800610c:	4606      	mov	r6, r0
 800610e:	602e      	str	r6, [r5, #0]
 8006110:	4620      	mov	r0, r4
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006114 <checkerror>:
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d101      	bne.n	800611c <checkerror+0x8>
 8006118:	f7ff bfee 	b.w	80060f8 <error>
 800611c:	4770      	bx	lr

0800611e <_swiread>:
 800611e:	b530      	push	{r4, r5, lr}
 8006120:	b085      	sub	sp, #20
 8006122:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006126:	9203      	str	r2, [sp, #12]
 8006128:	2406      	movs	r4, #6
 800612a:	ad01      	add	r5, sp, #4
 800612c:	4620      	mov	r0, r4
 800612e:	4629      	mov	r1, r5
 8006130:	beab      	bkpt	0x00ab
 8006132:	4604      	mov	r4, r0
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff ffed 	bl	8006114 <checkerror>
 800613a:	b005      	add	sp, #20
 800613c:	bd30      	pop	{r4, r5, pc}

0800613e <_read>:
 800613e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006140:	4615      	mov	r5, r2
 8006142:	9101      	str	r1, [sp, #4]
 8006144:	f7ff ffbe 	bl	80060c4 <findslot>
 8006148:	9901      	ldr	r1, [sp, #4]
 800614a:	4604      	mov	r4, r0
 800614c:	b938      	cbnz	r0, 800615e <_read+0x20>
 800614e:	f000 f905 	bl	800635c <__errno>
 8006152:	2309      	movs	r3, #9
 8006154:	6003      	str	r3, [r0, #0]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615a:	b003      	add	sp, #12
 800615c:	bd30      	pop	{r4, r5, pc}
 800615e:	6800      	ldr	r0, [r0, #0]
 8006160:	462a      	mov	r2, r5
 8006162:	f7ff ffdc 	bl	800611e <_swiread>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d0f7      	beq.n	800615a <_read+0x1c>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	1a2a      	subs	r2, r5, r0
 800616e:	4413      	add	r3, r2
 8006170:	6063      	str	r3, [r4, #4]
 8006172:	4610      	mov	r0, r2
 8006174:	e7f1      	b.n	800615a <_read+0x1c>

08006176 <_swilseek>:
 8006176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006178:	460c      	mov	r4, r1
 800617a:	4616      	mov	r6, r2
 800617c:	f7ff ffa2 	bl	80060c4 <findslot>
 8006180:	4605      	mov	r5, r0
 8006182:	b940      	cbnz	r0, 8006196 <_swilseek+0x20>
 8006184:	f000 f8ea 	bl	800635c <__errno>
 8006188:	2309      	movs	r3, #9
 800618a:	6003      	str	r3, [r0, #0]
 800618c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006190:	4620      	mov	r0, r4
 8006192:	b003      	add	sp, #12
 8006194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006196:	2e02      	cmp	r6, #2
 8006198:	d903      	bls.n	80061a2 <_swilseek+0x2c>
 800619a:	f000 f8df 	bl	800635c <__errno>
 800619e:	2316      	movs	r3, #22
 80061a0:	e7f3      	b.n	800618a <_swilseek+0x14>
 80061a2:	2e01      	cmp	r6, #1
 80061a4:	d112      	bne.n	80061cc <_swilseek+0x56>
 80061a6:	6843      	ldr	r3, [r0, #4]
 80061a8:	18e4      	adds	r4, r4, r3
 80061aa:	d4f6      	bmi.n	800619a <_swilseek+0x24>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	260a      	movs	r6, #10
 80061b0:	e9cd 3400 	strd	r3, r4, [sp]
 80061b4:	466f      	mov	r7, sp
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	beab      	bkpt	0x00ab
 80061bc:	4606      	mov	r6, r0
 80061be:	4630      	mov	r0, r6
 80061c0:	f7ff ffa8 	bl	8006114 <checkerror>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	dbe1      	blt.n	800618c <_swilseek+0x16>
 80061c8:	606c      	str	r4, [r5, #4]
 80061ca:	e7e1      	b.n	8006190 <_swilseek+0x1a>
 80061cc:	2e02      	cmp	r6, #2
 80061ce:	d1ed      	bne.n	80061ac <_swilseek+0x36>
 80061d0:	6803      	ldr	r3, [r0, #0]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	260c      	movs	r6, #12
 80061d6:	466f      	mov	r7, sp
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	beab      	bkpt	0x00ab
 80061de:	4606      	mov	r6, r0
 80061e0:	4630      	mov	r0, r6
 80061e2:	f7ff ff97 	bl	8006114 <checkerror>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	d0d0      	beq.n	800618c <_swilseek+0x16>
 80061ea:	4404      	add	r4, r0
 80061ec:	e7de      	b.n	80061ac <_swilseek+0x36>

080061ee <_lseek>:
 80061ee:	f7ff bfc2 	b.w	8006176 <_swilseek>

080061f2 <_swiwrite>:
 80061f2:	b530      	push	{r4, r5, lr}
 80061f4:	b085      	sub	sp, #20
 80061f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80061fa:	9203      	str	r2, [sp, #12]
 80061fc:	2405      	movs	r4, #5
 80061fe:	ad01      	add	r5, sp, #4
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	beab      	bkpt	0x00ab
 8006206:	4604      	mov	r4, r0
 8006208:	4620      	mov	r0, r4
 800620a:	f7ff ff83 	bl	8006114 <checkerror>
 800620e:	b005      	add	sp, #20
 8006210:	bd30      	pop	{r4, r5, pc}

08006212 <_write>:
 8006212:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006214:	4615      	mov	r5, r2
 8006216:	9101      	str	r1, [sp, #4]
 8006218:	f7ff ff54 	bl	80060c4 <findslot>
 800621c:	9901      	ldr	r1, [sp, #4]
 800621e:	4604      	mov	r4, r0
 8006220:	b930      	cbnz	r0, 8006230 <_write+0x1e>
 8006222:	f000 f89b 	bl	800635c <__errno>
 8006226:	2309      	movs	r3, #9
 8006228:	6003      	str	r3, [r0, #0]
 800622a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622e:	e012      	b.n	8006256 <_write+0x44>
 8006230:	6800      	ldr	r0, [r0, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	f7ff ffdd 	bl	80061f2 <_swiwrite>
 8006238:	2800      	cmp	r0, #0
 800623a:	dbf6      	blt.n	800622a <_write+0x18>
 800623c:	6862      	ldr	r2, [r4, #4]
 800623e:	1a2b      	subs	r3, r5, r0
 8006240:	441a      	add	r2, r3
 8006242:	42a8      	cmp	r0, r5
 8006244:	6062      	str	r2, [r4, #4]
 8006246:	d105      	bne.n	8006254 <_write+0x42>
 8006248:	2000      	movs	r0, #0
 800624a:	b003      	add	sp, #12
 800624c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006250:	f7ff bf52 	b.w	80060f8 <error>
 8006254:	4618      	mov	r0, r3
 8006256:	b003      	add	sp, #12
 8006258:	bd30      	pop	{r4, r5, pc}

0800625a <_swiclose>:
 800625a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800625c:	2402      	movs	r4, #2
 800625e:	9001      	str	r0, [sp, #4]
 8006260:	ad01      	add	r5, sp, #4
 8006262:	4620      	mov	r0, r4
 8006264:	4629      	mov	r1, r5
 8006266:	beab      	bkpt	0x00ab
 8006268:	4604      	mov	r4, r0
 800626a:	4620      	mov	r0, r4
 800626c:	f7ff ff52 	bl	8006114 <checkerror>
 8006270:	b003      	add	sp, #12
 8006272:	bd30      	pop	{r4, r5, pc}

08006274 <_close>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4605      	mov	r5, r0
 8006278:	f7ff ff24 	bl	80060c4 <findslot>
 800627c:	4604      	mov	r4, r0
 800627e:	b930      	cbnz	r0, 800628e <_close+0x1a>
 8006280:	f000 f86c 	bl	800635c <__errno>
 8006284:	2309      	movs	r3, #9
 8006286:	6003      	str	r3, [r0, #0]
 8006288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800628c:	bd38      	pop	{r3, r4, r5, pc}
 800628e:	3d01      	subs	r5, #1
 8006290:	2d01      	cmp	r5, #1
 8006292:	d809      	bhi.n	80062a8 <_close+0x34>
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <_close+0x48>)
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d104      	bne.n	80062a8 <_close+0x34>
 800629e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062a2:	6003      	str	r3, [r0, #0]
 80062a4:	2000      	movs	r0, #0
 80062a6:	e7f1      	b.n	800628c <_close+0x18>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	f7ff ffd6 	bl	800625a <_swiclose>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d1ec      	bne.n	800628c <_close+0x18>
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	e7e8      	b.n	800628c <_close+0x18>
 80062ba:	bf00      	nop
 80062bc:	200003f8 	.word	0x200003f8

080062c0 <_getpid>:
 80062c0:	2001      	movs	r0, #1
 80062c2:	4770      	bx	lr

080062c4 <_swistat>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	460c      	mov	r4, r1
 80062c8:	f7ff fefc 	bl	80060c4 <findslot>
 80062cc:	4605      	mov	r5, r0
 80062ce:	b930      	cbnz	r0, 80062de <_swistat+0x1a>
 80062d0:	f000 f844 	bl	800635c <__errno>
 80062d4:	2309      	movs	r3, #9
 80062d6:	6003      	str	r3, [r0, #0]
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062dc:	bd70      	pop	{r4, r5, r6, pc}
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ea:	64a3      	str	r3, [r4, #72]	; 0x48
 80062ec:	260c      	movs	r6, #12
 80062ee:	4630      	mov	r0, r6
 80062f0:	4629      	mov	r1, r5
 80062f2:	beab      	bkpt	0x00ab
 80062f4:	4605      	mov	r5, r0
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7ff ff0c 	bl	8006114 <checkerror>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	bf1c      	itt	ne
 8006300:	6120      	strne	r0, [r4, #16]
 8006302:	2000      	movne	r0, #0
 8006304:	e7ea      	b.n	80062dc <_swistat+0x18>

08006306 <_fstat>:
 8006306:	460b      	mov	r3, r1
 8006308:	b510      	push	{r4, lr}
 800630a:	2100      	movs	r1, #0
 800630c:	4604      	mov	r4, r0
 800630e:	2258      	movs	r2, #88	; 0x58
 8006310:	4618      	mov	r0, r3
 8006312:	f000 f954 	bl	80065be <memset>
 8006316:	4601      	mov	r1, r0
 8006318:	4620      	mov	r0, r4
 800631a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800631e:	f7ff bfd1 	b.w	80062c4 <_swistat>

08006322 <_isatty>:
 8006322:	b570      	push	{r4, r5, r6, lr}
 8006324:	f7ff fece 	bl	80060c4 <findslot>
 8006328:	2509      	movs	r5, #9
 800632a:	4604      	mov	r4, r0
 800632c:	b920      	cbnz	r0, 8006338 <_isatty+0x16>
 800632e:	f000 f815 	bl	800635c <__errno>
 8006332:	6005      	str	r5, [r0, #0]
 8006334:	4620      	mov	r0, r4
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	4628      	mov	r0, r5
 800633a:	4621      	mov	r1, r4
 800633c:	beab      	bkpt	0x00ab
 800633e:	4604      	mov	r4, r0
 8006340:	2c01      	cmp	r4, #1
 8006342:	d0f7      	beq.n	8006334 <_isatty+0x12>
 8006344:	f000 f80a 	bl	800635c <__errno>
 8006348:	2400      	movs	r4, #0
 800634a:	4605      	mov	r5, r0
 800634c:	2613      	movs	r6, #19
 800634e:	4630      	mov	r0, r6
 8006350:	4621      	mov	r1, r4
 8006352:	beab      	bkpt	0x00ab
 8006354:	4606      	mov	r6, r0
 8006356:	602e      	str	r6, [r5, #0]
 8006358:	e7ec      	b.n	8006334 <_isatty+0x12>
	...

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000010c 	.word	0x2000010c

08006368 <std>:
 8006368:	2300      	movs	r3, #0
 800636a:	b510      	push	{r4, lr}
 800636c:	4604      	mov	r4, r0
 800636e:	e9c0 3300 	strd	r3, r3, [r0]
 8006372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006376:	6083      	str	r3, [r0, #8]
 8006378:	8181      	strh	r1, [r0, #12]
 800637a:	6643      	str	r3, [r0, #100]	; 0x64
 800637c:	81c2      	strh	r2, [r0, #14]
 800637e:	6183      	str	r3, [r0, #24]
 8006380:	4619      	mov	r1, r3
 8006382:	2208      	movs	r2, #8
 8006384:	305c      	adds	r0, #92	; 0x5c
 8006386:	f000 f91a 	bl	80065be <memset>
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <std+0x38>)
 800638c:	6263      	str	r3, [r4, #36]	; 0x24
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <std+0x3c>)
 8006390:	62a3      	str	r3, [r4, #40]	; 0x28
 8006392:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <std+0x40>)
 8006394:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <std+0x44>)
 8006398:	6224      	str	r4, [r4, #32]
 800639a:	6323      	str	r3, [r4, #48]	; 0x30
 800639c:	bd10      	pop	{r4, pc}
 800639e:	bf00      	nop
 80063a0:	0800702d 	.word	0x0800702d
 80063a4:	0800704f 	.word	0x0800704f
 80063a8:	08007087 	.word	0x08007087
 80063ac:	080070ab 	.word	0x080070ab

080063b0 <_cleanup_r>:
 80063b0:	4901      	ldr	r1, [pc, #4]	; (80063b8 <_cleanup_r+0x8>)
 80063b2:	f000 b8af 	b.w	8006514 <_fwalk_reent>
 80063b6:	bf00      	nop
 80063b8:	080080b9 	.word	0x080080b9

080063bc <__sfmoreglue>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	2268      	movs	r2, #104	; 0x68
 80063c0:	1e4d      	subs	r5, r1, #1
 80063c2:	4355      	muls	r5, r2
 80063c4:	460e      	mov	r6, r1
 80063c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063ca:	f000 f921 	bl	8006610 <_malloc_r>
 80063ce:	4604      	mov	r4, r0
 80063d0:	b140      	cbz	r0, 80063e4 <__sfmoreglue+0x28>
 80063d2:	2100      	movs	r1, #0
 80063d4:	e9c0 1600 	strd	r1, r6, [r0]
 80063d8:	300c      	adds	r0, #12
 80063da:	60a0      	str	r0, [r4, #8]
 80063dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063e0:	f000 f8ed 	bl	80065be <memset>
 80063e4:	4620      	mov	r0, r4
 80063e6:	bd70      	pop	{r4, r5, r6, pc}

080063e8 <__sfp_lock_acquire>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__sfp_lock_acquire+0x8>)
 80063ea:	f000 b8d8 	b.w	800659e <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20000499 	.word	0x20000499

080063f4 <__sfp_lock_release>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__sfp_lock_release+0x8>)
 80063f6:	f000 b8d3 	b.w	80065a0 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20000499 	.word	0x20000499

08006400 <__sinit_lock_acquire>:
 8006400:	4801      	ldr	r0, [pc, #4]	; (8006408 <__sinit_lock_acquire+0x8>)
 8006402:	f000 b8cc 	b.w	800659e <__retarget_lock_acquire_recursive>
 8006406:	bf00      	nop
 8006408:	2000049a 	.word	0x2000049a

0800640c <__sinit_lock_release>:
 800640c:	4801      	ldr	r0, [pc, #4]	; (8006414 <__sinit_lock_release+0x8>)
 800640e:	f000 b8c7 	b.w	80065a0 <__retarget_lock_release_recursive>
 8006412:	bf00      	nop
 8006414:	2000049a 	.word	0x2000049a

08006418 <__sinit>:
 8006418:	b510      	push	{r4, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	f7ff fff0 	bl	8006400 <__sinit_lock_acquire>
 8006420:	69a3      	ldr	r3, [r4, #24]
 8006422:	b11b      	cbz	r3, 800642c <__sinit+0x14>
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	f7ff bff0 	b.w	800640c <__sinit_lock_release>
 800642c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006430:	6523      	str	r3, [r4, #80]	; 0x50
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <__sinit+0x68>)
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <__sinit+0x6c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	62a2      	str	r2, [r4, #40]	; 0x28
 800643a:	42a3      	cmp	r3, r4
 800643c:	bf04      	itt	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	61a3      	streq	r3, [r4, #24]
 8006442:	4620      	mov	r0, r4
 8006444:	f000 f820 	bl	8006488 <__sfp>
 8006448:	6060      	str	r0, [r4, #4]
 800644a:	4620      	mov	r0, r4
 800644c:	f000 f81c 	bl	8006488 <__sfp>
 8006450:	60a0      	str	r0, [r4, #8]
 8006452:	4620      	mov	r0, r4
 8006454:	f000 f818 	bl	8006488 <__sfp>
 8006458:	2200      	movs	r2, #0
 800645a:	60e0      	str	r0, [r4, #12]
 800645c:	2104      	movs	r1, #4
 800645e:	6860      	ldr	r0, [r4, #4]
 8006460:	f7ff ff82 	bl	8006368 <std>
 8006464:	68a0      	ldr	r0, [r4, #8]
 8006466:	2201      	movs	r2, #1
 8006468:	2109      	movs	r1, #9
 800646a:	f7ff ff7d 	bl	8006368 <std>
 800646e:	68e0      	ldr	r0, [r4, #12]
 8006470:	2202      	movs	r2, #2
 8006472:	2112      	movs	r1, #18
 8006474:	f7ff ff78 	bl	8006368 <std>
 8006478:	2301      	movs	r3, #1
 800647a:	61a3      	str	r3, [r4, #24]
 800647c:	e7d2      	b.n	8006424 <__sinit+0xc>
 800647e:	bf00      	nop
 8006480:	0800aa44 	.word	0x0800aa44
 8006484:	080063b1 	.word	0x080063b1

08006488 <__sfp>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	4607      	mov	r7, r0
 800648c:	f7ff ffac 	bl	80063e8 <__sfp_lock_acquire>
 8006490:	4b1e      	ldr	r3, [pc, #120]	; (800650c <__sfp+0x84>)
 8006492:	681e      	ldr	r6, [r3, #0]
 8006494:	69b3      	ldr	r3, [r6, #24]
 8006496:	b913      	cbnz	r3, 800649e <__sfp+0x16>
 8006498:	4630      	mov	r0, r6
 800649a:	f7ff ffbd 	bl	8006418 <__sinit>
 800649e:	3648      	adds	r6, #72	; 0x48
 80064a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	d503      	bpl.n	80064b0 <__sfp+0x28>
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	b30b      	cbz	r3, 80064f0 <__sfp+0x68>
 80064ac:	6836      	ldr	r6, [r6, #0]
 80064ae:	e7f7      	b.n	80064a0 <__sfp+0x18>
 80064b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064b4:	b9d5      	cbnz	r5, 80064ec <__sfp+0x64>
 80064b6:	4b16      	ldr	r3, [pc, #88]	; (8006510 <__sfp+0x88>)
 80064b8:	60e3      	str	r3, [r4, #12]
 80064ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064be:	6665      	str	r5, [r4, #100]	; 0x64
 80064c0:	f000 f86c 	bl	800659c <__retarget_lock_init_recursive>
 80064c4:	f7ff ff96 	bl	80063f4 <__sfp_lock_release>
 80064c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064d0:	6025      	str	r5, [r4, #0]
 80064d2:	61a5      	str	r5, [r4, #24]
 80064d4:	2208      	movs	r2, #8
 80064d6:	4629      	mov	r1, r5
 80064d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064dc:	f000 f86f 	bl	80065be <memset>
 80064e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064e8:	4620      	mov	r0, r4
 80064ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ec:	3468      	adds	r4, #104	; 0x68
 80064ee:	e7d9      	b.n	80064a4 <__sfp+0x1c>
 80064f0:	2104      	movs	r1, #4
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ff62 	bl	80063bc <__sfmoreglue>
 80064f8:	4604      	mov	r4, r0
 80064fa:	6030      	str	r0, [r6, #0]
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d1d5      	bne.n	80064ac <__sfp+0x24>
 8006500:	f7ff ff78 	bl	80063f4 <__sfp_lock_release>
 8006504:	230c      	movs	r3, #12
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	e7ee      	b.n	80064e8 <__sfp+0x60>
 800650a:	bf00      	nop
 800650c:	0800aa44 	.word	0x0800aa44
 8006510:	ffff0001 	.word	0xffff0001

08006514 <_fwalk_reent>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	4606      	mov	r6, r0
 800651a:	4688      	mov	r8, r1
 800651c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006520:	2700      	movs	r7, #0
 8006522:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006526:	f1b9 0901 	subs.w	r9, r9, #1
 800652a:	d505      	bpl.n	8006538 <_fwalk_reent+0x24>
 800652c:	6824      	ldr	r4, [r4, #0]
 800652e:	2c00      	cmp	r4, #0
 8006530:	d1f7      	bne.n	8006522 <_fwalk_reent+0xe>
 8006532:	4638      	mov	r0, r7
 8006534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006538:	89ab      	ldrh	r3, [r5, #12]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d907      	bls.n	800654e <_fwalk_reent+0x3a>
 800653e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006542:	3301      	adds	r3, #1
 8006544:	d003      	beq.n	800654e <_fwalk_reent+0x3a>
 8006546:	4629      	mov	r1, r5
 8006548:	4630      	mov	r0, r6
 800654a:	47c0      	blx	r8
 800654c:	4307      	orrs	r7, r0
 800654e:	3568      	adds	r5, #104	; 0x68
 8006550:	e7e9      	b.n	8006526 <_fwalk_reent+0x12>
	...

08006554 <__libc_init_array>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	4d0d      	ldr	r5, [pc, #52]	; (800658c <__libc_init_array+0x38>)
 8006558:	4c0d      	ldr	r4, [pc, #52]	; (8006590 <__libc_init_array+0x3c>)
 800655a:	1b64      	subs	r4, r4, r5
 800655c:	10a4      	asrs	r4, r4, #2
 800655e:	2600      	movs	r6, #0
 8006560:	42a6      	cmp	r6, r4
 8006562:	d109      	bne.n	8006578 <__libc_init_array+0x24>
 8006564:	4d0b      	ldr	r5, [pc, #44]	; (8006594 <__libc_init_array+0x40>)
 8006566:	4c0c      	ldr	r4, [pc, #48]	; (8006598 <__libc_init_array+0x44>)
 8006568:	f003 fd86 	bl	800a078 <_init>
 800656c:	1b64      	subs	r4, r4, r5
 800656e:	10a4      	asrs	r4, r4, #2
 8006570:	2600      	movs	r6, #0
 8006572:	42a6      	cmp	r6, r4
 8006574:	d105      	bne.n	8006582 <__libc_init_array+0x2e>
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	f855 3b04 	ldr.w	r3, [r5], #4
 800657c:	4798      	blx	r3
 800657e:	3601      	adds	r6, #1
 8006580:	e7ee      	b.n	8006560 <__libc_init_array+0xc>
 8006582:	f855 3b04 	ldr.w	r3, [r5], #4
 8006586:	4798      	blx	r3
 8006588:	3601      	adds	r6, #1
 800658a:	e7f2      	b.n	8006572 <__libc_init_array+0x1e>
 800658c:	0800adf8 	.word	0x0800adf8
 8006590:	0800adf8 	.word	0x0800adf8
 8006594:	0800adf8 	.word	0x0800adf8
 8006598:	0800adfc 	.word	0x0800adfc

0800659c <__retarget_lock_init_recursive>:
 800659c:	4770      	bx	lr

0800659e <__retarget_lock_acquire_recursive>:
 800659e:	4770      	bx	lr

080065a0 <__retarget_lock_release_recursive>:
 80065a0:	4770      	bx	lr

080065a2 <memcpy>:
 80065a2:	440a      	add	r2, r1
 80065a4:	4291      	cmp	r1, r2
 80065a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065aa:	d100      	bne.n	80065ae <memcpy+0xc>
 80065ac:	4770      	bx	lr
 80065ae:	b510      	push	{r4, lr}
 80065b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b8:	4291      	cmp	r1, r2
 80065ba:	d1f9      	bne.n	80065b0 <memcpy+0xe>
 80065bc:	bd10      	pop	{r4, pc}

080065be <memset>:
 80065be:	4402      	add	r2, r0
 80065c0:	4603      	mov	r3, r0
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d100      	bne.n	80065c8 <memset+0xa>
 80065c6:	4770      	bx	lr
 80065c8:	f803 1b01 	strb.w	r1, [r3], #1
 80065cc:	e7f9      	b.n	80065c2 <memset+0x4>
	...

080065d0 <sbrk_aligned>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4e0e      	ldr	r6, [pc, #56]	; (800660c <sbrk_aligned+0x3c>)
 80065d4:	460c      	mov	r4, r1
 80065d6:	6831      	ldr	r1, [r6, #0]
 80065d8:	4605      	mov	r5, r0
 80065da:	b911      	cbnz	r1, 80065e2 <sbrk_aligned+0x12>
 80065dc:	f000 fcf6 	bl	8006fcc <_sbrk_r>
 80065e0:	6030      	str	r0, [r6, #0]
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 fcf1 	bl	8006fcc <_sbrk_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d00a      	beq.n	8006604 <sbrk_aligned+0x34>
 80065ee:	1cc4      	adds	r4, r0, #3
 80065f0:	f024 0403 	bic.w	r4, r4, #3
 80065f4:	42a0      	cmp	r0, r4
 80065f6:	d007      	beq.n	8006608 <sbrk_aligned+0x38>
 80065f8:	1a21      	subs	r1, r4, r0
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 fce6 	bl	8006fcc <_sbrk_r>
 8006600:	3001      	adds	r0, #1
 8006602:	d101      	bne.n	8006608 <sbrk_aligned+0x38>
 8006604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006608:	4620      	mov	r0, r4
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	200004a0 	.word	0x200004a0

08006610 <_malloc_r>:
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	1ccd      	adds	r5, r1, #3
 8006616:	f025 0503 	bic.w	r5, r5, #3
 800661a:	3508      	adds	r5, #8
 800661c:	2d0c      	cmp	r5, #12
 800661e:	bf38      	it	cc
 8006620:	250c      	movcc	r5, #12
 8006622:	2d00      	cmp	r5, #0
 8006624:	4607      	mov	r7, r0
 8006626:	db01      	blt.n	800662c <_malloc_r+0x1c>
 8006628:	42a9      	cmp	r1, r5
 800662a:	d905      	bls.n	8006638 <_malloc_r+0x28>
 800662c:	230c      	movs	r3, #12
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	2600      	movs	r6, #0
 8006632:	4630      	mov	r0, r6
 8006634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006638:	4e2e      	ldr	r6, [pc, #184]	; (80066f4 <_malloc_r+0xe4>)
 800663a:	f001 fe0f 	bl	800825c <__malloc_lock>
 800663e:	6833      	ldr	r3, [r6, #0]
 8006640:	461c      	mov	r4, r3
 8006642:	bb34      	cbnz	r4, 8006692 <_malloc_r+0x82>
 8006644:	4629      	mov	r1, r5
 8006646:	4638      	mov	r0, r7
 8006648:	f7ff ffc2 	bl	80065d0 <sbrk_aligned>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	4604      	mov	r4, r0
 8006650:	d14d      	bne.n	80066ee <_malloc_r+0xde>
 8006652:	6834      	ldr	r4, [r6, #0]
 8006654:	4626      	mov	r6, r4
 8006656:	2e00      	cmp	r6, #0
 8006658:	d140      	bne.n	80066dc <_malloc_r+0xcc>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	4631      	mov	r1, r6
 800665e:	4638      	mov	r0, r7
 8006660:	eb04 0803 	add.w	r8, r4, r3
 8006664:	f000 fcb2 	bl	8006fcc <_sbrk_r>
 8006668:	4580      	cmp	r8, r0
 800666a:	d13a      	bne.n	80066e2 <_malloc_r+0xd2>
 800666c:	6821      	ldr	r1, [r4, #0]
 800666e:	3503      	adds	r5, #3
 8006670:	1a6d      	subs	r5, r5, r1
 8006672:	f025 0503 	bic.w	r5, r5, #3
 8006676:	3508      	adds	r5, #8
 8006678:	2d0c      	cmp	r5, #12
 800667a:	bf38      	it	cc
 800667c:	250c      	movcc	r5, #12
 800667e:	4629      	mov	r1, r5
 8006680:	4638      	mov	r0, r7
 8006682:	f7ff ffa5 	bl	80065d0 <sbrk_aligned>
 8006686:	3001      	adds	r0, #1
 8006688:	d02b      	beq.n	80066e2 <_malloc_r+0xd2>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	442b      	add	r3, r5
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	e00e      	b.n	80066b0 <_malloc_r+0xa0>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	1b52      	subs	r2, r2, r5
 8006696:	d41e      	bmi.n	80066d6 <_malloc_r+0xc6>
 8006698:	2a0b      	cmp	r2, #11
 800669a:	d916      	bls.n	80066ca <_malloc_r+0xba>
 800669c:	1961      	adds	r1, r4, r5
 800669e:	42a3      	cmp	r3, r4
 80066a0:	6025      	str	r5, [r4, #0]
 80066a2:	bf18      	it	ne
 80066a4:	6059      	strne	r1, [r3, #4]
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	bf08      	it	eq
 80066aa:	6031      	streq	r1, [r6, #0]
 80066ac:	5162      	str	r2, [r4, r5]
 80066ae:	604b      	str	r3, [r1, #4]
 80066b0:	4638      	mov	r0, r7
 80066b2:	f104 060b 	add.w	r6, r4, #11
 80066b6:	f001 fdd7 	bl	8008268 <__malloc_unlock>
 80066ba:	f026 0607 	bic.w	r6, r6, #7
 80066be:	1d23      	adds	r3, r4, #4
 80066c0:	1af2      	subs	r2, r6, r3
 80066c2:	d0b6      	beq.n	8006632 <_malloc_r+0x22>
 80066c4:	1b9b      	subs	r3, r3, r6
 80066c6:	50a3      	str	r3, [r4, r2]
 80066c8:	e7b3      	b.n	8006632 <_malloc_r+0x22>
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	bf0c      	ite	eq
 80066d0:	6032      	streq	r2, [r6, #0]
 80066d2:	605a      	strne	r2, [r3, #4]
 80066d4:	e7ec      	b.n	80066b0 <_malloc_r+0xa0>
 80066d6:	4623      	mov	r3, r4
 80066d8:	6864      	ldr	r4, [r4, #4]
 80066da:	e7b2      	b.n	8006642 <_malloc_r+0x32>
 80066dc:	4634      	mov	r4, r6
 80066de:	6876      	ldr	r6, [r6, #4]
 80066e0:	e7b9      	b.n	8006656 <_malloc_r+0x46>
 80066e2:	230c      	movs	r3, #12
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	4638      	mov	r0, r7
 80066e8:	f001 fdbe 	bl	8008268 <__malloc_unlock>
 80066ec:	e7a1      	b.n	8006632 <_malloc_r+0x22>
 80066ee:	6025      	str	r5, [r4, #0]
 80066f0:	e7de      	b.n	80066b0 <_malloc_r+0xa0>
 80066f2:	bf00      	nop
 80066f4:	2000049c 	.word	0x2000049c

080066f8 <__cvt>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	ec55 4b10 	vmov	r4, r5, d0
 8006700:	2d00      	cmp	r5, #0
 8006702:	460e      	mov	r6, r1
 8006704:	4619      	mov	r1, r3
 8006706:	462b      	mov	r3, r5
 8006708:	bfbb      	ittet	lt
 800670a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800670e:	461d      	movlt	r5, r3
 8006710:	2300      	movge	r3, #0
 8006712:	232d      	movlt	r3, #45	; 0x2d
 8006714:	700b      	strb	r3, [r1, #0]
 8006716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006718:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800671c:	4691      	mov	r9, r2
 800671e:	f023 0820 	bic.w	r8, r3, #32
 8006722:	bfbc      	itt	lt
 8006724:	4622      	movlt	r2, r4
 8006726:	4614      	movlt	r4, r2
 8006728:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800672c:	d005      	beq.n	800673a <__cvt+0x42>
 800672e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006732:	d100      	bne.n	8006736 <__cvt+0x3e>
 8006734:	3601      	adds	r6, #1
 8006736:	2102      	movs	r1, #2
 8006738:	e000      	b.n	800673c <__cvt+0x44>
 800673a:	2103      	movs	r1, #3
 800673c:	ab03      	add	r3, sp, #12
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	ab02      	add	r3, sp, #8
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	ec45 4b10 	vmov	d0, r4, r5
 8006748:	4653      	mov	r3, sl
 800674a:	4632      	mov	r2, r6
 800674c:	f000 fe40 	bl	80073d0 <_dtoa_r>
 8006750:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006754:	4607      	mov	r7, r0
 8006756:	d102      	bne.n	800675e <__cvt+0x66>
 8006758:	f019 0f01 	tst.w	r9, #1
 800675c:	d022      	beq.n	80067a4 <__cvt+0xac>
 800675e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006762:	eb07 0906 	add.w	r9, r7, r6
 8006766:	d110      	bne.n	800678a <__cvt+0x92>
 8006768:	783b      	ldrb	r3, [r7, #0]
 800676a:	2b30      	cmp	r3, #48	; 0x30
 800676c:	d10a      	bne.n	8006784 <__cvt+0x8c>
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	4620      	mov	r0, r4
 8006774:	4629      	mov	r1, r5
 8006776:	f7fa f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800677a:	b918      	cbnz	r0, 8006784 <__cvt+0x8c>
 800677c:	f1c6 0601 	rsb	r6, r6, #1
 8006780:	f8ca 6000 	str.w	r6, [sl]
 8006784:	f8da 3000 	ldr.w	r3, [sl]
 8006788:	4499      	add	r9, r3
 800678a:	2200      	movs	r2, #0
 800678c:	2300      	movs	r3, #0
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7fa f999 	bl	8000ac8 <__aeabi_dcmpeq>
 8006796:	b108      	cbz	r0, 800679c <__cvt+0xa4>
 8006798:	f8cd 900c 	str.w	r9, [sp, #12]
 800679c:	2230      	movs	r2, #48	; 0x30
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	454b      	cmp	r3, r9
 80067a2:	d307      	bcc.n	80067b4 <__cvt+0xbc>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067a8:	1bdb      	subs	r3, r3, r7
 80067aa:	4638      	mov	r0, r7
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	b004      	add	sp, #16
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b4:	1c59      	adds	r1, r3, #1
 80067b6:	9103      	str	r1, [sp, #12]
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e7f0      	b.n	800679e <__cvt+0xa6>

080067bc <__exponent>:
 80067bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067be:	4603      	mov	r3, r0
 80067c0:	2900      	cmp	r1, #0
 80067c2:	bfb8      	it	lt
 80067c4:	4249      	neglt	r1, r1
 80067c6:	f803 2b02 	strb.w	r2, [r3], #2
 80067ca:	bfb4      	ite	lt
 80067cc:	222d      	movlt	r2, #45	; 0x2d
 80067ce:	222b      	movge	r2, #43	; 0x2b
 80067d0:	2909      	cmp	r1, #9
 80067d2:	7042      	strb	r2, [r0, #1]
 80067d4:	dd2a      	ble.n	800682c <__exponent+0x70>
 80067d6:	f10d 0407 	add.w	r4, sp, #7
 80067da:	46a4      	mov	ip, r4
 80067dc:	270a      	movs	r7, #10
 80067de:	46a6      	mov	lr, r4
 80067e0:	460a      	mov	r2, r1
 80067e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80067e6:	fb07 1516 	mls	r5, r7, r6, r1
 80067ea:	3530      	adds	r5, #48	; 0x30
 80067ec:	2a63      	cmp	r2, #99	; 0x63
 80067ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80067f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067f6:	4631      	mov	r1, r6
 80067f8:	dcf1      	bgt.n	80067de <__exponent+0x22>
 80067fa:	3130      	adds	r1, #48	; 0x30
 80067fc:	f1ae 0502 	sub.w	r5, lr, #2
 8006800:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006804:	1c44      	adds	r4, r0, #1
 8006806:	4629      	mov	r1, r5
 8006808:	4561      	cmp	r1, ip
 800680a:	d30a      	bcc.n	8006822 <__exponent+0x66>
 800680c:	f10d 0209 	add.w	r2, sp, #9
 8006810:	eba2 020e 	sub.w	r2, r2, lr
 8006814:	4565      	cmp	r5, ip
 8006816:	bf88      	it	hi
 8006818:	2200      	movhi	r2, #0
 800681a:	4413      	add	r3, r2
 800681c:	1a18      	subs	r0, r3, r0
 800681e:	b003      	add	sp, #12
 8006820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006826:	f804 2f01 	strb.w	r2, [r4, #1]!
 800682a:	e7ed      	b.n	8006808 <__exponent+0x4c>
 800682c:	2330      	movs	r3, #48	; 0x30
 800682e:	3130      	adds	r1, #48	; 0x30
 8006830:	7083      	strb	r3, [r0, #2]
 8006832:	70c1      	strb	r1, [r0, #3]
 8006834:	1d03      	adds	r3, r0, #4
 8006836:	e7f1      	b.n	800681c <__exponent+0x60>

08006838 <_printf_float>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	ed2d 8b02 	vpush	{d8}
 8006840:	b08d      	sub	sp, #52	; 0x34
 8006842:	460c      	mov	r4, r1
 8006844:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006848:	4616      	mov	r6, r2
 800684a:	461f      	mov	r7, r3
 800684c:	4605      	mov	r5, r0
 800684e:	f001 fc81 	bl	8008154 <_localeconv_r>
 8006852:	f8d0 a000 	ldr.w	sl, [r0]
 8006856:	4650      	mov	r0, sl
 8006858:	f7f9 fcba 	bl	80001d0 <strlen>
 800685c:	2300      	movs	r3, #0
 800685e:	930a      	str	r3, [sp, #40]	; 0x28
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	9305      	str	r3, [sp, #20]
 8006864:	f8d8 3000 	ldr.w	r3, [r8]
 8006868:	f894 b018 	ldrb.w	fp, [r4, #24]
 800686c:	3307      	adds	r3, #7
 800686e:	f023 0307 	bic.w	r3, r3, #7
 8006872:	f103 0208 	add.w	r2, r3, #8
 8006876:	f8c8 2000 	str.w	r2, [r8]
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006882:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006886:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800688a:	9307      	str	r3, [sp, #28]
 800688c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006890:	ee08 0a10 	vmov	s16, r0
 8006894:	4b9f      	ldr	r3, [pc, #636]	; (8006b14 <_printf_float+0x2dc>)
 8006896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800689a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800689e:	f7fa f945 	bl	8000b2c <__aeabi_dcmpun>
 80068a2:	bb88      	cbnz	r0, 8006908 <_printf_float+0xd0>
 80068a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068a8:	4b9a      	ldr	r3, [pc, #616]	; (8006b14 <_printf_float+0x2dc>)
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068ae:	f7fa f91f 	bl	8000af0 <__aeabi_dcmple>
 80068b2:	bb48      	cbnz	r0, 8006908 <_printf_float+0xd0>
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	4640      	mov	r0, r8
 80068ba:	4649      	mov	r1, r9
 80068bc:	f7fa f90e 	bl	8000adc <__aeabi_dcmplt>
 80068c0:	b110      	cbz	r0, 80068c8 <_printf_float+0x90>
 80068c2:	232d      	movs	r3, #45	; 0x2d
 80068c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c8:	4b93      	ldr	r3, [pc, #588]	; (8006b18 <_printf_float+0x2e0>)
 80068ca:	4894      	ldr	r0, [pc, #592]	; (8006b1c <_printf_float+0x2e4>)
 80068cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068d0:	bf94      	ite	ls
 80068d2:	4698      	movls	r8, r3
 80068d4:	4680      	movhi	r8, r0
 80068d6:	2303      	movs	r3, #3
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	f023 0204 	bic.w	r2, r3, #4
 80068e0:	6022      	str	r2, [r4, #0]
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	9700      	str	r7, [sp, #0]
 80068e8:	4633      	mov	r3, r6
 80068ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80068ec:	4621      	mov	r1, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 f9d8 	bl	8006ca4 <_printf_common>
 80068f4:	3001      	adds	r0, #1
 80068f6:	f040 8090 	bne.w	8006a1a <_printf_float+0x1e2>
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fe:	b00d      	add	sp, #52	; 0x34
 8006900:	ecbd 8b02 	vpop	{d8}
 8006904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	4640      	mov	r0, r8
 800690e:	4649      	mov	r1, r9
 8006910:	f7fa f90c 	bl	8000b2c <__aeabi_dcmpun>
 8006914:	b140      	cbz	r0, 8006928 <_printf_float+0xf0>
 8006916:	464b      	mov	r3, r9
 8006918:	2b00      	cmp	r3, #0
 800691a:	bfbc      	itt	lt
 800691c:	232d      	movlt	r3, #45	; 0x2d
 800691e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006922:	487f      	ldr	r0, [pc, #508]	; (8006b20 <_printf_float+0x2e8>)
 8006924:	4b7f      	ldr	r3, [pc, #508]	; (8006b24 <_printf_float+0x2ec>)
 8006926:	e7d1      	b.n	80068cc <_printf_float+0x94>
 8006928:	6863      	ldr	r3, [r4, #4]
 800692a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800692e:	9206      	str	r2, [sp, #24]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	d13f      	bne.n	80069b4 <_printf_float+0x17c>
 8006934:	2306      	movs	r3, #6
 8006936:	6063      	str	r3, [r4, #4]
 8006938:	9b05      	ldr	r3, [sp, #20]
 800693a:	6861      	ldr	r1, [r4, #4]
 800693c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006940:	2300      	movs	r3, #0
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	ab0a      	add	r3, sp, #40	; 0x28
 8006946:	e9cd b301 	strd	fp, r3, [sp, #4]
 800694a:	ab09      	add	r3, sp, #36	; 0x24
 800694c:	ec49 8b10 	vmov	d0, r8, r9
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	6022      	str	r2, [r4, #0]
 8006954:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006958:	4628      	mov	r0, r5
 800695a:	f7ff fecd 	bl	80066f8 <__cvt>
 800695e:	9b06      	ldr	r3, [sp, #24]
 8006960:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006962:	2b47      	cmp	r3, #71	; 0x47
 8006964:	4680      	mov	r8, r0
 8006966:	d108      	bne.n	800697a <_printf_float+0x142>
 8006968:	1cc8      	adds	r0, r1, #3
 800696a:	db02      	blt.n	8006972 <_printf_float+0x13a>
 800696c:	6863      	ldr	r3, [r4, #4]
 800696e:	4299      	cmp	r1, r3
 8006970:	dd41      	ble.n	80069f6 <_printf_float+0x1be>
 8006972:	f1ab 0b02 	sub.w	fp, fp, #2
 8006976:	fa5f fb8b 	uxtb.w	fp, fp
 800697a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800697e:	d820      	bhi.n	80069c2 <_printf_float+0x18a>
 8006980:	3901      	subs	r1, #1
 8006982:	465a      	mov	r2, fp
 8006984:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006988:	9109      	str	r1, [sp, #36]	; 0x24
 800698a:	f7ff ff17 	bl	80067bc <__exponent>
 800698e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006990:	1813      	adds	r3, r2, r0
 8006992:	2a01      	cmp	r2, #1
 8006994:	4681      	mov	r9, r0
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	dc02      	bgt.n	80069a0 <_printf_float+0x168>
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	07d2      	lsls	r2, r2, #31
 800699e:	d501      	bpl.n	80069a4 <_printf_float+0x16c>
 80069a0:	3301      	adds	r3, #1
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d09c      	beq.n	80068e6 <_printf_float+0xae>
 80069ac:	232d      	movs	r3, #45	; 0x2d
 80069ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b2:	e798      	b.n	80068e6 <_printf_float+0xae>
 80069b4:	9a06      	ldr	r2, [sp, #24]
 80069b6:	2a47      	cmp	r2, #71	; 0x47
 80069b8:	d1be      	bne.n	8006938 <_printf_float+0x100>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1bc      	bne.n	8006938 <_printf_float+0x100>
 80069be:	2301      	movs	r3, #1
 80069c0:	e7b9      	b.n	8006936 <_printf_float+0xfe>
 80069c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069c6:	d118      	bne.n	80069fa <_printf_float+0x1c2>
 80069c8:	2900      	cmp	r1, #0
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	dd0b      	ble.n	80069e6 <_printf_float+0x1ae>
 80069ce:	6121      	str	r1, [r4, #16]
 80069d0:	b913      	cbnz	r3, 80069d8 <_printf_float+0x1a0>
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	07d0      	lsls	r0, r2, #31
 80069d6:	d502      	bpl.n	80069de <_printf_float+0x1a6>
 80069d8:	3301      	adds	r3, #1
 80069da:	440b      	add	r3, r1
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	65a1      	str	r1, [r4, #88]	; 0x58
 80069e0:	f04f 0900 	mov.w	r9, #0
 80069e4:	e7de      	b.n	80069a4 <_printf_float+0x16c>
 80069e6:	b913      	cbnz	r3, 80069ee <_printf_float+0x1b6>
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	07d2      	lsls	r2, r2, #31
 80069ec:	d501      	bpl.n	80069f2 <_printf_float+0x1ba>
 80069ee:	3302      	adds	r3, #2
 80069f0:	e7f4      	b.n	80069dc <_printf_float+0x1a4>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7f2      	b.n	80069dc <_printf_float+0x1a4>
 80069f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fc:	4299      	cmp	r1, r3
 80069fe:	db05      	blt.n	8006a0c <_printf_float+0x1d4>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	6121      	str	r1, [r4, #16]
 8006a04:	07d8      	lsls	r0, r3, #31
 8006a06:	d5ea      	bpl.n	80069de <_printf_float+0x1a6>
 8006a08:	1c4b      	adds	r3, r1, #1
 8006a0a:	e7e7      	b.n	80069dc <_printf_float+0x1a4>
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	bfd4      	ite	le
 8006a10:	f1c1 0202 	rsble	r2, r1, #2
 8006a14:	2201      	movgt	r2, #1
 8006a16:	4413      	add	r3, r2
 8006a18:	e7e0      	b.n	80069dc <_printf_float+0x1a4>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	055a      	lsls	r2, r3, #21
 8006a1e:	d407      	bmi.n	8006a30 <_printf_float+0x1f8>
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	4642      	mov	r2, r8
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d12c      	bne.n	8006a88 <_printf_float+0x250>
 8006a2e:	e764      	b.n	80068fa <_printf_float+0xc2>
 8006a30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a34:	f240 80e0 	bls.w	8006bf8 <_printf_float+0x3c0>
 8006a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f7fa f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d034      	beq.n	8006ab2 <_printf_float+0x27a>
 8006a48:	4a37      	ldr	r2, [pc, #220]	; (8006b28 <_printf_float+0x2f0>)
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	f43f af51 	beq.w	80068fa <_printf_float+0xc2>
 8006a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	db02      	blt.n	8006a66 <_printf_float+0x22e>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	07d8      	lsls	r0, r3, #31
 8006a64:	d510      	bpl.n	8006a88 <_printf_float+0x250>
 8006a66:	ee18 3a10 	vmov	r3, s16
 8006a6a:	4652      	mov	r2, sl
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f af41 	beq.w	80068fa <_printf_float+0xc2>
 8006a78:	f04f 0800 	mov.w	r8, #0
 8006a7c:	f104 091a 	add.w	r9, r4, #26
 8006a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	4543      	cmp	r3, r8
 8006a86:	dc09      	bgt.n	8006a9c <_printf_float+0x264>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	079b      	lsls	r3, r3, #30
 8006a8c:	f100 8105 	bmi.w	8006c9a <_printf_float+0x462>
 8006a90:	68e0      	ldr	r0, [r4, #12]
 8006a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a94:	4298      	cmp	r0, r3
 8006a96:	bfb8      	it	lt
 8006a98:	4618      	movlt	r0, r3
 8006a9a:	e730      	b.n	80068fe <_printf_float+0xc6>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	464a      	mov	r2, r9
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af27 	beq.w	80068fa <_printf_float+0xc2>
 8006aac:	f108 0801 	add.w	r8, r8, #1
 8006ab0:	e7e6      	b.n	8006a80 <_printf_float+0x248>
 8006ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dc39      	bgt.n	8006b2c <_printf_float+0x2f4>
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <_printf_float+0x2f0>)
 8006aba:	2301      	movs	r3, #1
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f af19 	beq.w	80068fa <_printf_float+0xc2>
 8006ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006acc:	4313      	orrs	r3, r2
 8006ace:	d102      	bne.n	8006ad6 <_printf_float+0x29e>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	07d9      	lsls	r1, r3, #31
 8006ad4:	d5d8      	bpl.n	8006a88 <_printf_float+0x250>
 8006ad6:	ee18 3a10 	vmov	r3, s16
 8006ada:	4652      	mov	r2, sl
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af09 	beq.w	80068fa <_printf_float+0xc2>
 8006ae8:	f04f 0900 	mov.w	r9, #0
 8006aec:	f104 0a1a 	add.w	sl, r4, #26
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	425b      	negs	r3, r3
 8006af4:	454b      	cmp	r3, r9
 8006af6:	dc01      	bgt.n	8006afc <_printf_float+0x2c4>
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	e792      	b.n	8006a22 <_printf_float+0x1ea>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4652      	mov	r2, sl
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f aef7 	beq.w	80068fa <_printf_float+0xc2>
 8006b0c:	f109 0901 	add.w	r9, r9, #1
 8006b10:	e7ee      	b.n	8006af0 <_printf_float+0x2b8>
 8006b12:	bf00      	nop
 8006b14:	7fefffff 	.word	0x7fefffff
 8006b18:	0800aa48 	.word	0x0800aa48
 8006b1c:	0800aa4c 	.word	0x0800aa4c
 8006b20:	0800aa54 	.word	0x0800aa54
 8006b24:	0800aa50 	.word	0x0800aa50
 8006b28:	0800aa58 	.word	0x0800aa58
 8006b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b30:	429a      	cmp	r2, r3
 8006b32:	bfa8      	it	ge
 8006b34:	461a      	movge	r2, r3
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	4691      	mov	r9, r2
 8006b3a:	dc37      	bgt.n	8006bac <_printf_float+0x374>
 8006b3c:	f04f 0b00 	mov.w	fp, #0
 8006b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b44:	f104 021a 	add.w	r2, r4, #26
 8006b48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	eba3 0309 	sub.w	r3, r3, r9
 8006b50:	455b      	cmp	r3, fp
 8006b52:	dc33      	bgt.n	8006bbc <_printf_float+0x384>
 8006b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	db3b      	blt.n	8006bd4 <_printf_float+0x39c>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07da      	lsls	r2, r3, #31
 8006b60:	d438      	bmi.n	8006bd4 <_printf_float+0x39c>
 8006b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b64:	9a05      	ldr	r2, [sp, #20]
 8006b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b68:	1a9a      	subs	r2, r3, r2
 8006b6a:	eba3 0901 	sub.w	r9, r3, r1
 8006b6e:	4591      	cmp	r9, r2
 8006b70:	bfa8      	it	ge
 8006b72:	4691      	movge	r9, r2
 8006b74:	f1b9 0f00 	cmp.w	r9, #0
 8006b78:	dc35      	bgt.n	8006be6 <_printf_float+0x3ae>
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b82:	f104 0a1a 	add.w	sl, r4, #26
 8006b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	eba3 0309 	sub.w	r3, r3, r9
 8006b90:	4543      	cmp	r3, r8
 8006b92:	f77f af79 	ble.w	8006a88 <_printf_float+0x250>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4652      	mov	r2, sl
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f aeaa 	beq.w	80068fa <_printf_float+0xc2>
 8006ba6:	f108 0801 	add.w	r8, r8, #1
 8006baa:	e7ec      	b.n	8006b86 <_printf_float+0x34e>
 8006bac:	4613      	mov	r3, r2
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d1c0      	bne.n	8006b3c <_printf_float+0x304>
 8006bba:	e69e      	b.n	80068fa <_printf_float+0xc2>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	9205      	str	r2, [sp, #20]
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f ae97 	beq.w	80068fa <_printf_float+0xc2>
 8006bcc:	9a05      	ldr	r2, [sp, #20]
 8006bce:	f10b 0b01 	add.w	fp, fp, #1
 8006bd2:	e7b9      	b.n	8006b48 <_printf_float+0x310>
 8006bd4:	ee18 3a10 	vmov	r3, s16
 8006bd8:	4652      	mov	r2, sl
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	d1be      	bne.n	8006b62 <_printf_float+0x32a>
 8006be4:	e689      	b.n	80068fa <_printf_float+0xc2>
 8006be6:	9a05      	ldr	r2, [sp, #20]
 8006be8:	464b      	mov	r3, r9
 8006bea:	4442      	add	r2, r8
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d1c1      	bne.n	8006b7a <_printf_float+0x342>
 8006bf6:	e680      	b.n	80068fa <_printf_float+0xc2>
 8006bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bfa:	2a01      	cmp	r2, #1
 8006bfc:	dc01      	bgt.n	8006c02 <_printf_float+0x3ca>
 8006bfe:	07db      	lsls	r3, r3, #31
 8006c00:	d538      	bpl.n	8006c74 <_printf_float+0x43c>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4642      	mov	r2, r8
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae74 	beq.w	80068fa <_printf_float+0xc2>
 8006c12:	ee18 3a10 	vmov	r3, s16
 8006c16:	4652      	mov	r2, sl
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f ae6b 	beq.w	80068fa <_printf_float+0xc2>
 8006c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f7f9 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c30:	b9d8      	cbnz	r0, 8006c6a <_printf_float+0x432>
 8006c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c34:	f108 0201 	add.w	r2, r8, #1
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d10e      	bne.n	8006c62 <_printf_float+0x42a>
 8006c44:	e659      	b.n	80068fa <_printf_float+0xc2>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4652      	mov	r2, sl
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f ae52 	beq.w	80068fa <_printf_float+0xc2>
 8006c56:	f108 0801 	add.w	r8, r8, #1
 8006c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4543      	cmp	r3, r8
 8006c60:	dcf1      	bgt.n	8006c46 <_printf_float+0x40e>
 8006c62:	464b      	mov	r3, r9
 8006c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c68:	e6dc      	b.n	8006a24 <_printf_float+0x1ec>
 8006c6a:	f04f 0800 	mov.w	r8, #0
 8006c6e:	f104 0a1a 	add.w	sl, r4, #26
 8006c72:	e7f2      	b.n	8006c5a <_printf_float+0x422>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4642      	mov	r2, r8
 8006c78:	e7df      	b.n	8006c3a <_printf_float+0x402>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	464a      	mov	r2, r9
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f ae38 	beq.w	80068fa <_printf_float+0xc2>
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c92:	1a5b      	subs	r3, r3, r1
 8006c94:	4543      	cmp	r3, r8
 8006c96:	dcf0      	bgt.n	8006c7a <_printf_float+0x442>
 8006c98:	e6fa      	b.n	8006a90 <_printf_float+0x258>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	f104 0919 	add.w	r9, r4, #25
 8006ca2:	e7f4      	b.n	8006c8e <_printf_float+0x456>

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	bfb8      	it	lt
 8006cb8:	4613      	movlt	r3, r2
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc26      	bgt.n	8006d3a <_printf_common+0x96>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d42b      	bmi.n	8006d54 <_printf_common+0xb0>
 8006cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d01e      	beq.n	8006d48 <_printf_common+0xa4>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	68e5      	ldr	r5, [r4, #12]
 8006d0e:	6832      	ldr	r2, [r6, #0]
 8006d10:	f003 0306 	and.w	r3, r3, #6
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	bf08      	it	eq
 8006d18:	1aad      	subeq	r5, r5, r2
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	bf0c      	ite	eq
 8006d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d24:	2500      	movne	r5, #0
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bfc4      	itt	gt
 8006d2a:	1a9b      	subgt	r3, r3, r2
 8006d2c:	18ed      	addgt	r5, r5, r3
 8006d2e:	2600      	movs	r6, #0
 8006d30:	341a      	adds	r4, #26
 8006d32:	42b5      	cmp	r5, r6
 8006d34:	d11a      	bne.n	8006d6c <_printf_common+0xc8>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e008      	b.n	8006d4c <_printf_common+0xa8>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4638      	mov	r0, r7
 8006d42:	47c0      	blx	r8
 8006d44:	3001      	adds	r0, #1
 8006d46:	d103      	bne.n	8006d50 <_printf_common+0xac>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	3501      	adds	r5, #1
 8006d52:	e7c6      	b.n	8006ce2 <_printf_common+0x3e>
 8006d54:	18e1      	adds	r1, r4, r3
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	2030      	movs	r0, #48	; 0x30
 8006d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d5e:	4422      	add	r2, r4
 8006d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d68:	3302      	adds	r3, #2
 8006d6a:	e7c7      	b.n	8006cfc <_printf_common+0x58>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4622      	mov	r2, r4
 8006d70:	4649      	mov	r1, r9
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0e6      	beq.n	8006d48 <_printf_common+0xa4>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7d9      	b.n	8006d32 <_printf_common+0x8e>
	...

08006d80 <_printf_i>:
 8006d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	7e0f      	ldrb	r7, [r1, #24]
 8006d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d88:	2f78      	cmp	r7, #120	; 0x78
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	469a      	mov	sl, r3
 8006d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d96:	d807      	bhi.n	8006da8 <_printf_i+0x28>
 8006d98:	2f62      	cmp	r7, #98	; 0x62
 8006d9a:	d80a      	bhi.n	8006db2 <_printf_i+0x32>
 8006d9c:	2f00      	cmp	r7, #0
 8006d9e:	f000 80d8 	beq.w	8006f52 <_printf_i+0x1d2>
 8006da2:	2f58      	cmp	r7, #88	; 0x58
 8006da4:	f000 80a3 	beq.w	8006eee <_printf_i+0x16e>
 8006da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db0:	e03a      	b.n	8006e28 <_printf_i+0xa8>
 8006db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006db6:	2b15      	cmp	r3, #21
 8006db8:	d8f6      	bhi.n	8006da8 <_printf_i+0x28>
 8006dba:	a101      	add	r1, pc, #4	; (adr r1, 8006dc0 <_printf_i+0x40>)
 8006dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e2d 	.word	0x08006e2d
 8006dc8:	08006da9 	.word	0x08006da9
 8006dcc:	08006da9 	.word	0x08006da9
 8006dd0:	08006da9 	.word	0x08006da9
 8006dd4:	08006da9 	.word	0x08006da9
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006da9 	.word	0x08006da9
 8006de0:	08006da9 	.word	0x08006da9
 8006de4:	08006da9 	.word	0x08006da9
 8006de8:	08006da9 	.word	0x08006da9
 8006dec:	08006f39 	.word	0x08006f39
 8006df0:	08006e5d 	.word	0x08006e5d
 8006df4:	08006f1b 	.word	0x08006f1b
 8006df8:	08006da9 	.word	0x08006da9
 8006dfc:	08006da9 	.word	0x08006da9
 8006e00:	08006f5b 	.word	0x08006f5b
 8006e04:	08006da9 	.word	0x08006da9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006da9 	.word	0x08006da9
 8006e10:	08006da9 	.word	0x08006da9
 8006e14:	08006f23 	.word	0x08006f23
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0a3      	b.n	8006f74 <_printf_i+0x1f4>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	6829      	ldr	r1, [r5, #0]
 8006e30:	0606      	lsls	r6, r0, #24
 8006e32:	f101 0304 	add.w	r3, r1, #4
 8006e36:	d50a      	bpl.n	8006e4e <_printf_i+0xce>
 8006e38:	680e      	ldr	r6, [r1, #0]
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	da03      	bge.n	8006e48 <_printf_i+0xc8>
 8006e40:	232d      	movs	r3, #45	; 0x2d
 8006e42:	4276      	negs	r6, r6
 8006e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e48:	485e      	ldr	r0, [pc, #376]	; (8006fc4 <_printf_i+0x244>)
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	e019      	b.n	8006e82 <_printf_i+0x102>
 8006e4e:	680e      	ldr	r6, [r1, #0]
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e56:	bf18      	it	ne
 8006e58:	b236      	sxthne	r6, r6
 8006e5a:	e7ef      	b.n	8006e3c <_printf_i+0xbc>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	1d19      	adds	r1, r3, #4
 8006e62:	6029      	str	r1, [r5, #0]
 8006e64:	0601      	lsls	r1, r0, #24
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0xec>
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	e002      	b.n	8006e72 <_printf_i+0xf2>
 8006e6c:	0646      	lsls	r6, r0, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0xe8>
 8006e70:	881e      	ldrh	r6, [r3, #0]
 8006e72:	4854      	ldr	r0, [pc, #336]	; (8006fc4 <_printf_i+0x244>)
 8006e74:	2f6f      	cmp	r7, #111	; 0x6f
 8006e76:	bf0c      	ite	eq
 8006e78:	2308      	moveq	r3, #8
 8006e7a:	230a      	movne	r3, #10
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e82:	6865      	ldr	r5, [r4, #4]
 8006e84:	60a5      	str	r5, [r4, #8]
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	bfa2      	ittt	ge
 8006e8a:	6821      	ldrge	r1, [r4, #0]
 8006e8c:	f021 0104 	bicge.w	r1, r1, #4
 8006e90:	6021      	strge	r1, [r4, #0]
 8006e92:	b90e      	cbnz	r6, 8006e98 <_printf_i+0x118>
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	d04d      	beq.n	8006f34 <_printf_i+0x1b4>
 8006e98:	4615      	mov	r5, r2
 8006e9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea2:	5dc7      	ldrb	r7, [r0, r7]
 8006ea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ea8:	4637      	mov	r7, r6
 8006eaa:	42bb      	cmp	r3, r7
 8006eac:	460e      	mov	r6, r1
 8006eae:	d9f4      	bls.n	8006e9a <_printf_i+0x11a>
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d10b      	bne.n	8006ecc <_printf_i+0x14c>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	07de      	lsls	r6, r3, #31
 8006eb8:	d508      	bpl.n	8006ecc <_printf_i+0x14c>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	6861      	ldr	r1, [r4, #4]
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	bfde      	ittt	le
 8006ec2:	2330      	movle	r3, #48	; 0x30
 8006ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ecc:	1b52      	subs	r2, r2, r5
 8006ece:	6122      	str	r2, [r4, #16]
 8006ed0:	f8cd a000 	str.w	sl, [sp]
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	aa03      	add	r2, sp, #12
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4640      	mov	r0, r8
 8006edc:	f7ff fee2 	bl	8006ca4 <_printf_common>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d14c      	bne.n	8006f7e <_printf_i+0x1fe>
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee8:	b004      	add	sp, #16
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	4835      	ldr	r0, [pc, #212]	; (8006fc4 <_printf_i+0x244>)
 8006ef0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ef4:	6829      	ldr	r1, [r5, #0]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006efc:	6029      	str	r1, [r5, #0]
 8006efe:	061d      	lsls	r5, r3, #24
 8006f00:	d514      	bpl.n	8006f2c <_printf_i+0x1ac>
 8006f02:	07df      	lsls	r7, r3, #31
 8006f04:	bf44      	itt	mi
 8006f06:	f043 0320 	orrmi.w	r3, r3, #32
 8006f0a:	6023      	strmi	r3, [r4, #0]
 8006f0c:	b91e      	cbnz	r6, 8006f16 <_printf_i+0x196>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	f023 0320 	bic.w	r3, r3, #32
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	2310      	movs	r3, #16
 8006f18:	e7b0      	b.n	8006e7c <_printf_i+0xfc>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	f043 0320 	orr.w	r3, r3, #32
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	2378      	movs	r3, #120	; 0x78
 8006f24:	4828      	ldr	r0, [pc, #160]	; (8006fc8 <_printf_i+0x248>)
 8006f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f2a:	e7e3      	b.n	8006ef4 <_printf_i+0x174>
 8006f2c:	0659      	lsls	r1, r3, #25
 8006f2e:	bf48      	it	mi
 8006f30:	b2b6      	uxthmi	r6, r6
 8006f32:	e7e6      	b.n	8006f02 <_printf_i+0x182>
 8006f34:	4615      	mov	r5, r2
 8006f36:	e7bb      	b.n	8006eb0 <_printf_i+0x130>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	6826      	ldr	r6, [r4, #0]
 8006f3c:	6961      	ldr	r1, [r4, #20]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6028      	str	r0, [r5, #0]
 8006f42:	0635      	lsls	r5, r6, #24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	d501      	bpl.n	8006f4c <_printf_i+0x1cc>
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_printf_i+0x1d2>
 8006f4c:	0670      	lsls	r0, r6, #25
 8006f4e:	d5fb      	bpl.n	8006f48 <_printf_i+0x1c8>
 8006f50:	8019      	strh	r1, [r3, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	4615      	mov	r5, r2
 8006f58:	e7ba      	b.n	8006ed0 <_printf_i+0x150>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	1d1a      	adds	r2, r3, #4
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	6862      	ldr	r2, [r4, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7f9 f93a 	bl	80001e0 <memchr>
 8006f6c:	b108      	cbz	r0, 8006f72 <_printf_i+0x1f2>
 8006f6e:	1b40      	subs	r0, r0, r5
 8006f70:	6060      	str	r0, [r4, #4]
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7c:	e7a8      	b.n	8006ed0 <_printf_i+0x150>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d0ab      	beq.n	8006ee4 <_printf_i+0x164>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	d413      	bmi.n	8006fba <_printf_i+0x23a>
 8006f92:	68e0      	ldr	r0, [r4, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bfb8      	it	lt
 8006f9a:	4618      	movlt	r0, r3
 8006f9c:	e7a4      	b.n	8006ee8 <_printf_i+0x168>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d09b      	beq.n	8006ee4 <_printf_i+0x164>
 8006fac:	3501      	adds	r5, #1
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	9903      	ldr	r1, [sp, #12]
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dcf2      	bgt.n	8006f9e <_printf_i+0x21e>
 8006fb8:	e7eb      	b.n	8006f92 <_printf_i+0x212>
 8006fba:	2500      	movs	r5, #0
 8006fbc:	f104 0619 	add.w	r6, r4, #25
 8006fc0:	e7f5      	b.n	8006fae <_printf_i+0x22e>
 8006fc2:	bf00      	nop
 8006fc4:	0800aa5a 	.word	0x0800aa5a
 8006fc8:	0800aa6b 	.word	0x0800aa6b

08006fcc <_sbrk_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	; (8006fe8 <_sbrk_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fb fe7c 	bl	8002cd4 <_sbrk>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_sbrk_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_sbrk_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	200004a4 	.word	0x200004a4

08006fec <siprintf>:
 8006fec:	b40e      	push	{r1, r2, r3}
 8006fee:	b500      	push	{lr}
 8006ff0:	b09c      	sub	sp, #112	; 0x70
 8006ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ff4:	9002      	str	r0, [sp, #8]
 8006ff6:	9006      	str	r0, [sp, #24]
 8006ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ffc:	4809      	ldr	r0, [pc, #36]	; (8007024 <siprintf+0x38>)
 8006ffe:	9107      	str	r1, [sp, #28]
 8007000:	9104      	str	r1, [sp, #16]
 8007002:	4909      	ldr	r1, [pc, #36]	; (8007028 <siprintf+0x3c>)
 8007004:	f853 2b04 	ldr.w	r2, [r3], #4
 8007008:	9105      	str	r1, [sp, #20]
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	a902      	add	r1, sp, #8
 8007010:	f001 fd72 	bl	8008af8 <_svfiprintf_r>
 8007014:	9b02      	ldr	r3, [sp, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	b01c      	add	sp, #112	; 0x70
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b003      	add	sp, #12
 8007022:	4770      	bx	lr
 8007024:	2000010c 	.word	0x2000010c
 8007028:	ffff0208 	.word	0xffff0208

0800702c <__sread>:
 800702c:	b510      	push	{r4, lr}
 800702e:	460c      	mov	r4, r1
 8007030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007034:	f001 ffba 	bl	8008fac <_read_r>
 8007038:	2800      	cmp	r0, #0
 800703a:	bfab      	itete	ge
 800703c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800703e:	89a3      	ldrhlt	r3, [r4, #12]
 8007040:	181b      	addge	r3, r3, r0
 8007042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007046:	bfac      	ite	ge
 8007048:	6563      	strge	r3, [r4, #84]	; 0x54
 800704a:	81a3      	strhlt	r3, [r4, #12]
 800704c:	bd10      	pop	{r4, pc}

0800704e <__swrite>:
 800704e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	461f      	mov	r7, r3
 8007054:	898b      	ldrh	r3, [r1, #12]
 8007056:	05db      	lsls	r3, r3, #23
 8007058:	4605      	mov	r5, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4616      	mov	r6, r2
 800705e:	d505      	bpl.n	800706c <__swrite+0x1e>
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	2302      	movs	r3, #2
 8007066:	2200      	movs	r2, #0
 8007068:	f001 f878 	bl	800815c <_lseek_r>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	4632      	mov	r2, r6
 800707a:	463b      	mov	r3, r7
 800707c:	4628      	mov	r0, r5
 800707e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	f000 b869 	b.w	8007158 <_write_r>

08007086 <__sseek>:
 8007086:	b510      	push	{r4, lr}
 8007088:	460c      	mov	r4, r1
 800708a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708e:	f001 f865 	bl	800815c <_lseek_r>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	bf15      	itete	ne
 8007098:	6560      	strne	r0, [r4, #84]	; 0x54
 800709a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800709e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070a2:	81a3      	strheq	r3, [r4, #12]
 80070a4:	bf18      	it	ne
 80070a6:	81a3      	strhne	r3, [r4, #12]
 80070a8:	bd10      	pop	{r4, pc}

080070aa <__sclose>:
 80070aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ae:	f000 b8f1 	b.w	8007294 <_close_r>
	...

080070b4 <__swbuf_r>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	460e      	mov	r6, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	4605      	mov	r5, r0
 80070bc:	b118      	cbz	r0, 80070c6 <__swbuf_r+0x12>
 80070be:	6983      	ldr	r3, [r0, #24]
 80070c0:	b90b      	cbnz	r3, 80070c6 <__swbuf_r+0x12>
 80070c2:	f7ff f9a9 	bl	8006418 <__sinit>
 80070c6:	4b21      	ldr	r3, [pc, #132]	; (800714c <__swbuf_r+0x98>)
 80070c8:	429c      	cmp	r4, r3
 80070ca:	d12b      	bne.n	8007124 <__swbuf_r+0x70>
 80070cc:	686c      	ldr	r4, [r5, #4]
 80070ce:	69a3      	ldr	r3, [r4, #24]
 80070d0:	60a3      	str	r3, [r4, #8]
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	071a      	lsls	r2, r3, #28
 80070d6:	d52f      	bpl.n	8007138 <__swbuf_r+0x84>
 80070d8:	6923      	ldr	r3, [r4, #16]
 80070da:	b36b      	cbz	r3, 8007138 <__swbuf_r+0x84>
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	1ac0      	subs	r0, r0, r3
 80070e2:	6963      	ldr	r3, [r4, #20]
 80070e4:	b2f6      	uxtb	r6, r6
 80070e6:	4283      	cmp	r3, r0
 80070e8:	4637      	mov	r7, r6
 80070ea:	dc04      	bgt.n	80070f6 <__swbuf_r+0x42>
 80070ec:	4621      	mov	r1, r4
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 ffe2 	bl	80080b8 <_fflush_r>
 80070f4:	bb30      	cbnz	r0, 8007144 <__swbuf_r+0x90>
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	60a3      	str	r3, [r4, #8]
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	6022      	str	r2, [r4, #0]
 8007102:	701e      	strb	r6, [r3, #0]
 8007104:	6963      	ldr	r3, [r4, #20]
 8007106:	3001      	adds	r0, #1
 8007108:	4283      	cmp	r3, r0
 800710a:	d004      	beq.n	8007116 <__swbuf_r+0x62>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	07db      	lsls	r3, r3, #31
 8007110:	d506      	bpl.n	8007120 <__swbuf_r+0x6c>
 8007112:	2e0a      	cmp	r6, #10
 8007114:	d104      	bne.n	8007120 <__swbuf_r+0x6c>
 8007116:	4621      	mov	r1, r4
 8007118:	4628      	mov	r0, r5
 800711a:	f000 ffcd 	bl	80080b8 <_fflush_r>
 800711e:	b988      	cbnz	r0, 8007144 <__swbuf_r+0x90>
 8007120:	4638      	mov	r0, r7
 8007122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <__swbuf_r+0x9c>)
 8007126:	429c      	cmp	r4, r3
 8007128:	d101      	bne.n	800712e <__swbuf_r+0x7a>
 800712a:	68ac      	ldr	r4, [r5, #8]
 800712c:	e7cf      	b.n	80070ce <__swbuf_r+0x1a>
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <__swbuf_r+0xa0>)
 8007130:	429c      	cmp	r4, r3
 8007132:	bf08      	it	eq
 8007134:	68ec      	ldreq	r4, [r5, #12]
 8007136:	e7ca      	b.n	80070ce <__swbuf_r+0x1a>
 8007138:	4621      	mov	r1, r4
 800713a:	4628      	mov	r0, r5
 800713c:	f000 f81e 	bl	800717c <__swsetup_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	d0cb      	beq.n	80070dc <__swbuf_r+0x28>
 8007144:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007148:	e7ea      	b.n	8007120 <__swbuf_r+0x6c>
 800714a:	bf00      	nop
 800714c:	0800aa04 	.word	0x0800aa04
 8007150:	0800aa24 	.word	0x0800aa24
 8007154:	0800a9e4 	.word	0x0800a9e4

08007158 <_write_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	; (8007178 <_write_r+0x20>)
 800715c:	4604      	mov	r4, r0
 800715e:	4608      	mov	r0, r1
 8007160:	4611      	mov	r1, r2
 8007162:	2200      	movs	r2, #0
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7ff f853 	bl	8006212 <_write>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_write_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_write_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	200004a4 	.word	0x200004a4

0800717c <__swsetup_r>:
 800717c:	4b32      	ldr	r3, [pc, #200]	; (8007248 <__swsetup_r+0xcc>)
 800717e:	b570      	push	{r4, r5, r6, lr}
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	4606      	mov	r6, r0
 8007184:	460c      	mov	r4, r1
 8007186:	b125      	cbz	r5, 8007192 <__swsetup_r+0x16>
 8007188:	69ab      	ldr	r3, [r5, #24]
 800718a:	b913      	cbnz	r3, 8007192 <__swsetup_r+0x16>
 800718c:	4628      	mov	r0, r5
 800718e:	f7ff f943 	bl	8006418 <__sinit>
 8007192:	4b2e      	ldr	r3, [pc, #184]	; (800724c <__swsetup_r+0xd0>)
 8007194:	429c      	cmp	r4, r3
 8007196:	d10f      	bne.n	80071b8 <__swsetup_r+0x3c>
 8007198:	686c      	ldr	r4, [r5, #4]
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a0:	0719      	lsls	r1, r3, #28
 80071a2:	d42c      	bmi.n	80071fe <__swsetup_r+0x82>
 80071a4:	06dd      	lsls	r5, r3, #27
 80071a6:	d411      	bmi.n	80071cc <__swsetup_r+0x50>
 80071a8:	2309      	movs	r3, #9
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b6:	e03e      	b.n	8007236 <__swsetup_r+0xba>
 80071b8:	4b25      	ldr	r3, [pc, #148]	; (8007250 <__swsetup_r+0xd4>)
 80071ba:	429c      	cmp	r4, r3
 80071bc:	d101      	bne.n	80071c2 <__swsetup_r+0x46>
 80071be:	68ac      	ldr	r4, [r5, #8]
 80071c0:	e7eb      	b.n	800719a <__swsetup_r+0x1e>
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <__swsetup_r+0xd8>)
 80071c4:	429c      	cmp	r4, r3
 80071c6:	bf08      	it	eq
 80071c8:	68ec      	ldreq	r4, [r5, #12]
 80071ca:	e7e6      	b.n	800719a <__swsetup_r+0x1e>
 80071cc:	0758      	lsls	r0, r3, #29
 80071ce:	d512      	bpl.n	80071f6 <__swsetup_r+0x7a>
 80071d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071d2:	b141      	cbz	r1, 80071e6 <__swsetup_r+0x6a>
 80071d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071d8:	4299      	cmp	r1, r3
 80071da:	d002      	beq.n	80071e2 <__swsetup_r+0x66>
 80071dc:	4630      	mov	r0, r6
 80071de:	f001 fbe3 	bl	80089a8 <_free_r>
 80071e2:	2300      	movs	r3, #0
 80071e4:	6363      	str	r3, [r4, #52]	; 0x34
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	2300      	movs	r3, #0
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f043 0308 	orr.w	r3, r3, #8
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	b94b      	cbnz	r3, 8007216 <__swsetup_r+0x9a>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720c:	d003      	beq.n	8007216 <__swsetup_r+0x9a>
 800720e:	4621      	mov	r1, r4
 8007210:	4630      	mov	r0, r6
 8007212:	f000 ffdb 	bl	80081cc <__smakebuf_r>
 8007216:	89a0      	ldrh	r0, [r4, #12]
 8007218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800721c:	f010 0301 	ands.w	r3, r0, #1
 8007220:	d00a      	beq.n	8007238 <__swsetup_r+0xbc>
 8007222:	2300      	movs	r3, #0
 8007224:	60a3      	str	r3, [r4, #8]
 8007226:	6963      	ldr	r3, [r4, #20]
 8007228:	425b      	negs	r3, r3
 800722a:	61a3      	str	r3, [r4, #24]
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	b943      	cbnz	r3, 8007242 <__swsetup_r+0xc6>
 8007230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007234:	d1ba      	bne.n	80071ac <__swsetup_r+0x30>
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	0781      	lsls	r1, r0, #30
 800723a:	bf58      	it	pl
 800723c:	6963      	ldrpl	r3, [r4, #20]
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	e7f4      	b.n	800722c <__swsetup_r+0xb0>
 8007242:	2000      	movs	r0, #0
 8007244:	e7f7      	b.n	8007236 <__swsetup_r+0xba>
 8007246:	bf00      	nop
 8007248:	2000010c 	.word	0x2000010c
 800724c:	0800aa04 	.word	0x0800aa04
 8007250:	0800aa24 	.word	0x0800aa24
 8007254:	0800a9e4 	.word	0x0800a9e4

08007258 <__assert_func>:
 8007258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800725a:	4614      	mov	r4, r2
 800725c:	461a      	mov	r2, r3
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <__assert_func+0x2c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4605      	mov	r5, r0
 8007264:	68d8      	ldr	r0, [r3, #12]
 8007266:	b14c      	cbz	r4, 800727c <__assert_func+0x24>
 8007268:	4b07      	ldr	r3, [pc, #28]	; (8007288 <__assert_func+0x30>)
 800726a:	9100      	str	r1, [sp, #0]
 800726c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007270:	4906      	ldr	r1, [pc, #24]	; (800728c <__assert_func+0x34>)
 8007272:	462b      	mov	r3, r5
 8007274:	f000 ff5c 	bl	8008130 <fiprintf>
 8007278:	f001 feaa 	bl	8008fd0 <abort>
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <__assert_func+0x38>)
 800727e:	461c      	mov	r4, r3
 8007280:	e7f3      	b.n	800726a <__assert_func+0x12>
 8007282:	bf00      	nop
 8007284:	2000010c 	.word	0x2000010c
 8007288:	0800aa7c 	.word	0x0800aa7c
 800728c:	0800aa89 	.word	0x0800aa89
 8007290:	0800aab7 	.word	0x0800aab7

08007294 <_close_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d06      	ldr	r5, [pc, #24]	; (80072b0 <_close_r+0x1c>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7fe ffe8 	bl	8006274 <_close>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_close_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_close_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	200004a4 	.word	0x200004a4

080072b4 <quorem>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	6903      	ldr	r3, [r0, #16]
 80072ba:	690c      	ldr	r4, [r1, #16]
 80072bc:	42a3      	cmp	r3, r4
 80072be:	4607      	mov	r7, r0
 80072c0:	f2c0 8081 	blt.w	80073c6 <quorem+0x112>
 80072c4:	3c01      	subs	r4, #1
 80072c6:	f101 0814 	add.w	r8, r1, #20
 80072ca:	f100 0514 	add.w	r5, r0, #20
 80072ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072dc:	3301      	adds	r3, #1
 80072de:	429a      	cmp	r2, r3
 80072e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80072ec:	d331      	bcc.n	8007352 <quorem+0x9e>
 80072ee:	f04f 0e00 	mov.w	lr, #0
 80072f2:	4640      	mov	r0, r8
 80072f4:	46ac      	mov	ip, r5
 80072f6:	46f2      	mov	sl, lr
 80072f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80072fc:	b293      	uxth	r3, r2
 80072fe:	fb06 e303 	mla	r3, r6, r3, lr
 8007302:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007306:	b29b      	uxth	r3, r3
 8007308:	ebaa 0303 	sub.w	r3, sl, r3
 800730c:	f8dc a000 	ldr.w	sl, [ip]
 8007310:	0c12      	lsrs	r2, r2, #16
 8007312:	fa13 f38a 	uxtah	r3, r3, sl
 8007316:	fb06 e202 	mla	r2, r6, r2, lr
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	9b00      	ldr	r3, [sp, #0]
 800731e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007322:	b292      	uxth	r2, r2
 8007324:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800732c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007330:	4581      	cmp	r9, r0
 8007332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007336:	f84c 3b04 	str.w	r3, [ip], #4
 800733a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800733e:	d2db      	bcs.n	80072f8 <quorem+0x44>
 8007340:	f855 300b 	ldr.w	r3, [r5, fp]
 8007344:	b92b      	cbnz	r3, 8007352 <quorem+0x9e>
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	3b04      	subs	r3, #4
 800734a:	429d      	cmp	r5, r3
 800734c:	461a      	mov	r2, r3
 800734e:	d32e      	bcc.n	80073ae <quorem+0xfa>
 8007350:	613c      	str	r4, [r7, #16]
 8007352:	4638      	mov	r0, r7
 8007354:	f001 fa10 	bl	8008778 <__mcmp>
 8007358:	2800      	cmp	r0, #0
 800735a:	db24      	blt.n	80073a6 <quorem+0xf2>
 800735c:	3601      	adds	r6, #1
 800735e:	4628      	mov	r0, r5
 8007360:	f04f 0c00 	mov.w	ip, #0
 8007364:	f858 2b04 	ldr.w	r2, [r8], #4
 8007368:	f8d0 e000 	ldr.w	lr, [r0]
 800736c:	b293      	uxth	r3, r2
 800736e:	ebac 0303 	sub.w	r3, ip, r3
 8007372:	0c12      	lsrs	r2, r2, #16
 8007374:	fa13 f38e 	uxtah	r3, r3, lr
 8007378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800737c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007380:	b29b      	uxth	r3, r3
 8007382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007386:	45c1      	cmp	r9, r8
 8007388:	f840 3b04 	str.w	r3, [r0], #4
 800738c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007390:	d2e8      	bcs.n	8007364 <quorem+0xb0>
 8007392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800739a:	b922      	cbnz	r2, 80073a6 <quorem+0xf2>
 800739c:	3b04      	subs	r3, #4
 800739e:	429d      	cmp	r5, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	d30a      	bcc.n	80073ba <quorem+0x106>
 80073a4:	613c      	str	r4, [r7, #16]
 80073a6:	4630      	mov	r0, r6
 80073a8:	b003      	add	sp, #12
 80073aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	3b04      	subs	r3, #4
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	d1cc      	bne.n	8007350 <quorem+0x9c>
 80073b6:	3c01      	subs	r4, #1
 80073b8:	e7c7      	b.n	800734a <quorem+0x96>
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	3b04      	subs	r3, #4
 80073be:	2a00      	cmp	r2, #0
 80073c0:	d1f0      	bne.n	80073a4 <quorem+0xf0>
 80073c2:	3c01      	subs	r4, #1
 80073c4:	e7eb      	b.n	800739e <quorem+0xea>
 80073c6:	2000      	movs	r0, #0
 80073c8:	e7ee      	b.n	80073a8 <quorem+0xf4>
 80073ca:	0000      	movs	r0, r0
 80073cc:	0000      	movs	r0, r0
	...

080073d0 <_dtoa_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	ed2d 8b04 	vpush	{d8-d9}
 80073d8:	ec57 6b10 	vmov	r6, r7, d0
 80073dc:	b093      	sub	sp, #76	; 0x4c
 80073de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073e4:	9106      	str	r1, [sp, #24]
 80073e6:	ee10 aa10 	vmov	sl, s0
 80073ea:	4604      	mov	r4, r0
 80073ec:	9209      	str	r2, [sp, #36]	; 0x24
 80073ee:	930c      	str	r3, [sp, #48]	; 0x30
 80073f0:	46bb      	mov	fp, r7
 80073f2:	b975      	cbnz	r5, 8007412 <_dtoa_r+0x42>
 80073f4:	2010      	movs	r0, #16
 80073f6:	f000 ff29 	bl	800824c <malloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6260      	str	r0, [r4, #36]	; 0x24
 80073fe:	b920      	cbnz	r0, 800740a <_dtoa_r+0x3a>
 8007400:	4ba7      	ldr	r3, [pc, #668]	; (80076a0 <_dtoa_r+0x2d0>)
 8007402:	21ea      	movs	r1, #234	; 0xea
 8007404:	48a7      	ldr	r0, [pc, #668]	; (80076a4 <_dtoa_r+0x2d4>)
 8007406:	f7ff ff27 	bl	8007258 <__assert_func>
 800740a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800740e:	6005      	str	r5, [r0, #0]
 8007410:	60c5      	str	r5, [r0, #12]
 8007412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	b151      	cbz	r1, 800742e <_dtoa_r+0x5e>
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	604a      	str	r2, [r1, #4]
 800741c:	2301      	movs	r3, #1
 800741e:	4093      	lsls	r3, r2
 8007420:	608b      	str	r3, [r1, #8]
 8007422:	4620      	mov	r0, r4
 8007424:	f000 ff66 	bl	80082f4 <_Bfree>
 8007428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	1e3b      	subs	r3, r7, #0
 8007430:	bfaa      	itet	ge
 8007432:	2300      	movge	r3, #0
 8007434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007438:	f8c8 3000 	strge.w	r3, [r8]
 800743c:	4b9a      	ldr	r3, [pc, #616]	; (80076a8 <_dtoa_r+0x2d8>)
 800743e:	bfbc      	itt	lt
 8007440:	2201      	movlt	r2, #1
 8007442:	f8c8 2000 	strlt.w	r2, [r8]
 8007446:	ea33 030b 	bics.w	r3, r3, fp
 800744a:	d11b      	bne.n	8007484 <_dtoa_r+0xb4>
 800744c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800744e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007458:	4333      	orrs	r3, r6
 800745a:	f000 8592 	beq.w	8007f82 <_dtoa_r+0xbb2>
 800745e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007460:	b963      	cbnz	r3, 800747c <_dtoa_r+0xac>
 8007462:	4b92      	ldr	r3, [pc, #584]	; (80076ac <_dtoa_r+0x2dc>)
 8007464:	e022      	b.n	80074ac <_dtoa_r+0xdc>
 8007466:	4b92      	ldr	r3, [pc, #584]	; (80076b0 <_dtoa_r+0x2e0>)
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	3308      	adds	r3, #8
 800746c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	9801      	ldr	r0, [sp, #4]
 8007472:	b013      	add	sp, #76	; 0x4c
 8007474:	ecbd 8b04 	vpop	{d8-d9}
 8007478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747c:	4b8b      	ldr	r3, [pc, #556]	; (80076ac <_dtoa_r+0x2dc>)
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	3303      	adds	r3, #3
 8007482:	e7f3      	b.n	800746c <_dtoa_r+0x9c>
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4650      	mov	r0, sl
 800748a:	4659      	mov	r1, fp
 800748c:	f7f9 fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007490:	ec4b ab19 	vmov	d9, sl, fp
 8007494:	4680      	mov	r8, r0
 8007496:	b158      	cbz	r0, 80074b0 <_dtoa_r+0xe0>
 8007498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800749a:	2301      	movs	r3, #1
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 856b 	beq.w	8007f7c <_dtoa_r+0xbac>
 80074a6:	4883      	ldr	r0, [pc, #524]	; (80076b4 <_dtoa_r+0x2e4>)
 80074a8:	6018      	str	r0, [r3, #0]
 80074aa:	1e43      	subs	r3, r0, #1
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	e7df      	b.n	8007470 <_dtoa_r+0xa0>
 80074b0:	ec4b ab10 	vmov	d0, sl, fp
 80074b4:	aa10      	add	r2, sp, #64	; 0x40
 80074b6:	a911      	add	r1, sp, #68	; 0x44
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 fa03 	bl	80088c4 <__d2b>
 80074be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074c2:	ee08 0a10 	vmov	s16, r0
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	f000 8084 	beq.w	80075d4 <_dtoa_r+0x204>
 80074cc:	ee19 3a90 	vmov	r3, s19
 80074d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074d8:	4656      	mov	r6, sl
 80074da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074e6:	4b74      	ldr	r3, [pc, #464]	; (80076b8 <_dtoa_r+0x2e8>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	4630      	mov	r0, r6
 80074ec:	4639      	mov	r1, r7
 80074ee:	f7f8 fecb 	bl	8000288 <__aeabi_dsub>
 80074f2:	a365      	add	r3, pc, #404	; (adr r3, 8007688 <_dtoa_r+0x2b8>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f9 f87e 	bl	80005f8 <__aeabi_dmul>
 80074fc:	a364      	add	r3, pc, #400	; (adr r3, 8007690 <_dtoa_r+0x2c0>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 fec3 	bl	800028c <__adddf3>
 8007506:	4606      	mov	r6, r0
 8007508:	4628      	mov	r0, r5
 800750a:	460f      	mov	r7, r1
 800750c:	f7f9 f80a 	bl	8000524 <__aeabi_i2d>
 8007510:	a361      	add	r3, pc, #388	; (adr r3, 8007698 <_dtoa_r+0x2c8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f86f 	bl	80005f8 <__aeabi_dmul>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f8 feb3 	bl	800028c <__adddf3>
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
 800752a:	f7f9 fb15 	bl	8000b58 <__aeabi_d2iz>
 800752e:	2200      	movs	r2, #0
 8007530:	9000      	str	r0, [sp, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 fad0 	bl	8000adc <__aeabi_dcmplt>
 800753c:	b150      	cbz	r0, 8007554 <_dtoa_r+0x184>
 800753e:	9800      	ldr	r0, [sp, #0]
 8007540:	f7f8 fff0 	bl	8000524 <__aeabi_i2d>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	f7f9 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800754c:	b910      	cbnz	r0, 8007554 <_dtoa_r+0x184>
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	3b01      	subs	r3, #1
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	9b00      	ldr	r3, [sp, #0]
 8007556:	2b16      	cmp	r3, #22
 8007558:	d85a      	bhi.n	8007610 <_dtoa_r+0x240>
 800755a:	9a00      	ldr	r2, [sp, #0]
 800755c:	4b57      	ldr	r3, [pc, #348]	; (80076bc <_dtoa_r+0x2ec>)
 800755e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	ec51 0b19 	vmov	r0, r1, d9
 800756a:	f7f9 fab7 	bl	8000adc <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d050      	beq.n	8007614 <_dtoa_r+0x244>
 8007572:	9b00      	ldr	r3, [sp, #0]
 8007574:	3b01      	subs	r3, #1
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	930b      	str	r3, [sp, #44]	; 0x2c
 800757c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800757e:	1b5d      	subs	r5, r3, r5
 8007580:	1e6b      	subs	r3, r5, #1
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	bf45      	ittet	mi
 8007586:	f1c5 0301 	rsbmi	r3, r5, #1
 800758a:	9304      	strmi	r3, [sp, #16]
 800758c:	2300      	movpl	r3, #0
 800758e:	2300      	movmi	r3, #0
 8007590:	bf4c      	ite	mi
 8007592:	9305      	strmi	r3, [sp, #20]
 8007594:	9304      	strpl	r3, [sp, #16]
 8007596:	9b00      	ldr	r3, [sp, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	db3d      	blt.n	8007618 <_dtoa_r+0x248>
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	9a00      	ldr	r2, [sp, #0]
 80075a0:	920a      	str	r2, [sp, #40]	; 0x28
 80075a2:	4413      	add	r3, r2
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	2300      	movs	r3, #0
 80075a8:	9307      	str	r3, [sp, #28]
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	2b09      	cmp	r3, #9
 80075ae:	f200 8089 	bhi.w	80076c4 <_dtoa_r+0x2f4>
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	bfc4      	itt	gt
 80075b6:	3b04      	subgt	r3, #4
 80075b8:	9306      	strgt	r3, [sp, #24]
 80075ba:	9b06      	ldr	r3, [sp, #24]
 80075bc:	f1a3 0302 	sub.w	r3, r3, #2
 80075c0:	bfcc      	ite	gt
 80075c2:	2500      	movgt	r5, #0
 80075c4:	2501      	movle	r5, #1
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f200 8087 	bhi.w	80076da <_dtoa_r+0x30a>
 80075cc:	e8df f003 	tbb	[pc, r3]
 80075d0:	59383a2d 	.word	0x59383a2d
 80075d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075d8:	441d      	add	r5, r3
 80075da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075de:	2b20      	cmp	r3, #32
 80075e0:	bfc1      	itttt	gt
 80075e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80075ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075f2:	bfda      	itte	le
 80075f4:	f1c3 0320 	rsble	r3, r3, #32
 80075f8:	fa06 f003 	lslle.w	r0, r6, r3
 80075fc:	4318      	orrgt	r0, r3
 80075fe:	f7f8 ff81 	bl	8000504 <__aeabi_ui2d>
 8007602:	2301      	movs	r3, #1
 8007604:	4606      	mov	r6, r0
 8007606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800760a:	3d01      	subs	r5, #1
 800760c:	930e      	str	r3, [sp, #56]	; 0x38
 800760e:	e76a      	b.n	80074e6 <_dtoa_r+0x116>
 8007610:	2301      	movs	r3, #1
 8007612:	e7b2      	b.n	800757a <_dtoa_r+0x1aa>
 8007614:	900b      	str	r0, [sp, #44]	; 0x2c
 8007616:	e7b1      	b.n	800757c <_dtoa_r+0x1ac>
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	9a00      	ldr	r2, [sp, #0]
 800761c:	1a9b      	subs	r3, r3, r2
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	4253      	negs	r3, r2
 8007622:	9307      	str	r3, [sp, #28]
 8007624:	2300      	movs	r3, #0
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	e7bf      	b.n	80075aa <_dtoa_r+0x1da>
 800762a:	2300      	movs	r3, #0
 800762c:	9308      	str	r3, [sp, #32]
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc55      	bgt.n	80076e0 <_dtoa_r+0x310>
 8007634:	2301      	movs	r3, #1
 8007636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800763a:	461a      	mov	r2, r3
 800763c:	9209      	str	r2, [sp, #36]	; 0x24
 800763e:	e00c      	b.n	800765a <_dtoa_r+0x28a>
 8007640:	2301      	movs	r3, #1
 8007642:	e7f3      	b.n	800762c <_dtoa_r+0x25c>
 8007644:	2300      	movs	r3, #0
 8007646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007648:	9308      	str	r3, [sp, #32]
 800764a:	9b00      	ldr	r3, [sp, #0]
 800764c:	4413      	add	r3, r2
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	3301      	adds	r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	bfb8      	it	lt
 8007658:	2301      	movlt	r3, #1
 800765a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800765c:	2200      	movs	r2, #0
 800765e:	6042      	str	r2, [r0, #4]
 8007660:	2204      	movs	r2, #4
 8007662:	f102 0614 	add.w	r6, r2, #20
 8007666:	429e      	cmp	r6, r3
 8007668:	6841      	ldr	r1, [r0, #4]
 800766a:	d93d      	bls.n	80076e8 <_dtoa_r+0x318>
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fe01 	bl	8008274 <_Balloc>
 8007672:	9001      	str	r0, [sp, #4]
 8007674:	2800      	cmp	r0, #0
 8007676:	d13b      	bne.n	80076f0 <_dtoa_r+0x320>
 8007678:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <_dtoa_r+0x2f0>)
 800767a:	4602      	mov	r2, r0
 800767c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007680:	e6c0      	b.n	8007404 <_dtoa_r+0x34>
 8007682:	2301      	movs	r3, #1
 8007684:	e7df      	b.n	8007646 <_dtoa_r+0x276>
 8007686:	bf00      	nop
 8007688:	636f4361 	.word	0x636f4361
 800768c:	3fd287a7 	.word	0x3fd287a7
 8007690:	8b60c8b3 	.word	0x8b60c8b3
 8007694:	3fc68a28 	.word	0x3fc68a28
 8007698:	509f79fb 	.word	0x509f79fb
 800769c:	3fd34413 	.word	0x3fd34413
 80076a0:	0800aac5 	.word	0x0800aac5
 80076a4:	0800aadc 	.word	0x0800aadc
 80076a8:	7ff00000 	.word	0x7ff00000
 80076ac:	0800aac1 	.word	0x0800aac1
 80076b0:	0800aab8 	.word	0x0800aab8
 80076b4:	0800aa59 	.word	0x0800aa59
 80076b8:	3ff80000 	.word	0x3ff80000
 80076bc:	0800abd0 	.word	0x0800abd0
 80076c0:	0800ab37 	.word	0x0800ab37
 80076c4:	2501      	movs	r5, #1
 80076c6:	2300      	movs	r3, #0
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	9508      	str	r5, [sp, #32]
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2312      	movs	r3, #18
 80076d8:	e7b0      	b.n	800763c <_dtoa_r+0x26c>
 80076da:	2301      	movs	r3, #1
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	e7f5      	b.n	80076cc <_dtoa_r+0x2fc>
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076e6:	e7b8      	b.n	800765a <_dtoa_r+0x28a>
 80076e8:	3101      	adds	r1, #1
 80076ea:	6041      	str	r1, [r0, #4]
 80076ec:	0052      	lsls	r2, r2, #1
 80076ee:	e7b8      	b.n	8007662 <_dtoa_r+0x292>
 80076f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f2:	9a01      	ldr	r2, [sp, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	2b0e      	cmp	r3, #14
 80076fa:	f200 809d 	bhi.w	8007838 <_dtoa_r+0x468>
 80076fe:	2d00      	cmp	r5, #0
 8007700:	f000 809a 	beq.w	8007838 <_dtoa_r+0x468>
 8007704:	9b00      	ldr	r3, [sp, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd32      	ble.n	8007770 <_dtoa_r+0x3a0>
 800770a:	4ab7      	ldr	r2, [pc, #732]	; (80079e8 <_dtoa_r+0x618>)
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	05d8      	lsls	r0, r3, #23
 800771c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007720:	d516      	bpl.n	8007750 <_dtoa_r+0x380>
 8007722:	4bb2      	ldr	r3, [pc, #712]	; (80079ec <_dtoa_r+0x61c>)
 8007724:	ec51 0b19 	vmov	r0, r1, d9
 8007728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800772c:	f7f9 f88e 	bl	800084c <__aeabi_ddiv>
 8007730:	f007 070f 	and.w	r7, r7, #15
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	2503      	movs	r5, #3
 800773a:	4eac      	ldr	r6, [pc, #688]	; (80079ec <_dtoa_r+0x61c>)
 800773c:	b957      	cbnz	r7, 8007754 <_dtoa_r+0x384>
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	4650      	mov	r0, sl
 8007744:	4659      	mov	r1, fp
 8007746:	f7f9 f881 	bl	800084c <__aeabi_ddiv>
 800774a:	4682      	mov	sl, r0
 800774c:	468b      	mov	fp, r1
 800774e:	e028      	b.n	80077a2 <_dtoa_r+0x3d2>
 8007750:	2502      	movs	r5, #2
 8007752:	e7f2      	b.n	800773a <_dtoa_r+0x36a>
 8007754:	07f9      	lsls	r1, r7, #31
 8007756:	d508      	bpl.n	800776a <_dtoa_r+0x39a>
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007760:	f7f8 ff4a 	bl	80005f8 <__aeabi_dmul>
 8007764:	3501      	adds	r5, #1
 8007766:	4680      	mov	r8, r0
 8007768:	4689      	mov	r9, r1
 800776a:	107f      	asrs	r7, r7, #1
 800776c:	3608      	adds	r6, #8
 800776e:	e7e5      	b.n	800773c <_dtoa_r+0x36c>
 8007770:	f000 809b 	beq.w	80078aa <_dtoa_r+0x4da>
 8007774:	9b00      	ldr	r3, [sp, #0]
 8007776:	4f9d      	ldr	r7, [pc, #628]	; (80079ec <_dtoa_r+0x61c>)
 8007778:	425e      	negs	r6, r3
 800777a:	4b9b      	ldr	r3, [pc, #620]	; (80079e8 <_dtoa_r+0x618>)
 800777c:	f006 020f 	and.w	r2, r6, #15
 8007780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	ec51 0b19 	vmov	r0, r1, d9
 800778c:	f7f8 ff34 	bl	80005f8 <__aeabi_dmul>
 8007790:	1136      	asrs	r6, r6, #4
 8007792:	4682      	mov	sl, r0
 8007794:	468b      	mov	fp, r1
 8007796:	2300      	movs	r3, #0
 8007798:	2502      	movs	r5, #2
 800779a:	2e00      	cmp	r6, #0
 800779c:	d17a      	bne.n	8007894 <_dtoa_r+0x4c4>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1d3      	bne.n	800774a <_dtoa_r+0x37a>
 80077a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8082 	beq.w	80078ae <_dtoa_r+0x4de>
 80077aa:	4b91      	ldr	r3, [pc, #580]	; (80079f0 <_dtoa_r+0x620>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	4650      	mov	r0, sl
 80077b0:	4659      	mov	r1, fp
 80077b2:	f7f9 f993 	bl	8000adc <__aeabi_dcmplt>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d079      	beq.n	80078ae <_dtoa_r+0x4de>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d076      	beq.n	80078ae <_dtoa_r+0x4de>
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dd36      	ble.n	8007834 <_dtoa_r+0x464>
 80077c6:	9b00      	ldr	r3, [sp, #0]
 80077c8:	4650      	mov	r0, sl
 80077ca:	4659      	mov	r1, fp
 80077cc:	1e5f      	subs	r7, r3, #1
 80077ce:	2200      	movs	r2, #0
 80077d0:	4b88      	ldr	r3, [pc, #544]	; (80079f4 <_dtoa_r+0x624>)
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	9e02      	ldr	r6, [sp, #8]
 80077d8:	4682      	mov	sl, r0
 80077da:	468b      	mov	fp, r1
 80077dc:	3501      	adds	r5, #1
 80077de:	4628      	mov	r0, r5
 80077e0:	f7f8 fea0 	bl	8000524 <__aeabi_i2d>
 80077e4:	4652      	mov	r2, sl
 80077e6:	465b      	mov	r3, fp
 80077e8:	f7f8 ff06 	bl	80005f8 <__aeabi_dmul>
 80077ec:	4b82      	ldr	r3, [pc, #520]	; (80079f8 <_dtoa_r+0x628>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	f7f8 fd4c 	bl	800028c <__adddf3>
 80077f4:	46d0      	mov	r8, sl
 80077f6:	46d9      	mov	r9, fp
 80077f8:	4682      	mov	sl, r0
 80077fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077fe:	2e00      	cmp	r6, #0
 8007800:	d158      	bne.n	80078b4 <_dtoa_r+0x4e4>
 8007802:	4b7e      	ldr	r3, [pc, #504]	; (80079fc <_dtoa_r+0x62c>)
 8007804:	2200      	movs	r2, #0
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f8 fd3d 	bl	8000288 <__aeabi_dsub>
 800780e:	4652      	mov	r2, sl
 8007810:	465b      	mov	r3, fp
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	f7f9 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 800781a:	2800      	cmp	r0, #0
 800781c:	f040 8295 	bne.w	8007d4a <_dtoa_r+0x97a>
 8007820:	4652      	mov	r2, sl
 8007822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007826:	4640      	mov	r0, r8
 8007828:	4649      	mov	r1, r9
 800782a:	f7f9 f957 	bl	8000adc <__aeabi_dcmplt>
 800782e:	2800      	cmp	r0, #0
 8007830:	f040 8289 	bne.w	8007d46 <_dtoa_r+0x976>
 8007834:	ec5b ab19 	vmov	sl, fp, d9
 8007838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800783a:	2b00      	cmp	r3, #0
 800783c:	f2c0 8148 	blt.w	8007ad0 <_dtoa_r+0x700>
 8007840:	9a00      	ldr	r2, [sp, #0]
 8007842:	2a0e      	cmp	r2, #14
 8007844:	f300 8144 	bgt.w	8007ad0 <_dtoa_r+0x700>
 8007848:	4b67      	ldr	r3, [pc, #412]	; (80079e8 <_dtoa_r+0x618>)
 800784a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	f280 80d5 	bge.w	8007a04 <_dtoa_r+0x634>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f300 80d1 	bgt.w	8007a04 <_dtoa_r+0x634>
 8007862:	f040 826f 	bne.w	8007d44 <_dtoa_r+0x974>
 8007866:	4b65      	ldr	r3, [pc, #404]	; (80079fc <_dtoa_r+0x62c>)
 8007868:	2200      	movs	r2, #0
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	f7f8 fec3 	bl	80005f8 <__aeabi_dmul>
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	f7f9 f945 	bl	8000b04 <__aeabi_dcmpge>
 800787a:	9e03      	ldr	r6, [sp, #12]
 800787c:	4637      	mov	r7, r6
 800787e:	2800      	cmp	r0, #0
 8007880:	f040 8245 	bne.w	8007d0e <_dtoa_r+0x93e>
 8007884:	9d01      	ldr	r5, [sp, #4]
 8007886:	2331      	movs	r3, #49	; 0x31
 8007888:	f805 3b01 	strb.w	r3, [r5], #1
 800788c:	9b00      	ldr	r3, [sp, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	e240      	b.n	8007d16 <_dtoa_r+0x946>
 8007894:	07f2      	lsls	r2, r6, #31
 8007896:	d505      	bpl.n	80078a4 <_dtoa_r+0x4d4>
 8007898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	3501      	adds	r5, #1
 80078a2:	2301      	movs	r3, #1
 80078a4:	1076      	asrs	r6, r6, #1
 80078a6:	3708      	adds	r7, #8
 80078a8:	e777      	b.n	800779a <_dtoa_r+0x3ca>
 80078aa:	2502      	movs	r5, #2
 80078ac:	e779      	b.n	80077a2 <_dtoa_r+0x3d2>
 80078ae:	9f00      	ldr	r7, [sp, #0]
 80078b0:	9e03      	ldr	r6, [sp, #12]
 80078b2:	e794      	b.n	80077de <_dtoa_r+0x40e>
 80078b4:	9901      	ldr	r1, [sp, #4]
 80078b6:	4b4c      	ldr	r3, [pc, #304]	; (80079e8 <_dtoa_r+0x618>)
 80078b8:	4431      	add	r1, r6
 80078ba:	910d      	str	r1, [sp, #52]	; 0x34
 80078bc:	9908      	ldr	r1, [sp, #32]
 80078be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d043      	beq.n	8007952 <_dtoa_r+0x582>
 80078ca:	494d      	ldr	r1, [pc, #308]	; (8007a00 <_dtoa_r+0x630>)
 80078cc:	2000      	movs	r0, #0
 80078ce:	f7f8 ffbd 	bl	800084c <__aeabi_ddiv>
 80078d2:	4652      	mov	r2, sl
 80078d4:	465b      	mov	r3, fp
 80078d6:	f7f8 fcd7 	bl	8000288 <__aeabi_dsub>
 80078da:	9d01      	ldr	r5, [sp, #4]
 80078dc:	4682      	mov	sl, r0
 80078de:	468b      	mov	fp, r1
 80078e0:	4649      	mov	r1, r9
 80078e2:	4640      	mov	r0, r8
 80078e4:	f7f9 f938 	bl	8000b58 <__aeabi_d2iz>
 80078e8:	4606      	mov	r6, r0
 80078ea:	f7f8 fe1b 	bl	8000524 <__aeabi_i2d>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fcc7 	bl	8000288 <__aeabi_dsub>
 80078fa:	3630      	adds	r6, #48	; 0x30
 80078fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007900:	4652      	mov	r2, sl
 8007902:	465b      	mov	r3, fp
 8007904:	4680      	mov	r8, r0
 8007906:	4689      	mov	r9, r1
 8007908:	f7f9 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800790c:	2800      	cmp	r0, #0
 800790e:	d163      	bne.n	80079d8 <_dtoa_r+0x608>
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	4936      	ldr	r1, [pc, #216]	; (80079f0 <_dtoa_r+0x620>)
 8007916:	2000      	movs	r0, #0
 8007918:	f7f8 fcb6 	bl	8000288 <__aeabi_dsub>
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	f7f9 f8dc 	bl	8000adc <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	f040 80b5 	bne.w	8007a94 <_dtoa_r+0x6c4>
 800792a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800792c:	429d      	cmp	r5, r3
 800792e:	d081      	beq.n	8007834 <_dtoa_r+0x464>
 8007930:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <_dtoa_r+0x624>)
 8007932:	2200      	movs	r2, #0
 8007934:	4650      	mov	r0, sl
 8007936:	4659      	mov	r1, fp
 8007938:	f7f8 fe5e 	bl	80005f8 <__aeabi_dmul>
 800793c:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <_dtoa_r+0x624>)
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	2200      	movs	r2, #0
 8007948:	f7f8 fe56 	bl	80005f8 <__aeabi_dmul>
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	e7c6      	b.n	80078e0 <_dtoa_r+0x510>
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	f7f8 fe4f 	bl	80005f8 <__aeabi_dmul>
 800795a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800795c:	9d01      	ldr	r5, [sp, #4]
 800795e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007960:	4682      	mov	sl, r0
 8007962:	468b      	mov	fp, r1
 8007964:	4649      	mov	r1, r9
 8007966:	4640      	mov	r0, r8
 8007968:	f7f9 f8f6 	bl	8000b58 <__aeabi_d2iz>
 800796c:	4606      	mov	r6, r0
 800796e:	f7f8 fdd9 	bl	8000524 <__aeabi_i2d>
 8007972:	3630      	adds	r6, #48	; 0x30
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4640      	mov	r0, r8
 800797a:	4649      	mov	r1, r9
 800797c:	f7f8 fc84 	bl	8000288 <__aeabi_dsub>
 8007980:	f805 6b01 	strb.w	r6, [r5], #1
 8007984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007986:	429d      	cmp	r5, r3
 8007988:	4680      	mov	r8, r0
 800798a:	4689      	mov	r9, r1
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	d124      	bne.n	80079dc <_dtoa_r+0x60c>
 8007992:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <_dtoa_r+0x630>)
 8007994:	4650      	mov	r0, sl
 8007996:	4659      	mov	r1, fp
 8007998:	f7f8 fc78 	bl	800028c <__adddf3>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f9 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d173      	bne.n	8007a94 <_dtoa_r+0x6c4>
 80079ac:	4652      	mov	r2, sl
 80079ae:	465b      	mov	r3, fp
 80079b0:	4913      	ldr	r1, [pc, #76]	; (8007a00 <_dtoa_r+0x630>)
 80079b2:	2000      	movs	r0, #0
 80079b4:	f7f8 fc68 	bl	8000288 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f88c 	bl	8000adc <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f43f af35 	beq.w	8007834 <_dtoa_r+0x464>
 80079ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079cc:	1e6b      	subs	r3, r5, #1
 80079ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80079d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d0f8      	beq.n	80079ca <_dtoa_r+0x5fa>
 80079d8:	9700      	str	r7, [sp, #0]
 80079da:	e049      	b.n	8007a70 <_dtoa_r+0x6a0>
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <_dtoa_r+0x624>)
 80079de:	f7f8 fe0b 	bl	80005f8 <__aeabi_dmul>
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	e7bd      	b.n	8007964 <_dtoa_r+0x594>
 80079e8:	0800abd0 	.word	0x0800abd0
 80079ec:	0800aba8 	.word	0x0800aba8
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	40240000 	.word	0x40240000
 80079f8:	401c0000 	.word	0x401c0000
 80079fc:	40140000 	.word	0x40140000
 8007a00:	3fe00000 	.word	0x3fe00000
 8007a04:	9d01      	ldr	r5, [sp, #4]
 8007a06:	4656      	mov	r6, sl
 8007a08:	465f      	mov	r7, fp
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 ff1b 	bl	800084c <__aeabi_ddiv>
 8007a16:	f7f9 f89f 	bl	8000b58 <__aeabi_d2iz>
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	f7f8 fd82 	bl	8000524 <__aeabi_i2d>
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	f7f8 fde8 	bl	80005f8 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a34:	f7f8 fc28 	bl	8000288 <__aeabi_dsub>
 8007a38:	f805 6b01 	strb.w	r6, [r5], #1
 8007a3c:	9e01      	ldr	r6, [sp, #4]
 8007a3e:	9f03      	ldr	r7, [sp, #12]
 8007a40:	1bae      	subs	r6, r5, r6
 8007a42:	42b7      	cmp	r7, r6
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	d135      	bne.n	8007ab6 <_dtoa_r+0x6e6>
 8007a4a:	f7f8 fc1f 	bl	800028c <__adddf3>
 8007a4e:	4642      	mov	r2, r8
 8007a50:	464b      	mov	r3, r9
 8007a52:	4606      	mov	r6, r0
 8007a54:	460f      	mov	r7, r1
 8007a56:	f7f9 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8007a5a:	b9d0      	cbnz	r0, 8007a92 <_dtoa_r+0x6c2>
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f9 f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a68:	b110      	cbz	r0, 8007a70 <_dtoa_r+0x6a0>
 8007a6a:	f01a 0f01 	tst.w	sl, #1
 8007a6e:	d110      	bne.n	8007a92 <_dtoa_r+0x6c2>
 8007a70:	4620      	mov	r0, r4
 8007a72:	ee18 1a10 	vmov	r1, s16
 8007a76:	f000 fc3d 	bl	80082f4 <_Bfree>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9800      	ldr	r0, [sp, #0]
 8007a7e:	702b      	strb	r3, [r5, #0]
 8007a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a82:	3001      	adds	r0, #1
 8007a84:	6018      	str	r0, [r3, #0]
 8007a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f43f acf1 	beq.w	8007470 <_dtoa_r+0xa0>
 8007a8e:	601d      	str	r5, [r3, #0]
 8007a90:	e4ee      	b.n	8007470 <_dtoa_r+0xa0>
 8007a92:	9f00      	ldr	r7, [sp, #0]
 8007a94:	462b      	mov	r3, r5
 8007a96:	461d      	mov	r5, r3
 8007a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a9c:	2a39      	cmp	r2, #57	; 0x39
 8007a9e:	d106      	bne.n	8007aae <_dtoa_r+0x6de>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d1f7      	bne.n	8007a96 <_dtoa_r+0x6c6>
 8007aa6:	9901      	ldr	r1, [sp, #4]
 8007aa8:	2230      	movs	r2, #48	; 0x30
 8007aaa:	3701      	adds	r7, #1
 8007aac:	700a      	strb	r2, [r1, #0]
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	701a      	strb	r2, [r3, #0]
 8007ab4:	e790      	b.n	80079d8 <_dtoa_r+0x608>
 8007ab6:	4ba6      	ldr	r3, [pc, #664]	; (8007d50 <_dtoa_r+0x980>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7f8 fd9d 	bl	80005f8 <__aeabi_dmul>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	f7f8 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d09d      	beq.n	8007a0a <_dtoa_r+0x63a>
 8007ace:	e7cf      	b.n	8007a70 <_dtoa_r+0x6a0>
 8007ad0:	9a08      	ldr	r2, [sp, #32]
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	f000 80d7 	beq.w	8007c86 <_dtoa_r+0x8b6>
 8007ad8:	9a06      	ldr	r2, [sp, #24]
 8007ada:	2a01      	cmp	r2, #1
 8007adc:	f300 80ba 	bgt.w	8007c54 <_dtoa_r+0x884>
 8007ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	f000 80b2 	beq.w	8007c4c <_dtoa_r+0x87c>
 8007ae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aec:	9e07      	ldr	r6, [sp, #28]
 8007aee:	9d04      	ldr	r5, [sp, #16]
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	441a      	add	r2, r3
 8007af4:	9204      	str	r2, [sp, #16]
 8007af6:	9a05      	ldr	r2, [sp, #20]
 8007af8:	2101      	movs	r1, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	4620      	mov	r0, r4
 8007afe:	9205      	str	r2, [sp, #20]
 8007b00:	f000 fcb0 	bl	8008464 <__i2b>
 8007b04:	4607      	mov	r7, r0
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	dd0c      	ble.n	8007b24 <_dtoa_r+0x754>
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dd09      	ble.n	8007b24 <_dtoa_r+0x754>
 8007b10:	42ab      	cmp	r3, r5
 8007b12:	9a04      	ldr	r2, [sp, #16]
 8007b14:	bfa8      	it	ge
 8007b16:	462b      	movge	r3, r5
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	9204      	str	r2, [sp, #16]
 8007b1c:	9a05      	ldr	r2, [sp, #20]
 8007b1e:	1aed      	subs	r5, r5, r3
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	9305      	str	r3, [sp, #20]
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	b31b      	cbz	r3, 8007b70 <_dtoa_r+0x7a0>
 8007b28:	9b08      	ldr	r3, [sp, #32]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80af 	beq.w	8007c8e <_dtoa_r+0x8be>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	dd13      	ble.n	8007b5c <_dtoa_r+0x78c>
 8007b34:	4639      	mov	r1, r7
 8007b36:	4632      	mov	r2, r6
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fd53 	bl	80085e4 <__pow5mult>
 8007b3e:	ee18 2a10 	vmov	r2, s16
 8007b42:	4601      	mov	r1, r0
 8007b44:	4607      	mov	r7, r0
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 fca2 	bl	8008490 <__multiply>
 8007b4c:	ee18 1a10 	vmov	r1, s16
 8007b50:	4680      	mov	r8, r0
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fbce 	bl	80082f4 <_Bfree>
 8007b58:	ee08 8a10 	vmov	s16, r8
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	1b9a      	subs	r2, r3, r6
 8007b60:	d006      	beq.n	8007b70 <_dtoa_r+0x7a0>
 8007b62:	ee18 1a10 	vmov	r1, s16
 8007b66:	4620      	mov	r0, r4
 8007b68:	f000 fd3c 	bl	80085e4 <__pow5mult>
 8007b6c:	ee08 0a10 	vmov	s16, r0
 8007b70:	2101      	movs	r1, #1
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fc76 	bl	8008464 <__i2b>
 8007b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	f340 8088 	ble.w	8007c92 <_dtoa_r+0x8c2>
 8007b82:	461a      	mov	r2, r3
 8007b84:	4601      	mov	r1, r0
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 fd2c 	bl	80085e4 <__pow5mult>
 8007b8c:	9b06      	ldr	r3, [sp, #24]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	4606      	mov	r6, r0
 8007b92:	f340 8081 	ble.w	8007c98 <_dtoa_r+0x8c8>
 8007b96:	f04f 0800 	mov.w	r8, #0
 8007b9a:	6933      	ldr	r3, [r6, #16]
 8007b9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ba0:	6918      	ldr	r0, [r3, #16]
 8007ba2:	f000 fc0f 	bl	80083c4 <__hi0bits>
 8007ba6:	f1c0 0020 	rsb	r0, r0, #32
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	4418      	add	r0, r3
 8007bae:	f010 001f 	ands.w	r0, r0, #31
 8007bb2:	f000 8092 	beq.w	8007cda <_dtoa_r+0x90a>
 8007bb6:	f1c0 0320 	rsb	r3, r0, #32
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	f340 808a 	ble.w	8007cd4 <_dtoa_r+0x904>
 8007bc0:	f1c0 001c 	rsb	r0, r0, #28
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	4403      	add	r3, r0
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	4403      	add	r3, r0
 8007bce:	4405      	add	r5, r0
 8007bd0:	9305      	str	r3, [sp, #20]
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd07      	ble.n	8007be8 <_dtoa_r+0x818>
 8007bd8:	ee18 1a10 	vmov	r1, s16
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 fd5a 	bl	8008698 <__lshift>
 8007be4:	ee08 0a10 	vmov	s16, r0
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dd05      	ble.n	8007bfa <_dtoa_r+0x82a>
 8007bee:	4631      	mov	r1, r6
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 fd50 	bl	8008698 <__lshift>
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d06e      	beq.n	8007cde <_dtoa_r+0x90e>
 8007c00:	ee18 0a10 	vmov	r0, s16
 8007c04:	4631      	mov	r1, r6
 8007c06:	f000 fdb7 	bl	8008778 <__mcmp>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	da67      	bge.n	8007cde <_dtoa_r+0x90e>
 8007c0e:	9b00      	ldr	r3, [sp, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	ee18 1a10 	vmov	r1, s16
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	220a      	movs	r2, #10
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fb8b 	bl	8008338 <__multadd>
 8007c22:	9b08      	ldr	r3, [sp, #32]
 8007c24:	ee08 0a10 	vmov	s16, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 81b1 	beq.w	8007f90 <_dtoa_r+0xbc0>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4639      	mov	r1, r7
 8007c32:	220a      	movs	r2, #10
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fb7f 	bl	8008338 <__multadd>
 8007c3a:	9b02      	ldr	r3, [sp, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	4607      	mov	r7, r0
 8007c40:	f300 808e 	bgt.w	8007d60 <_dtoa_r+0x990>
 8007c44:	9b06      	ldr	r3, [sp, #24]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	dc51      	bgt.n	8007cee <_dtoa_r+0x91e>
 8007c4a:	e089      	b.n	8007d60 <_dtoa_r+0x990>
 8007c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c52:	e74b      	b.n	8007aec <_dtoa_r+0x71c>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	1e5e      	subs	r6, r3, #1
 8007c58:	9b07      	ldr	r3, [sp, #28]
 8007c5a:	42b3      	cmp	r3, r6
 8007c5c:	bfbf      	itttt	lt
 8007c5e:	9b07      	ldrlt	r3, [sp, #28]
 8007c60:	9607      	strlt	r6, [sp, #28]
 8007c62:	1af2      	sublt	r2, r6, r3
 8007c64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c66:	bfb6      	itet	lt
 8007c68:	189b      	addlt	r3, r3, r2
 8007c6a:	1b9e      	subge	r6, r3, r6
 8007c6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	bfb8      	it	lt
 8007c72:	2600      	movlt	r6, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfb7      	itett	lt
 8007c78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c80:	1a9d      	sublt	r5, r3, r2
 8007c82:	2300      	movlt	r3, #0
 8007c84:	e734      	b.n	8007af0 <_dtoa_r+0x720>
 8007c86:	9e07      	ldr	r6, [sp, #28]
 8007c88:	9d04      	ldr	r5, [sp, #16]
 8007c8a:	9f08      	ldr	r7, [sp, #32]
 8007c8c:	e73b      	b.n	8007b06 <_dtoa_r+0x736>
 8007c8e:	9a07      	ldr	r2, [sp, #28]
 8007c90:	e767      	b.n	8007b62 <_dtoa_r+0x792>
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	dc18      	bgt.n	8007cca <_dtoa_r+0x8fa>
 8007c98:	f1ba 0f00 	cmp.w	sl, #0
 8007c9c:	d115      	bne.n	8007cca <_dtoa_r+0x8fa>
 8007c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ca2:	b993      	cbnz	r3, 8007cca <_dtoa_r+0x8fa>
 8007ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	051b      	lsls	r3, r3, #20
 8007cac:	b183      	cbz	r3, 8007cd0 <_dtoa_r+0x900>
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	9304      	str	r3, [sp, #16]
 8007cb4:	9b05      	ldr	r3, [sp, #20]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	9305      	str	r3, [sp, #20]
 8007cba:	f04f 0801 	mov.w	r8, #1
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f47f af6a 	bne.w	8007b9a <_dtoa_r+0x7ca>
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	e76f      	b.n	8007baa <_dtoa_r+0x7da>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	e7f6      	b.n	8007cbe <_dtoa_r+0x8ee>
 8007cd0:	4698      	mov	r8, r3
 8007cd2:	e7f4      	b.n	8007cbe <_dtoa_r+0x8ee>
 8007cd4:	f43f af7d 	beq.w	8007bd2 <_dtoa_r+0x802>
 8007cd8:	4618      	mov	r0, r3
 8007cda:	301c      	adds	r0, #28
 8007cdc:	e772      	b.n	8007bc4 <_dtoa_r+0x7f4>
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc37      	bgt.n	8007d54 <_dtoa_r+0x984>
 8007ce4:	9b06      	ldr	r3, [sp, #24]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	dd34      	ble.n	8007d54 <_dtoa_r+0x984>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	9302      	str	r3, [sp, #8]
 8007cee:	9b02      	ldr	r3, [sp, #8]
 8007cf0:	b96b      	cbnz	r3, 8007d0e <_dtoa_r+0x93e>
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 fb1e 	bl	8008338 <__multadd>
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4606      	mov	r6, r0
 8007d00:	ee18 0a10 	vmov	r0, s16
 8007d04:	f000 fd38 	bl	8008778 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f73f adbb 	bgt.w	8007884 <_dtoa_r+0x4b4>
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	9d01      	ldr	r5, [sp, #4]
 8007d12:	43db      	mvns	r3, r3
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fae9 	bl	80082f4 <_Bfree>
 8007d22:	2f00      	cmp	r7, #0
 8007d24:	f43f aea4 	beq.w	8007a70 <_dtoa_r+0x6a0>
 8007d28:	f1b8 0f00 	cmp.w	r8, #0
 8007d2c:	d005      	beq.n	8007d3a <_dtoa_r+0x96a>
 8007d2e:	45b8      	cmp	r8, r7
 8007d30:	d003      	beq.n	8007d3a <_dtoa_r+0x96a>
 8007d32:	4641      	mov	r1, r8
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fadd 	bl	80082f4 <_Bfree>
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 fad9 	bl	80082f4 <_Bfree>
 8007d42:	e695      	b.n	8007a70 <_dtoa_r+0x6a0>
 8007d44:	2600      	movs	r6, #0
 8007d46:	4637      	mov	r7, r6
 8007d48:	e7e1      	b.n	8007d0e <_dtoa_r+0x93e>
 8007d4a:	9700      	str	r7, [sp, #0]
 8007d4c:	4637      	mov	r7, r6
 8007d4e:	e599      	b.n	8007884 <_dtoa_r+0x4b4>
 8007d50:	40240000 	.word	0x40240000
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 80ca 	beq.w	8007ef0 <_dtoa_r+0xb20>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	dd05      	ble.n	8007d70 <_dtoa_r+0x9a0>
 8007d64:	4639      	mov	r1, r7
 8007d66:	462a      	mov	r2, r5
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fc95 	bl	8008698 <__lshift>
 8007d6e:	4607      	mov	r7, r0
 8007d70:	f1b8 0f00 	cmp.w	r8, #0
 8007d74:	d05b      	beq.n	8007e2e <_dtoa_r+0xa5e>
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fa7b 	bl	8008274 <_Balloc>
 8007d7e:	4605      	mov	r5, r0
 8007d80:	b928      	cbnz	r0, 8007d8e <_dtoa_r+0x9be>
 8007d82:	4b87      	ldr	r3, [pc, #540]	; (8007fa0 <_dtoa_r+0xbd0>)
 8007d84:	4602      	mov	r2, r0
 8007d86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d8a:	f7ff bb3b 	b.w	8007404 <_dtoa_r+0x34>
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	3202      	adds	r2, #2
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	f107 010c 	add.w	r1, r7, #12
 8007d98:	300c      	adds	r0, #12
 8007d9a:	f7fe fc02 	bl	80065a2 <memcpy>
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4629      	mov	r1, r5
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fc78 	bl	8008698 <__lshift>
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	f103 0901 	add.w	r9, r3, #1
 8007dae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	9305      	str	r3, [sp, #20]
 8007db6:	f00a 0301 	and.w	r3, sl, #1
 8007dba:	46b8      	mov	r8, r7
 8007dbc:	9304      	str	r3, [sp, #16]
 8007dbe:	4607      	mov	r7, r0
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	ee18 0a10 	vmov	r0, s16
 8007dc6:	f7ff fa75 	bl	80072b4 <quorem>
 8007dca:	4641      	mov	r1, r8
 8007dcc:	9002      	str	r0, [sp, #8]
 8007dce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dd2:	ee18 0a10 	vmov	r0, s16
 8007dd6:	f000 fccf 	bl	8008778 <__mcmp>
 8007dda:	463a      	mov	r2, r7
 8007ddc:	9003      	str	r0, [sp, #12]
 8007dde:	4631      	mov	r1, r6
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 fce5 	bl	80087b0 <__mdiff>
 8007de6:	68c2      	ldr	r2, [r0, #12]
 8007de8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007dec:	4605      	mov	r5, r0
 8007dee:	bb02      	cbnz	r2, 8007e32 <_dtoa_r+0xa62>
 8007df0:	4601      	mov	r1, r0
 8007df2:	ee18 0a10 	vmov	r0, s16
 8007df6:	f000 fcbf 	bl	8008778 <__mcmp>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	9207      	str	r2, [sp, #28]
 8007e02:	f000 fa77 	bl	80082f4 <_Bfree>
 8007e06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e0a:	ea43 0102 	orr.w	r1, r3, r2
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	430b      	orrs	r3, r1
 8007e12:	464d      	mov	r5, r9
 8007e14:	d10f      	bne.n	8007e36 <_dtoa_r+0xa66>
 8007e16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e1a:	d02a      	beq.n	8007e72 <_dtoa_r+0xaa2>
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd02      	ble.n	8007e28 <_dtoa_r+0xa58>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e28:	f88b a000 	strb.w	sl, [fp]
 8007e2c:	e775      	b.n	8007d1a <_dtoa_r+0x94a>
 8007e2e:	4638      	mov	r0, r7
 8007e30:	e7ba      	b.n	8007da8 <_dtoa_r+0x9d8>
 8007e32:	2201      	movs	r2, #1
 8007e34:	e7e2      	b.n	8007dfc <_dtoa_r+0xa2c>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db04      	blt.n	8007e46 <_dtoa_r+0xa76>
 8007e3c:	9906      	ldr	r1, [sp, #24]
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	9904      	ldr	r1, [sp, #16]
 8007e42:	430b      	orrs	r3, r1
 8007e44:	d122      	bne.n	8007e8c <_dtoa_r+0xabc>
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	ddee      	ble.n	8007e28 <_dtoa_r+0xa58>
 8007e4a:	ee18 1a10 	vmov	r1, s16
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fc21 	bl	8008698 <__lshift>
 8007e56:	4631      	mov	r1, r6
 8007e58:	ee08 0a10 	vmov	s16, r0
 8007e5c:	f000 fc8c 	bl	8008778 <__mcmp>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	dc03      	bgt.n	8007e6c <_dtoa_r+0xa9c>
 8007e64:	d1e0      	bne.n	8007e28 <_dtoa_r+0xa58>
 8007e66:	f01a 0f01 	tst.w	sl, #1
 8007e6a:	d0dd      	beq.n	8007e28 <_dtoa_r+0xa58>
 8007e6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e70:	d1d7      	bne.n	8007e22 <_dtoa_r+0xa52>
 8007e72:	2339      	movs	r3, #57	; 0x39
 8007e74:	f88b 3000 	strb.w	r3, [fp]
 8007e78:	462b      	mov	r3, r5
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e82:	2a39      	cmp	r2, #57	; 0x39
 8007e84:	d071      	beq.n	8007f6a <_dtoa_r+0xb9a>
 8007e86:	3201      	adds	r2, #1
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e746      	b.n	8007d1a <_dtoa_r+0x94a>
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	dd07      	ble.n	8007ea0 <_dtoa_r+0xad0>
 8007e90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e94:	d0ed      	beq.n	8007e72 <_dtoa_r+0xaa2>
 8007e96:	f10a 0301 	add.w	r3, sl, #1
 8007e9a:	f88b 3000 	strb.w	r3, [fp]
 8007e9e:	e73c      	b.n	8007d1a <_dtoa_r+0x94a>
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ea6:	4599      	cmp	r9, r3
 8007ea8:	d047      	beq.n	8007f3a <_dtoa_r+0xb6a>
 8007eaa:	ee18 1a10 	vmov	r1, s16
 8007eae:	2300      	movs	r3, #0
 8007eb0:	220a      	movs	r2, #10
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fa40 	bl	8008338 <__multadd>
 8007eb8:	45b8      	cmp	r8, r7
 8007eba:	ee08 0a10 	vmov	s16, r0
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	f04f 020a 	mov.w	r2, #10
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	4620      	mov	r0, r4
 8007eca:	d106      	bne.n	8007eda <_dtoa_r+0xb0a>
 8007ecc:	f000 fa34 	bl	8008338 <__multadd>
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	f109 0901 	add.w	r9, r9, #1
 8007ed8:	e772      	b.n	8007dc0 <_dtoa_r+0x9f0>
 8007eda:	f000 fa2d 	bl	8008338 <__multadd>
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	220a      	movs	r2, #10
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fa26 	bl	8008338 <__multadd>
 8007eec:	4607      	mov	r7, r0
 8007eee:	e7f1      	b.n	8007ed4 <_dtoa_r+0xb04>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	9302      	str	r3, [sp, #8]
 8007ef4:	9d01      	ldr	r5, [sp, #4]
 8007ef6:	ee18 0a10 	vmov	r0, s16
 8007efa:	4631      	mov	r1, r6
 8007efc:	f7ff f9da 	bl	80072b4 <quorem>
 8007f00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f04:	9b01      	ldr	r3, [sp, #4]
 8007f06:	f805 ab01 	strb.w	sl, [r5], #1
 8007f0a:	1aea      	subs	r2, r5, r3
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	dd09      	ble.n	8007f26 <_dtoa_r+0xb56>
 8007f12:	ee18 1a10 	vmov	r1, s16
 8007f16:	2300      	movs	r3, #0
 8007f18:	220a      	movs	r2, #10
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fa0c 	bl	8008338 <__multadd>
 8007f20:	ee08 0a10 	vmov	s16, r0
 8007f24:	e7e7      	b.n	8007ef6 <_dtoa_r+0xb26>
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfc8      	it	gt
 8007f2c:	461d      	movgt	r5, r3
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	bfd8      	it	le
 8007f32:	2501      	movle	r5, #1
 8007f34:	441d      	add	r5, r3
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fba9 	bl	8008698 <__lshift>
 8007f46:	4631      	mov	r1, r6
 8007f48:	ee08 0a10 	vmov	s16, r0
 8007f4c:	f000 fc14 	bl	8008778 <__mcmp>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	dc91      	bgt.n	8007e78 <_dtoa_r+0xaa8>
 8007f54:	d102      	bne.n	8007f5c <_dtoa_r+0xb8c>
 8007f56:	f01a 0f01 	tst.w	sl, #1
 8007f5a:	d18d      	bne.n	8007e78 <_dtoa_r+0xaa8>
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	461d      	mov	r5, r3
 8007f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f64:	2a30      	cmp	r2, #48	; 0x30
 8007f66:	d0fa      	beq.n	8007f5e <_dtoa_r+0xb8e>
 8007f68:	e6d7      	b.n	8007d1a <_dtoa_r+0x94a>
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d184      	bne.n	8007e7a <_dtoa_r+0xaaa>
 8007f70:	9b00      	ldr	r3, [sp, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2331      	movs	r3, #49	; 0x31
 8007f78:	7013      	strb	r3, [r2, #0]
 8007f7a:	e6ce      	b.n	8007d1a <_dtoa_r+0x94a>
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <_dtoa_r+0xbd4>)
 8007f7e:	f7ff ba95 	b.w	80074ac <_dtoa_r+0xdc>
 8007f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f47f aa6e 	bne.w	8007466 <_dtoa_r+0x96>
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <_dtoa_r+0xbd8>)
 8007f8c:	f7ff ba8e 	b.w	80074ac <_dtoa_r+0xdc>
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dcae      	bgt.n	8007ef4 <_dtoa_r+0xb24>
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	f73f aea8 	bgt.w	8007cee <_dtoa_r+0x91e>
 8007f9e:	e7a9      	b.n	8007ef4 <_dtoa_r+0xb24>
 8007fa0:	0800ab37 	.word	0x0800ab37
 8007fa4:	0800aa58 	.word	0x0800aa58
 8007fa8:	0800aab8 	.word	0x0800aab8

08007fac <__sflush_r>:
 8007fac:	898a      	ldrh	r2, [r1, #12]
 8007fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	0710      	lsls	r0, r2, #28
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	d458      	bmi.n	800806c <__sflush_r+0xc0>
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc05      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dc02      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	d0f9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd8:	682f      	ldr	r7, [r5, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	d032      	beq.n	8008044 <__sflush_r+0x98>
 8007fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	075a      	lsls	r2, r3, #29
 8007fe4:	d505      	bpl.n	8007ff2 <__sflush_r+0x46>
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	1ac0      	subs	r0, r0, r3
 8007fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fec:	b10b      	cbz	r3, 8007ff2 <__sflush_r+0x46>
 8007fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff0:	1ac0      	subs	r0, r0, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff8:	6a21      	ldr	r1, [r4, #32]
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b0      	blx	r6
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	d106      	bne.n	8008012 <__sflush_r+0x66>
 8008004:	6829      	ldr	r1, [r5, #0]
 8008006:	291d      	cmp	r1, #29
 8008008:	d82c      	bhi.n	8008064 <__sflush_r+0xb8>
 800800a:	4a2a      	ldr	r2, [pc, #168]	; (80080b4 <__sflush_r+0x108>)
 800800c:	40ca      	lsrs	r2, r1
 800800e:	07d6      	lsls	r6, r2, #31
 8008010:	d528      	bpl.n	8008064 <__sflush_r+0xb8>
 8008012:	2200      	movs	r2, #0
 8008014:	6062      	str	r2, [r4, #4]
 8008016:	04d9      	lsls	r1, r3, #19
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	d504      	bpl.n	8008028 <__sflush_r+0x7c>
 800801e:	1c42      	adds	r2, r0, #1
 8008020:	d101      	bne.n	8008026 <__sflush_r+0x7a>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	b903      	cbnz	r3, 8008028 <__sflush_r+0x7c>
 8008026:	6560      	str	r0, [r4, #84]	; 0x54
 8008028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802a:	602f      	str	r7, [r5, #0]
 800802c:	2900      	cmp	r1, #0
 800802e:	d0ca      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <__sflush_r+0x92>
 8008038:	4628      	mov	r0, r5
 800803a:	f000 fcb5 	bl	80089a8 <_free_r>
 800803e:	2000      	movs	r0, #0
 8008040:	6360      	str	r0, [r4, #52]	; 0x34
 8008042:	e7c1      	b.n	8007fc8 <__sflush_r+0x1c>
 8008044:	6a21      	ldr	r1, [r4, #32]
 8008046:	2301      	movs	r3, #1
 8008048:	4628      	mov	r0, r5
 800804a:	47b0      	blx	r6
 800804c:	1c41      	adds	r1, r0, #1
 800804e:	d1c7      	bne.n	8007fe0 <__sflush_r+0x34>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0c4      	beq.n	8007fe0 <__sflush_r+0x34>
 8008056:	2b1d      	cmp	r3, #29
 8008058:	d001      	beq.n	800805e <__sflush_r+0xb2>
 800805a:	2b16      	cmp	r3, #22
 800805c:	d101      	bne.n	8008062 <__sflush_r+0xb6>
 800805e:	602f      	str	r7, [r5, #0]
 8008060:	e7b1      	b.n	8007fc6 <__sflush_r+0x1a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	e7ad      	b.n	8007fc8 <__sflush_r+0x1c>
 800806c:	690f      	ldr	r7, [r1, #16]
 800806e:	2f00      	cmp	r7, #0
 8008070:	d0a9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008072:	0793      	lsls	r3, r2, #30
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	bf08      	it	eq
 8008078:	694b      	ldreq	r3, [r1, #20]
 800807a:	600f      	str	r7, [r1, #0]
 800807c:	bf18      	it	ne
 800807e:	2300      	movne	r3, #0
 8008080:	eba6 0807 	sub.w	r8, r6, r7
 8008084:	608b      	str	r3, [r1, #8]
 8008086:	f1b8 0f00 	cmp.w	r8, #0
 800808a:	dd9c      	ble.n	8007fc6 <__sflush_r+0x1a>
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008090:	4643      	mov	r3, r8
 8008092:	463a      	mov	r2, r7
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	2800      	cmp	r0, #0
 800809a:	dc06      	bgt.n	80080aa <__sflush_r+0xfe>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a8:	e78e      	b.n	8007fc8 <__sflush_r+0x1c>
 80080aa:	4407      	add	r7, r0
 80080ac:	eba8 0800 	sub.w	r8, r8, r0
 80080b0:	e7e9      	b.n	8008086 <__sflush_r+0xda>
 80080b2:	bf00      	nop
 80080b4:	20400001 	.word	0x20400001

080080b8 <_fflush_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	690b      	ldr	r3, [r1, #16]
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b913      	cbnz	r3, 80080c8 <_fflush_r+0x10>
 80080c2:	2500      	movs	r5, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	b118      	cbz	r0, 80080d2 <_fflush_r+0x1a>
 80080ca:	6983      	ldr	r3, [r0, #24]
 80080cc:	b90b      	cbnz	r3, 80080d2 <_fflush_r+0x1a>
 80080ce:	f7fe f9a3 	bl	8006418 <__sinit>
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <_fflush_r+0x6c>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d11b      	bne.n	8008110 <_fflush_r+0x58>
 80080d8:	686c      	ldr	r4, [r5, #4]
 80080da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0ef      	beq.n	80080c2 <_fflush_r+0xa>
 80080e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e4:	07d0      	lsls	r0, r2, #31
 80080e6:	d404      	bmi.n	80080f2 <_fflush_r+0x3a>
 80080e8:	0599      	lsls	r1, r3, #22
 80080ea:	d402      	bmi.n	80080f2 <_fflush_r+0x3a>
 80080ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ee:	f7fe fa56 	bl	800659e <__retarget_lock_acquire_recursive>
 80080f2:	4628      	mov	r0, r5
 80080f4:	4621      	mov	r1, r4
 80080f6:	f7ff ff59 	bl	8007fac <__sflush_r>
 80080fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080fc:	07da      	lsls	r2, r3, #31
 80080fe:	4605      	mov	r5, r0
 8008100:	d4e0      	bmi.n	80080c4 <_fflush_r+0xc>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	059b      	lsls	r3, r3, #22
 8008106:	d4dd      	bmi.n	80080c4 <_fflush_r+0xc>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f7fe fa49 	bl	80065a0 <__retarget_lock_release_recursive>
 800810e:	e7d9      	b.n	80080c4 <_fflush_r+0xc>
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <_fflush_r+0x70>)
 8008112:	429c      	cmp	r4, r3
 8008114:	d101      	bne.n	800811a <_fflush_r+0x62>
 8008116:	68ac      	ldr	r4, [r5, #8]
 8008118:	e7df      	b.n	80080da <_fflush_r+0x22>
 800811a:	4b04      	ldr	r3, [pc, #16]	; (800812c <_fflush_r+0x74>)
 800811c:	429c      	cmp	r4, r3
 800811e:	bf08      	it	eq
 8008120:	68ec      	ldreq	r4, [r5, #12]
 8008122:	e7da      	b.n	80080da <_fflush_r+0x22>
 8008124:	0800aa04 	.word	0x0800aa04
 8008128:	0800aa24 	.word	0x0800aa24
 800812c:	0800a9e4 	.word	0x0800a9e4

08008130 <fiprintf>:
 8008130:	b40e      	push	{r1, r2, r3}
 8008132:	b503      	push	{r0, r1, lr}
 8008134:	4601      	mov	r1, r0
 8008136:	ab03      	add	r3, sp, #12
 8008138:	4805      	ldr	r0, [pc, #20]	; (8008150 <fiprintf+0x20>)
 800813a:	f853 2b04 	ldr.w	r2, [r3], #4
 800813e:	6800      	ldr	r0, [r0, #0]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	f000 fe03 	bl	8008d4c <_vfiprintf_r>
 8008146:	b002      	add	sp, #8
 8008148:	f85d eb04 	ldr.w	lr, [sp], #4
 800814c:	b003      	add	sp, #12
 800814e:	4770      	bx	lr
 8008150:	2000010c 	.word	0x2000010c

08008154 <_localeconv_r>:
 8008154:	4800      	ldr	r0, [pc, #0]	; (8008158 <_localeconv_r+0x4>)
 8008156:	4770      	bx	lr
 8008158:	20000260 	.word	0x20000260

0800815c <_lseek_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_lseek_r+0x20>)
 8008160:	4604      	mov	r4, r0
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7fe f83f 	bl	80061ee <_lseek>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_lseek_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_lseek_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200004a4 	.word	0x200004a4

08008180 <__swhatbuf_r>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	460e      	mov	r6, r1
 8008184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008188:	2900      	cmp	r1, #0
 800818a:	b096      	sub	sp, #88	; 0x58
 800818c:	4614      	mov	r4, r2
 800818e:	461d      	mov	r5, r3
 8008190:	da08      	bge.n	80081a4 <__swhatbuf_r+0x24>
 8008192:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	061a      	lsls	r2, r3, #24
 800819c:	d410      	bmi.n	80081c0 <__swhatbuf_r+0x40>
 800819e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a2:	e00e      	b.n	80081c2 <__swhatbuf_r+0x42>
 80081a4:	466a      	mov	r2, sp
 80081a6:	f000 ff1b 	bl	8008fe0 <_fstat_r>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	dbf1      	blt.n	8008192 <__swhatbuf_r+0x12>
 80081ae:	9a01      	ldr	r2, [sp, #4]
 80081b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081b8:	425a      	negs	r2, r3
 80081ba:	415a      	adcs	r2, r3
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	e7ee      	b.n	800819e <__swhatbuf_r+0x1e>
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	2000      	movs	r0, #0
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	b016      	add	sp, #88	; 0x58
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080081cc <__smakebuf_r>:
 80081cc:	898b      	ldrh	r3, [r1, #12]
 80081ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d0:	079d      	lsls	r5, r3, #30
 80081d2:	4606      	mov	r6, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	d507      	bpl.n	80081e8 <__smakebuf_r+0x1c>
 80081d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	2301      	movs	r3, #1
 80081e2:	6163      	str	r3, [r4, #20]
 80081e4:	b002      	add	sp, #8
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	ab01      	add	r3, sp, #4
 80081ea:	466a      	mov	r2, sp
 80081ec:	f7ff ffc8 	bl	8008180 <__swhatbuf_r>
 80081f0:	9900      	ldr	r1, [sp, #0]
 80081f2:	4605      	mov	r5, r0
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7fe fa0b 	bl	8006610 <_malloc_r>
 80081fa:	b948      	cbnz	r0, 8008210 <__smakebuf_r+0x44>
 80081fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008200:	059a      	lsls	r2, r3, #22
 8008202:	d4ef      	bmi.n	80081e4 <__smakebuf_r+0x18>
 8008204:	f023 0303 	bic.w	r3, r3, #3
 8008208:	f043 0302 	orr.w	r3, r3, #2
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	e7e3      	b.n	80081d8 <__smakebuf_r+0xc>
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <__smakebuf_r+0x7c>)
 8008212:	62b3      	str	r3, [r6, #40]	; 0x28
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	6020      	str	r0, [r4, #0]
 8008218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	6163      	str	r3, [r4, #20]
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	6120      	str	r0, [r4, #16]
 8008226:	b15b      	cbz	r3, 8008240 <__smakebuf_r+0x74>
 8008228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822c:	4630      	mov	r0, r6
 800822e:	f000 fee9 	bl	8009004 <_isatty_r>
 8008232:	b128      	cbz	r0, 8008240 <__smakebuf_r+0x74>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	89a0      	ldrh	r0, [r4, #12]
 8008242:	4305      	orrs	r5, r0
 8008244:	81a5      	strh	r5, [r4, #12]
 8008246:	e7cd      	b.n	80081e4 <__smakebuf_r+0x18>
 8008248:	080063b1 	.word	0x080063b1

0800824c <malloc>:
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <malloc+0xc>)
 800824e:	4601      	mov	r1, r0
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f7fe b9dd 	b.w	8006610 <_malloc_r>
 8008256:	bf00      	nop
 8008258:	2000010c 	.word	0x2000010c

0800825c <__malloc_lock>:
 800825c:	4801      	ldr	r0, [pc, #4]	; (8008264 <__malloc_lock+0x8>)
 800825e:	f7fe b99e 	b.w	800659e <__retarget_lock_acquire_recursive>
 8008262:	bf00      	nop
 8008264:	20000498 	.word	0x20000498

08008268 <__malloc_unlock>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__malloc_unlock+0x8>)
 800826a:	f7fe b999 	b.w	80065a0 <__retarget_lock_release_recursive>
 800826e:	bf00      	nop
 8008270:	20000498 	.word	0x20000498

08008274 <_Balloc>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	b976      	cbnz	r6, 800829c <_Balloc+0x28>
 800827e:	2010      	movs	r0, #16
 8008280:	f7ff ffe4 	bl	800824c <malloc>
 8008284:	4602      	mov	r2, r0
 8008286:	6260      	str	r0, [r4, #36]	; 0x24
 8008288:	b920      	cbnz	r0, 8008294 <_Balloc+0x20>
 800828a:	4b18      	ldr	r3, [pc, #96]	; (80082ec <_Balloc+0x78>)
 800828c:	4818      	ldr	r0, [pc, #96]	; (80082f0 <_Balloc+0x7c>)
 800828e:	2166      	movs	r1, #102	; 0x66
 8008290:	f7fe ffe2 	bl	8007258 <__assert_func>
 8008294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008298:	6006      	str	r6, [r0, #0]
 800829a:	60c6      	str	r6, [r0, #12]
 800829c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800829e:	68f3      	ldr	r3, [r6, #12]
 80082a0:	b183      	cbz	r3, 80082c4 <_Balloc+0x50>
 80082a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082aa:	b9b8      	cbnz	r0, 80082dc <_Balloc+0x68>
 80082ac:	2101      	movs	r1, #1
 80082ae:	fa01 f605 	lsl.w	r6, r1, r5
 80082b2:	1d72      	adds	r2, r6, #5
 80082b4:	0092      	lsls	r2, r2, #2
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fb60 	bl	800897c <_calloc_r>
 80082bc:	b160      	cbz	r0, 80082d8 <_Balloc+0x64>
 80082be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082c2:	e00e      	b.n	80082e2 <_Balloc+0x6e>
 80082c4:	2221      	movs	r2, #33	; 0x21
 80082c6:	2104      	movs	r1, #4
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fb57 	bl	800897c <_calloc_r>
 80082ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d0:	60f0      	str	r0, [r6, #12]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e4      	bne.n	80082a2 <_Balloc+0x2e>
 80082d8:	2000      	movs	r0, #0
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	6802      	ldr	r2, [r0, #0]
 80082de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082e2:	2300      	movs	r3, #0
 80082e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082e8:	e7f7      	b.n	80082da <_Balloc+0x66>
 80082ea:	bf00      	nop
 80082ec:	0800aac5 	.word	0x0800aac5
 80082f0:	0800ab48 	.word	0x0800ab48

080082f4 <_Bfree>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082f8:	4605      	mov	r5, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b976      	cbnz	r6, 800831c <_Bfree+0x28>
 80082fe:	2010      	movs	r0, #16
 8008300:	f7ff ffa4 	bl	800824c <malloc>
 8008304:	4602      	mov	r2, r0
 8008306:	6268      	str	r0, [r5, #36]	; 0x24
 8008308:	b920      	cbnz	r0, 8008314 <_Bfree+0x20>
 800830a:	4b09      	ldr	r3, [pc, #36]	; (8008330 <_Bfree+0x3c>)
 800830c:	4809      	ldr	r0, [pc, #36]	; (8008334 <_Bfree+0x40>)
 800830e:	218a      	movs	r1, #138	; 0x8a
 8008310:	f7fe ffa2 	bl	8007258 <__assert_func>
 8008314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008318:	6006      	str	r6, [r0, #0]
 800831a:	60c6      	str	r6, [r0, #12]
 800831c:	b13c      	cbz	r4, 800832e <_Bfree+0x3a>
 800831e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008320:	6862      	ldr	r2, [r4, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008328:	6021      	str	r1, [r4, #0]
 800832a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	0800aac5 	.word	0x0800aac5
 8008334:	0800ab48 	.word	0x0800ab48

08008338 <__multadd>:
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	690d      	ldr	r5, [r1, #16]
 800833e:	4607      	mov	r7, r0
 8008340:	460c      	mov	r4, r1
 8008342:	461e      	mov	r6, r3
 8008344:	f101 0c14 	add.w	ip, r1, #20
 8008348:	2000      	movs	r0, #0
 800834a:	f8dc 3000 	ldr.w	r3, [ip]
 800834e:	b299      	uxth	r1, r3
 8008350:	fb02 6101 	mla	r1, r2, r1, r6
 8008354:	0c1e      	lsrs	r6, r3, #16
 8008356:	0c0b      	lsrs	r3, r1, #16
 8008358:	fb02 3306 	mla	r3, r2, r6, r3
 800835c:	b289      	uxth	r1, r1
 800835e:	3001      	adds	r0, #1
 8008360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008364:	4285      	cmp	r5, r0
 8008366:	f84c 1b04 	str.w	r1, [ip], #4
 800836a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800836e:	dcec      	bgt.n	800834a <__multadd+0x12>
 8008370:	b30e      	cbz	r6, 80083b6 <__multadd+0x7e>
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	42ab      	cmp	r3, r5
 8008376:	dc19      	bgt.n	80083ac <__multadd+0x74>
 8008378:	6861      	ldr	r1, [r4, #4]
 800837a:	4638      	mov	r0, r7
 800837c:	3101      	adds	r1, #1
 800837e:	f7ff ff79 	bl	8008274 <_Balloc>
 8008382:	4680      	mov	r8, r0
 8008384:	b928      	cbnz	r0, 8008392 <__multadd+0x5a>
 8008386:	4602      	mov	r2, r0
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <__multadd+0x84>)
 800838a:	480d      	ldr	r0, [pc, #52]	; (80083c0 <__multadd+0x88>)
 800838c:	21b5      	movs	r1, #181	; 0xb5
 800838e:	f7fe ff63 	bl	8007258 <__assert_func>
 8008392:	6922      	ldr	r2, [r4, #16]
 8008394:	3202      	adds	r2, #2
 8008396:	f104 010c 	add.w	r1, r4, #12
 800839a:	0092      	lsls	r2, r2, #2
 800839c:	300c      	adds	r0, #12
 800839e:	f7fe f900 	bl	80065a2 <memcpy>
 80083a2:	4621      	mov	r1, r4
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff ffa5 	bl	80082f4 <_Bfree>
 80083aa:	4644      	mov	r4, r8
 80083ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083b0:	3501      	adds	r5, #1
 80083b2:	615e      	str	r6, [r3, #20]
 80083b4:	6125      	str	r5, [r4, #16]
 80083b6:	4620      	mov	r0, r4
 80083b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083bc:	0800ab37 	.word	0x0800ab37
 80083c0:	0800ab48 	.word	0x0800ab48

080083c4 <__hi0bits>:
 80083c4:	0c03      	lsrs	r3, r0, #16
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	b9d3      	cbnz	r3, 8008400 <__hi0bits+0x3c>
 80083ca:	0400      	lsls	r0, r0, #16
 80083cc:	2310      	movs	r3, #16
 80083ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	0200      	lsleq	r0, r0, #8
 80083d6:	3308      	addeq	r3, #8
 80083d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083dc:	bf04      	itt	eq
 80083de:	0100      	lsleq	r0, r0, #4
 80083e0:	3304      	addeq	r3, #4
 80083e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083e6:	bf04      	itt	eq
 80083e8:	0080      	lsleq	r0, r0, #2
 80083ea:	3302      	addeq	r3, #2
 80083ec:	2800      	cmp	r0, #0
 80083ee:	db05      	blt.n	80083fc <__hi0bits+0x38>
 80083f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083f4:	f103 0301 	add.w	r3, r3, #1
 80083f8:	bf08      	it	eq
 80083fa:	2320      	moveq	r3, #32
 80083fc:	4618      	mov	r0, r3
 80083fe:	4770      	bx	lr
 8008400:	2300      	movs	r3, #0
 8008402:	e7e4      	b.n	80083ce <__hi0bits+0xa>

08008404 <__lo0bits>:
 8008404:	6803      	ldr	r3, [r0, #0]
 8008406:	f013 0207 	ands.w	r2, r3, #7
 800840a:	4601      	mov	r1, r0
 800840c:	d00b      	beq.n	8008426 <__lo0bits+0x22>
 800840e:	07da      	lsls	r2, r3, #31
 8008410:	d423      	bmi.n	800845a <__lo0bits+0x56>
 8008412:	0798      	lsls	r0, r3, #30
 8008414:	bf49      	itett	mi
 8008416:	085b      	lsrmi	r3, r3, #1
 8008418:	089b      	lsrpl	r3, r3, #2
 800841a:	2001      	movmi	r0, #1
 800841c:	600b      	strmi	r3, [r1, #0]
 800841e:	bf5c      	itt	pl
 8008420:	600b      	strpl	r3, [r1, #0]
 8008422:	2002      	movpl	r0, #2
 8008424:	4770      	bx	lr
 8008426:	b298      	uxth	r0, r3
 8008428:	b9a8      	cbnz	r0, 8008456 <__lo0bits+0x52>
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	2010      	movs	r0, #16
 800842e:	b2da      	uxtb	r2, r3
 8008430:	b90a      	cbnz	r2, 8008436 <__lo0bits+0x32>
 8008432:	3008      	adds	r0, #8
 8008434:	0a1b      	lsrs	r3, r3, #8
 8008436:	071a      	lsls	r2, r3, #28
 8008438:	bf04      	itt	eq
 800843a:	091b      	lsreq	r3, r3, #4
 800843c:	3004      	addeq	r0, #4
 800843e:	079a      	lsls	r2, r3, #30
 8008440:	bf04      	itt	eq
 8008442:	089b      	lsreq	r3, r3, #2
 8008444:	3002      	addeq	r0, #2
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	d403      	bmi.n	8008452 <__lo0bits+0x4e>
 800844a:	085b      	lsrs	r3, r3, #1
 800844c:	f100 0001 	add.w	r0, r0, #1
 8008450:	d005      	beq.n	800845e <__lo0bits+0x5a>
 8008452:	600b      	str	r3, [r1, #0]
 8008454:	4770      	bx	lr
 8008456:	4610      	mov	r0, r2
 8008458:	e7e9      	b.n	800842e <__lo0bits+0x2a>
 800845a:	2000      	movs	r0, #0
 800845c:	4770      	bx	lr
 800845e:	2020      	movs	r0, #32
 8008460:	4770      	bx	lr
	...

08008464 <__i2b>:
 8008464:	b510      	push	{r4, lr}
 8008466:	460c      	mov	r4, r1
 8008468:	2101      	movs	r1, #1
 800846a:	f7ff ff03 	bl	8008274 <_Balloc>
 800846e:	4602      	mov	r2, r0
 8008470:	b928      	cbnz	r0, 800847e <__i2b+0x1a>
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <__i2b+0x24>)
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <__i2b+0x28>)
 8008476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800847a:	f7fe feed 	bl	8007258 <__assert_func>
 800847e:	2301      	movs	r3, #1
 8008480:	6144      	str	r4, [r0, #20]
 8008482:	6103      	str	r3, [r0, #16]
 8008484:	bd10      	pop	{r4, pc}
 8008486:	bf00      	nop
 8008488:	0800ab37 	.word	0x0800ab37
 800848c:	0800ab48 	.word	0x0800ab48

08008490 <__multiply>:
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	4691      	mov	r9, r2
 8008496:	690a      	ldr	r2, [r1, #16]
 8008498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800849c:	429a      	cmp	r2, r3
 800849e:	bfb8      	it	lt
 80084a0:	460b      	movlt	r3, r1
 80084a2:	460c      	mov	r4, r1
 80084a4:	bfbc      	itt	lt
 80084a6:	464c      	movlt	r4, r9
 80084a8:	4699      	movlt	r9, r3
 80084aa:	6927      	ldr	r7, [r4, #16]
 80084ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084b0:	68a3      	ldr	r3, [r4, #8]
 80084b2:	6861      	ldr	r1, [r4, #4]
 80084b4:	eb07 060a 	add.w	r6, r7, sl
 80084b8:	42b3      	cmp	r3, r6
 80084ba:	b085      	sub	sp, #20
 80084bc:	bfb8      	it	lt
 80084be:	3101      	addlt	r1, #1
 80084c0:	f7ff fed8 	bl	8008274 <_Balloc>
 80084c4:	b930      	cbnz	r0, 80084d4 <__multiply+0x44>
 80084c6:	4602      	mov	r2, r0
 80084c8:	4b44      	ldr	r3, [pc, #272]	; (80085dc <__multiply+0x14c>)
 80084ca:	4845      	ldr	r0, [pc, #276]	; (80085e0 <__multiply+0x150>)
 80084cc:	f240 115d 	movw	r1, #349	; 0x15d
 80084d0:	f7fe fec2 	bl	8007258 <__assert_func>
 80084d4:	f100 0514 	add.w	r5, r0, #20
 80084d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084dc:	462b      	mov	r3, r5
 80084de:	2200      	movs	r2, #0
 80084e0:	4543      	cmp	r3, r8
 80084e2:	d321      	bcc.n	8008528 <__multiply+0x98>
 80084e4:	f104 0314 	add.w	r3, r4, #20
 80084e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084ec:	f109 0314 	add.w	r3, r9, #20
 80084f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084f4:	9202      	str	r2, [sp, #8]
 80084f6:	1b3a      	subs	r2, r7, r4
 80084f8:	3a15      	subs	r2, #21
 80084fa:	f022 0203 	bic.w	r2, r2, #3
 80084fe:	3204      	adds	r2, #4
 8008500:	f104 0115 	add.w	r1, r4, #21
 8008504:	428f      	cmp	r7, r1
 8008506:	bf38      	it	cc
 8008508:	2204      	movcc	r2, #4
 800850a:	9201      	str	r2, [sp, #4]
 800850c:	9a02      	ldr	r2, [sp, #8]
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d80c      	bhi.n	800852e <__multiply+0x9e>
 8008514:	2e00      	cmp	r6, #0
 8008516:	dd03      	ble.n	8008520 <__multiply+0x90>
 8008518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800851c:	2b00      	cmp	r3, #0
 800851e:	d05a      	beq.n	80085d6 <__multiply+0x146>
 8008520:	6106      	str	r6, [r0, #16]
 8008522:	b005      	add	sp, #20
 8008524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008528:	f843 2b04 	str.w	r2, [r3], #4
 800852c:	e7d8      	b.n	80084e0 <__multiply+0x50>
 800852e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008532:	f1ba 0f00 	cmp.w	sl, #0
 8008536:	d024      	beq.n	8008582 <__multiply+0xf2>
 8008538:	f104 0e14 	add.w	lr, r4, #20
 800853c:	46a9      	mov	r9, r5
 800853e:	f04f 0c00 	mov.w	ip, #0
 8008542:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008546:	f8d9 1000 	ldr.w	r1, [r9]
 800854a:	fa1f fb82 	uxth.w	fp, r2
 800854e:	b289      	uxth	r1, r1
 8008550:	fb0a 110b 	mla	r1, sl, fp, r1
 8008554:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008558:	f8d9 2000 	ldr.w	r2, [r9]
 800855c:	4461      	add	r1, ip
 800855e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008562:	fb0a c20b 	mla	r2, sl, fp, ip
 8008566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800856a:	b289      	uxth	r1, r1
 800856c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008570:	4577      	cmp	r7, lr
 8008572:	f849 1b04 	str.w	r1, [r9], #4
 8008576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800857a:	d8e2      	bhi.n	8008542 <__multiply+0xb2>
 800857c:	9a01      	ldr	r2, [sp, #4]
 800857e:	f845 c002 	str.w	ip, [r5, r2]
 8008582:	9a03      	ldr	r2, [sp, #12]
 8008584:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008588:	3304      	adds	r3, #4
 800858a:	f1b9 0f00 	cmp.w	r9, #0
 800858e:	d020      	beq.n	80085d2 <__multiply+0x142>
 8008590:	6829      	ldr	r1, [r5, #0]
 8008592:	f104 0c14 	add.w	ip, r4, #20
 8008596:	46ae      	mov	lr, r5
 8008598:	f04f 0a00 	mov.w	sl, #0
 800859c:	f8bc b000 	ldrh.w	fp, [ip]
 80085a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085a4:	fb09 220b 	mla	r2, r9, fp, r2
 80085a8:	4492      	add	sl, r2
 80085aa:	b289      	uxth	r1, r1
 80085ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085b0:	f84e 1b04 	str.w	r1, [lr], #4
 80085b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085b8:	f8be 1000 	ldrh.w	r1, [lr]
 80085bc:	0c12      	lsrs	r2, r2, #16
 80085be:	fb09 1102 	mla	r1, r9, r2, r1
 80085c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085c6:	4567      	cmp	r7, ip
 80085c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085cc:	d8e6      	bhi.n	800859c <__multiply+0x10c>
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	50a9      	str	r1, [r5, r2]
 80085d2:	3504      	adds	r5, #4
 80085d4:	e79a      	b.n	800850c <__multiply+0x7c>
 80085d6:	3e01      	subs	r6, #1
 80085d8:	e79c      	b.n	8008514 <__multiply+0x84>
 80085da:	bf00      	nop
 80085dc:	0800ab37 	.word	0x0800ab37
 80085e0:	0800ab48 	.word	0x0800ab48

080085e4 <__pow5mult>:
 80085e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e8:	4615      	mov	r5, r2
 80085ea:	f012 0203 	ands.w	r2, r2, #3
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	d007      	beq.n	8008604 <__pow5mult+0x20>
 80085f4:	4c25      	ldr	r4, [pc, #148]	; (800868c <__pow5mult+0xa8>)
 80085f6:	3a01      	subs	r2, #1
 80085f8:	2300      	movs	r3, #0
 80085fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085fe:	f7ff fe9b 	bl	8008338 <__multadd>
 8008602:	4607      	mov	r7, r0
 8008604:	10ad      	asrs	r5, r5, #2
 8008606:	d03d      	beq.n	8008684 <__pow5mult+0xa0>
 8008608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800860a:	b97c      	cbnz	r4, 800862c <__pow5mult+0x48>
 800860c:	2010      	movs	r0, #16
 800860e:	f7ff fe1d 	bl	800824c <malloc>
 8008612:	4602      	mov	r2, r0
 8008614:	6270      	str	r0, [r6, #36]	; 0x24
 8008616:	b928      	cbnz	r0, 8008624 <__pow5mult+0x40>
 8008618:	4b1d      	ldr	r3, [pc, #116]	; (8008690 <__pow5mult+0xac>)
 800861a:	481e      	ldr	r0, [pc, #120]	; (8008694 <__pow5mult+0xb0>)
 800861c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008620:	f7fe fe1a 	bl	8007258 <__assert_func>
 8008624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008628:	6004      	str	r4, [r0, #0]
 800862a:	60c4      	str	r4, [r0, #12]
 800862c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008634:	b94c      	cbnz	r4, 800864a <__pow5mult+0x66>
 8008636:	f240 2171 	movw	r1, #625	; 0x271
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ff12 	bl	8008464 <__i2b>
 8008640:	2300      	movs	r3, #0
 8008642:	f8c8 0008 	str.w	r0, [r8, #8]
 8008646:	4604      	mov	r4, r0
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	f04f 0900 	mov.w	r9, #0
 800864e:	07eb      	lsls	r3, r5, #31
 8008650:	d50a      	bpl.n	8008668 <__pow5mult+0x84>
 8008652:	4639      	mov	r1, r7
 8008654:	4622      	mov	r2, r4
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ff1a 	bl	8008490 <__multiply>
 800865c:	4639      	mov	r1, r7
 800865e:	4680      	mov	r8, r0
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff fe47 	bl	80082f4 <_Bfree>
 8008666:	4647      	mov	r7, r8
 8008668:	106d      	asrs	r5, r5, #1
 800866a:	d00b      	beq.n	8008684 <__pow5mult+0xa0>
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	b938      	cbnz	r0, 8008680 <__pow5mult+0x9c>
 8008670:	4622      	mov	r2, r4
 8008672:	4621      	mov	r1, r4
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff ff0b 	bl	8008490 <__multiply>
 800867a:	6020      	str	r0, [r4, #0]
 800867c:	f8c0 9000 	str.w	r9, [r0]
 8008680:	4604      	mov	r4, r0
 8008682:	e7e4      	b.n	800864e <__pow5mult+0x6a>
 8008684:	4638      	mov	r0, r7
 8008686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868a:	bf00      	nop
 800868c:	0800ac98 	.word	0x0800ac98
 8008690:	0800aac5 	.word	0x0800aac5
 8008694:	0800ab48 	.word	0x0800ab48

08008698 <__lshift>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	460c      	mov	r4, r1
 800869e:	6849      	ldr	r1, [r1, #4]
 80086a0:	6923      	ldr	r3, [r4, #16]
 80086a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	4607      	mov	r7, r0
 80086aa:	4691      	mov	r9, r2
 80086ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086b0:	f108 0601 	add.w	r6, r8, #1
 80086b4:	42b3      	cmp	r3, r6
 80086b6:	db0b      	blt.n	80086d0 <__lshift+0x38>
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7ff fddb 	bl	8008274 <_Balloc>
 80086be:	4605      	mov	r5, r0
 80086c0:	b948      	cbnz	r0, 80086d6 <__lshift+0x3e>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <__lshift+0xd8>)
 80086c6:	482b      	ldr	r0, [pc, #172]	; (8008774 <__lshift+0xdc>)
 80086c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086cc:	f7fe fdc4 	bl	8007258 <__assert_func>
 80086d0:	3101      	adds	r1, #1
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	e7ee      	b.n	80086b4 <__lshift+0x1c>
 80086d6:	2300      	movs	r3, #0
 80086d8:	f100 0114 	add.w	r1, r0, #20
 80086dc:	f100 0210 	add.w	r2, r0, #16
 80086e0:	4618      	mov	r0, r3
 80086e2:	4553      	cmp	r3, sl
 80086e4:	db37      	blt.n	8008756 <__lshift+0xbe>
 80086e6:	6920      	ldr	r0, [r4, #16]
 80086e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086ec:	f104 0314 	add.w	r3, r4, #20
 80086f0:	f019 091f 	ands.w	r9, r9, #31
 80086f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80086fc:	d02f      	beq.n	800875e <__lshift+0xc6>
 80086fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008702:	468a      	mov	sl, r1
 8008704:	f04f 0c00 	mov.w	ip, #0
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	fa02 f209 	lsl.w	r2, r2, r9
 800870e:	ea42 020c 	orr.w	r2, r2, ip
 8008712:	f84a 2b04 	str.w	r2, [sl], #4
 8008716:	f853 2b04 	ldr.w	r2, [r3], #4
 800871a:	4298      	cmp	r0, r3
 800871c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008720:	d8f2      	bhi.n	8008708 <__lshift+0x70>
 8008722:	1b03      	subs	r3, r0, r4
 8008724:	3b15      	subs	r3, #21
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	3304      	adds	r3, #4
 800872c:	f104 0215 	add.w	r2, r4, #21
 8008730:	4290      	cmp	r0, r2
 8008732:	bf38      	it	cc
 8008734:	2304      	movcc	r3, #4
 8008736:	f841 c003 	str.w	ip, [r1, r3]
 800873a:	f1bc 0f00 	cmp.w	ip, #0
 800873e:	d001      	beq.n	8008744 <__lshift+0xac>
 8008740:	f108 0602 	add.w	r6, r8, #2
 8008744:	3e01      	subs	r6, #1
 8008746:	4638      	mov	r0, r7
 8008748:	612e      	str	r6, [r5, #16]
 800874a:	4621      	mov	r1, r4
 800874c:	f7ff fdd2 	bl	80082f4 <_Bfree>
 8008750:	4628      	mov	r0, r5
 8008752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008756:	f842 0f04 	str.w	r0, [r2, #4]!
 800875a:	3301      	adds	r3, #1
 800875c:	e7c1      	b.n	80086e2 <__lshift+0x4a>
 800875e:	3904      	subs	r1, #4
 8008760:	f853 2b04 	ldr.w	r2, [r3], #4
 8008764:	f841 2f04 	str.w	r2, [r1, #4]!
 8008768:	4298      	cmp	r0, r3
 800876a:	d8f9      	bhi.n	8008760 <__lshift+0xc8>
 800876c:	e7ea      	b.n	8008744 <__lshift+0xac>
 800876e:	bf00      	nop
 8008770:	0800ab37 	.word	0x0800ab37
 8008774:	0800ab48 	.word	0x0800ab48

08008778 <__mcmp>:
 8008778:	b530      	push	{r4, r5, lr}
 800877a:	6902      	ldr	r2, [r0, #16]
 800877c:	690c      	ldr	r4, [r1, #16]
 800877e:	1b12      	subs	r2, r2, r4
 8008780:	d10e      	bne.n	80087a0 <__mcmp+0x28>
 8008782:	f100 0314 	add.w	r3, r0, #20
 8008786:	3114      	adds	r1, #20
 8008788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800878c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008798:	42a5      	cmp	r5, r4
 800879a:	d003      	beq.n	80087a4 <__mcmp+0x2c>
 800879c:	d305      	bcc.n	80087aa <__mcmp+0x32>
 800879e:	2201      	movs	r2, #1
 80087a0:	4610      	mov	r0, r2
 80087a2:	bd30      	pop	{r4, r5, pc}
 80087a4:	4283      	cmp	r3, r0
 80087a6:	d3f3      	bcc.n	8008790 <__mcmp+0x18>
 80087a8:	e7fa      	b.n	80087a0 <__mcmp+0x28>
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ae:	e7f7      	b.n	80087a0 <__mcmp+0x28>

080087b0 <__mdiff>:
 80087b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	460c      	mov	r4, r1
 80087b6:	4606      	mov	r6, r0
 80087b8:	4611      	mov	r1, r2
 80087ba:	4620      	mov	r0, r4
 80087bc:	4690      	mov	r8, r2
 80087be:	f7ff ffdb 	bl	8008778 <__mcmp>
 80087c2:	1e05      	subs	r5, r0, #0
 80087c4:	d110      	bne.n	80087e8 <__mdiff+0x38>
 80087c6:	4629      	mov	r1, r5
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff fd53 	bl	8008274 <_Balloc>
 80087ce:	b930      	cbnz	r0, 80087de <__mdiff+0x2e>
 80087d0:	4b3a      	ldr	r3, [pc, #232]	; (80088bc <__mdiff+0x10c>)
 80087d2:	4602      	mov	r2, r0
 80087d4:	f240 2132 	movw	r1, #562	; 0x232
 80087d8:	4839      	ldr	r0, [pc, #228]	; (80088c0 <__mdiff+0x110>)
 80087da:	f7fe fd3d 	bl	8007258 <__assert_func>
 80087de:	2301      	movs	r3, #1
 80087e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	bfa4      	itt	ge
 80087ea:	4643      	movge	r3, r8
 80087ec:	46a0      	movge	r8, r4
 80087ee:	4630      	mov	r0, r6
 80087f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087f4:	bfa6      	itte	ge
 80087f6:	461c      	movge	r4, r3
 80087f8:	2500      	movge	r5, #0
 80087fa:	2501      	movlt	r5, #1
 80087fc:	f7ff fd3a 	bl	8008274 <_Balloc>
 8008800:	b920      	cbnz	r0, 800880c <__mdiff+0x5c>
 8008802:	4b2e      	ldr	r3, [pc, #184]	; (80088bc <__mdiff+0x10c>)
 8008804:	4602      	mov	r2, r0
 8008806:	f44f 7110 	mov.w	r1, #576	; 0x240
 800880a:	e7e5      	b.n	80087d8 <__mdiff+0x28>
 800880c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008810:	6926      	ldr	r6, [r4, #16]
 8008812:	60c5      	str	r5, [r0, #12]
 8008814:	f104 0914 	add.w	r9, r4, #20
 8008818:	f108 0514 	add.w	r5, r8, #20
 800881c:	f100 0e14 	add.w	lr, r0, #20
 8008820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008828:	f108 0210 	add.w	r2, r8, #16
 800882c:	46f2      	mov	sl, lr
 800882e:	2100      	movs	r1, #0
 8008830:	f859 3b04 	ldr.w	r3, [r9], #4
 8008834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008838:	fa1f f883 	uxth.w	r8, r3
 800883c:	fa11 f18b 	uxtah	r1, r1, fp
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	eba1 0808 	sub.w	r8, r1, r8
 8008846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800884a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800884e:	fa1f f888 	uxth.w	r8, r8
 8008852:	1419      	asrs	r1, r3, #16
 8008854:	454e      	cmp	r6, r9
 8008856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800885a:	f84a 3b04 	str.w	r3, [sl], #4
 800885e:	d8e7      	bhi.n	8008830 <__mdiff+0x80>
 8008860:	1b33      	subs	r3, r6, r4
 8008862:	3b15      	subs	r3, #21
 8008864:	f023 0303 	bic.w	r3, r3, #3
 8008868:	3304      	adds	r3, #4
 800886a:	3415      	adds	r4, #21
 800886c:	42a6      	cmp	r6, r4
 800886e:	bf38      	it	cc
 8008870:	2304      	movcc	r3, #4
 8008872:	441d      	add	r5, r3
 8008874:	4473      	add	r3, lr
 8008876:	469e      	mov	lr, r3
 8008878:	462e      	mov	r6, r5
 800887a:	4566      	cmp	r6, ip
 800887c:	d30e      	bcc.n	800889c <__mdiff+0xec>
 800887e:	f10c 0203 	add.w	r2, ip, #3
 8008882:	1b52      	subs	r2, r2, r5
 8008884:	f022 0203 	bic.w	r2, r2, #3
 8008888:	3d03      	subs	r5, #3
 800888a:	45ac      	cmp	ip, r5
 800888c:	bf38      	it	cc
 800888e:	2200      	movcc	r2, #0
 8008890:	441a      	add	r2, r3
 8008892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008896:	b17b      	cbz	r3, 80088b8 <__mdiff+0x108>
 8008898:	6107      	str	r7, [r0, #16]
 800889a:	e7a3      	b.n	80087e4 <__mdiff+0x34>
 800889c:	f856 8b04 	ldr.w	r8, [r6], #4
 80088a0:	fa11 f288 	uxtah	r2, r1, r8
 80088a4:	1414      	asrs	r4, r2, #16
 80088a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088aa:	b292      	uxth	r2, r2
 80088ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088b0:	f84e 2b04 	str.w	r2, [lr], #4
 80088b4:	1421      	asrs	r1, r4, #16
 80088b6:	e7e0      	b.n	800887a <__mdiff+0xca>
 80088b8:	3f01      	subs	r7, #1
 80088ba:	e7ea      	b.n	8008892 <__mdiff+0xe2>
 80088bc:	0800ab37 	.word	0x0800ab37
 80088c0:	0800ab48 	.word	0x0800ab48

080088c4 <__d2b>:
 80088c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	4689      	mov	r9, r1
 80088ca:	2101      	movs	r1, #1
 80088cc:	ec57 6b10 	vmov	r6, r7, d0
 80088d0:	4690      	mov	r8, r2
 80088d2:	f7ff fccf 	bl	8008274 <_Balloc>
 80088d6:	4604      	mov	r4, r0
 80088d8:	b930      	cbnz	r0, 80088e8 <__d2b+0x24>
 80088da:	4602      	mov	r2, r0
 80088dc:	4b25      	ldr	r3, [pc, #148]	; (8008974 <__d2b+0xb0>)
 80088de:	4826      	ldr	r0, [pc, #152]	; (8008978 <__d2b+0xb4>)
 80088e0:	f240 310a 	movw	r1, #778	; 0x30a
 80088e4:	f7fe fcb8 	bl	8007258 <__assert_func>
 80088e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088f0:	bb35      	cbnz	r5, 8008940 <__d2b+0x7c>
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	d028      	beq.n	800894a <__d2b+0x86>
 80088f8:	4668      	mov	r0, sp
 80088fa:	9600      	str	r6, [sp, #0]
 80088fc:	f7ff fd82 	bl	8008404 <__lo0bits>
 8008900:	9900      	ldr	r1, [sp, #0]
 8008902:	b300      	cbz	r0, 8008946 <__d2b+0x82>
 8008904:	9a01      	ldr	r2, [sp, #4]
 8008906:	f1c0 0320 	rsb	r3, r0, #32
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	430b      	orrs	r3, r1
 8008910:	40c2      	lsrs	r2, r0
 8008912:	6163      	str	r3, [r4, #20]
 8008914:	9201      	str	r2, [sp, #4]
 8008916:	9b01      	ldr	r3, [sp, #4]
 8008918:	61a3      	str	r3, [r4, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf14      	ite	ne
 800891e:	2202      	movne	r2, #2
 8008920:	2201      	moveq	r2, #1
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	b1d5      	cbz	r5, 800895c <__d2b+0x98>
 8008926:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800892a:	4405      	add	r5, r0
 800892c:	f8c9 5000 	str.w	r5, [r9]
 8008930:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008934:	f8c8 0000 	str.w	r0, [r8]
 8008938:	4620      	mov	r0, r4
 800893a:	b003      	add	sp, #12
 800893c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008944:	e7d5      	b.n	80088f2 <__d2b+0x2e>
 8008946:	6161      	str	r1, [r4, #20]
 8008948:	e7e5      	b.n	8008916 <__d2b+0x52>
 800894a:	a801      	add	r0, sp, #4
 800894c:	f7ff fd5a 	bl	8008404 <__lo0bits>
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	6163      	str	r3, [r4, #20]
 8008954:	2201      	movs	r2, #1
 8008956:	6122      	str	r2, [r4, #16]
 8008958:	3020      	adds	r0, #32
 800895a:	e7e3      	b.n	8008924 <__d2b+0x60>
 800895c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008964:	f8c9 0000 	str.w	r0, [r9]
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	f7ff fd2b 	bl	80083c4 <__hi0bits>
 800896e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008972:	e7df      	b.n	8008934 <__d2b+0x70>
 8008974:	0800ab37 	.word	0x0800ab37
 8008978:	0800ab48 	.word	0x0800ab48

0800897c <_calloc_r>:
 800897c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800897e:	fba1 2402 	umull	r2, r4, r1, r2
 8008982:	b94c      	cbnz	r4, 8008998 <_calloc_r+0x1c>
 8008984:	4611      	mov	r1, r2
 8008986:	9201      	str	r2, [sp, #4]
 8008988:	f7fd fe42 	bl	8006610 <_malloc_r>
 800898c:	9a01      	ldr	r2, [sp, #4]
 800898e:	4605      	mov	r5, r0
 8008990:	b930      	cbnz	r0, 80089a0 <_calloc_r+0x24>
 8008992:	4628      	mov	r0, r5
 8008994:	b003      	add	sp, #12
 8008996:	bd30      	pop	{r4, r5, pc}
 8008998:	220c      	movs	r2, #12
 800899a:	6002      	str	r2, [r0, #0]
 800899c:	2500      	movs	r5, #0
 800899e:	e7f8      	b.n	8008992 <_calloc_r+0x16>
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7fd fe0c 	bl	80065be <memset>
 80089a6:	e7f4      	b.n	8008992 <_calloc_r+0x16>

080089a8 <_free_r>:
 80089a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089aa:	2900      	cmp	r1, #0
 80089ac:	d044      	beq.n	8008a38 <_free_r+0x90>
 80089ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b2:	9001      	str	r0, [sp, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f1a1 0404 	sub.w	r4, r1, #4
 80089ba:	bfb8      	it	lt
 80089bc:	18e4      	addlt	r4, r4, r3
 80089be:	f7ff fc4d 	bl	800825c <__malloc_lock>
 80089c2:	4a1e      	ldr	r2, [pc, #120]	; (8008a3c <_free_r+0x94>)
 80089c4:	9801      	ldr	r0, [sp, #4]
 80089c6:	6813      	ldr	r3, [r2, #0]
 80089c8:	b933      	cbnz	r3, 80089d8 <_free_r+0x30>
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	6014      	str	r4, [r2, #0]
 80089ce:	b003      	add	sp, #12
 80089d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089d4:	f7ff bc48 	b.w	8008268 <__malloc_unlock>
 80089d8:	42a3      	cmp	r3, r4
 80089da:	d908      	bls.n	80089ee <_free_r+0x46>
 80089dc:	6825      	ldr	r5, [r4, #0]
 80089de:	1961      	adds	r1, r4, r5
 80089e0:	428b      	cmp	r3, r1
 80089e2:	bf01      	itttt	eq
 80089e4:	6819      	ldreq	r1, [r3, #0]
 80089e6:	685b      	ldreq	r3, [r3, #4]
 80089e8:	1949      	addeq	r1, r1, r5
 80089ea:	6021      	streq	r1, [r4, #0]
 80089ec:	e7ed      	b.n	80089ca <_free_r+0x22>
 80089ee:	461a      	mov	r2, r3
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	b10b      	cbz	r3, 80089f8 <_free_r+0x50>
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	d9fa      	bls.n	80089ee <_free_r+0x46>
 80089f8:	6811      	ldr	r1, [r2, #0]
 80089fa:	1855      	adds	r5, r2, r1
 80089fc:	42a5      	cmp	r5, r4
 80089fe:	d10b      	bne.n	8008a18 <_free_r+0x70>
 8008a00:	6824      	ldr	r4, [r4, #0]
 8008a02:	4421      	add	r1, r4
 8008a04:	1854      	adds	r4, r2, r1
 8008a06:	42a3      	cmp	r3, r4
 8008a08:	6011      	str	r1, [r2, #0]
 8008a0a:	d1e0      	bne.n	80089ce <_free_r+0x26>
 8008a0c:	681c      	ldr	r4, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	6053      	str	r3, [r2, #4]
 8008a12:	4421      	add	r1, r4
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	e7da      	b.n	80089ce <_free_r+0x26>
 8008a18:	d902      	bls.n	8008a20 <_free_r+0x78>
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	e7d6      	b.n	80089ce <_free_r+0x26>
 8008a20:	6825      	ldr	r5, [r4, #0]
 8008a22:	1961      	adds	r1, r4, r5
 8008a24:	428b      	cmp	r3, r1
 8008a26:	bf04      	itt	eq
 8008a28:	6819      	ldreq	r1, [r3, #0]
 8008a2a:	685b      	ldreq	r3, [r3, #4]
 8008a2c:	6063      	str	r3, [r4, #4]
 8008a2e:	bf04      	itt	eq
 8008a30:	1949      	addeq	r1, r1, r5
 8008a32:	6021      	streq	r1, [r4, #0]
 8008a34:	6054      	str	r4, [r2, #4]
 8008a36:	e7ca      	b.n	80089ce <_free_r+0x26>
 8008a38:	b003      	add	sp, #12
 8008a3a:	bd30      	pop	{r4, r5, pc}
 8008a3c:	2000049c 	.word	0x2000049c

08008a40 <__ssputs_r>:
 8008a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a44:	688e      	ldr	r6, [r1, #8]
 8008a46:	429e      	cmp	r6, r3
 8008a48:	4682      	mov	sl, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	4690      	mov	r8, r2
 8008a4e:	461f      	mov	r7, r3
 8008a50:	d838      	bhi.n	8008ac4 <__ssputs_r+0x84>
 8008a52:	898a      	ldrh	r2, [r1, #12]
 8008a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a58:	d032      	beq.n	8008ac0 <__ssputs_r+0x80>
 8008a5a:	6825      	ldr	r5, [r4, #0]
 8008a5c:	6909      	ldr	r1, [r1, #16]
 8008a5e:	eba5 0901 	sub.w	r9, r5, r1
 8008a62:	6965      	ldr	r5, [r4, #20]
 8008a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	444b      	add	r3, r9
 8008a70:	106d      	asrs	r5, r5, #1
 8008a72:	429d      	cmp	r5, r3
 8008a74:	bf38      	it	cc
 8008a76:	461d      	movcc	r5, r3
 8008a78:	0553      	lsls	r3, r2, #21
 8008a7a:	d531      	bpl.n	8008ae0 <__ssputs_r+0xa0>
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7fd fdc7 	bl	8006610 <_malloc_r>
 8008a82:	4606      	mov	r6, r0
 8008a84:	b950      	cbnz	r0, 8008a9c <__ssputs_r+0x5c>
 8008a86:	230c      	movs	r3, #12
 8008a88:	f8ca 3000 	str.w	r3, [sl]
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9c:	6921      	ldr	r1, [r4, #16]
 8008a9e:	464a      	mov	r2, r9
 8008aa0:	f7fd fd7f 	bl	80065a2 <memcpy>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	6126      	str	r6, [r4, #16]
 8008ab2:	6165      	str	r5, [r4, #20]
 8008ab4:	444e      	add	r6, r9
 8008ab6:	eba5 0509 	sub.w	r5, r5, r9
 8008aba:	6026      	str	r6, [r4, #0]
 8008abc:	60a5      	str	r5, [r4, #8]
 8008abe:	463e      	mov	r6, r7
 8008ac0:	42be      	cmp	r6, r7
 8008ac2:	d900      	bls.n	8008ac6 <__ssputs_r+0x86>
 8008ac4:	463e      	mov	r6, r7
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	4632      	mov	r2, r6
 8008aca:	4641      	mov	r1, r8
 8008acc:	f000 fabc 	bl	8009048 <memmove>
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	1b9b      	subs	r3, r3, r6
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	4433      	add	r3, r6
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	2000      	movs	r0, #0
 8008ade:	e7db      	b.n	8008a98 <__ssputs_r+0x58>
 8008ae0:	462a      	mov	r2, r5
 8008ae2:	f000 facb 	bl	800907c <_realloc_r>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d1e1      	bne.n	8008ab0 <__ssputs_r+0x70>
 8008aec:	6921      	ldr	r1, [r4, #16]
 8008aee:	4650      	mov	r0, sl
 8008af0:	f7ff ff5a 	bl	80089a8 <_free_r>
 8008af4:	e7c7      	b.n	8008a86 <__ssputs_r+0x46>
	...

08008af8 <_svfiprintf_r>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	4698      	mov	r8, r3
 8008afe:	898b      	ldrh	r3, [r1, #12]
 8008b00:	061b      	lsls	r3, r3, #24
 8008b02:	b09d      	sub	sp, #116	; 0x74
 8008b04:	4607      	mov	r7, r0
 8008b06:	460d      	mov	r5, r1
 8008b08:	4614      	mov	r4, r2
 8008b0a:	d50e      	bpl.n	8008b2a <_svfiprintf_r+0x32>
 8008b0c:	690b      	ldr	r3, [r1, #16]
 8008b0e:	b963      	cbnz	r3, 8008b2a <_svfiprintf_r+0x32>
 8008b10:	2140      	movs	r1, #64	; 0x40
 8008b12:	f7fd fd7d 	bl	8006610 <_malloc_r>
 8008b16:	6028      	str	r0, [r5, #0]
 8008b18:	6128      	str	r0, [r5, #16]
 8008b1a:	b920      	cbnz	r0, 8008b26 <_svfiprintf_r+0x2e>
 8008b1c:	230c      	movs	r3, #12
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b24:	e0d1      	b.n	8008cca <_svfiprintf_r+0x1d2>
 8008b26:	2340      	movs	r3, #64	; 0x40
 8008b28:	616b      	str	r3, [r5, #20]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2e:	2320      	movs	r3, #32
 8008b30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b38:	2330      	movs	r3, #48	; 0x30
 8008b3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ce4 <_svfiprintf_r+0x1ec>
 8008b3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b42:	f04f 0901 	mov.w	r9, #1
 8008b46:	4623      	mov	r3, r4
 8008b48:	469a      	mov	sl, r3
 8008b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4e:	b10a      	cbz	r2, 8008b54 <_svfiprintf_r+0x5c>
 8008b50:	2a25      	cmp	r2, #37	; 0x25
 8008b52:	d1f9      	bne.n	8008b48 <_svfiprintf_r+0x50>
 8008b54:	ebba 0b04 	subs.w	fp, sl, r4
 8008b58:	d00b      	beq.n	8008b72 <_svfiprintf_r+0x7a>
 8008b5a:	465b      	mov	r3, fp
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ff6d 	bl	8008a40 <__ssputs_r>
 8008b66:	3001      	adds	r0, #1
 8008b68:	f000 80aa 	beq.w	8008cc0 <_svfiprintf_r+0x1c8>
 8008b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6e:	445a      	add	r2, fp
 8008b70:	9209      	str	r2, [sp, #36]	; 0x24
 8008b72:	f89a 3000 	ldrb.w	r3, [sl]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80a2 	beq.w	8008cc0 <_svfiprintf_r+0x1c8>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b86:	f10a 0a01 	add.w	sl, sl, #1
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	9307      	str	r3, [sp, #28]
 8008b8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b92:	931a      	str	r3, [sp, #104]	; 0x68
 8008b94:	4654      	mov	r4, sl
 8008b96:	2205      	movs	r2, #5
 8008b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9c:	4851      	ldr	r0, [pc, #324]	; (8008ce4 <_svfiprintf_r+0x1ec>)
 8008b9e:	f7f7 fb1f 	bl	80001e0 <memchr>
 8008ba2:	9a04      	ldr	r2, [sp, #16]
 8008ba4:	b9d8      	cbnz	r0, 8008bde <_svfiprintf_r+0xe6>
 8008ba6:	06d0      	lsls	r0, r2, #27
 8008ba8:	bf44      	itt	mi
 8008baa:	2320      	movmi	r3, #32
 8008bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb0:	0711      	lsls	r1, r2, #28
 8008bb2:	bf44      	itt	mi
 8008bb4:	232b      	movmi	r3, #43	; 0x2b
 8008bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bba:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc0:	d015      	beq.n	8008bee <_svfiprintf_r+0xf6>
 8008bc2:	9a07      	ldr	r2, [sp, #28]
 8008bc4:	4654      	mov	r4, sl
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	f04f 0c0a 	mov.w	ip, #10
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd2:	3b30      	subs	r3, #48	; 0x30
 8008bd4:	2b09      	cmp	r3, #9
 8008bd6:	d94e      	bls.n	8008c76 <_svfiprintf_r+0x17e>
 8008bd8:	b1b0      	cbz	r0, 8008c08 <_svfiprintf_r+0x110>
 8008bda:	9207      	str	r2, [sp, #28]
 8008bdc:	e014      	b.n	8008c08 <_svfiprintf_r+0x110>
 8008bde:	eba0 0308 	sub.w	r3, r0, r8
 8008be2:	fa09 f303 	lsl.w	r3, r9, r3
 8008be6:	4313      	orrs	r3, r2
 8008be8:	9304      	str	r3, [sp, #16]
 8008bea:	46a2      	mov	sl, r4
 8008bec:	e7d2      	b.n	8008b94 <_svfiprintf_r+0x9c>
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	1d19      	adds	r1, r3, #4
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	9103      	str	r1, [sp, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	bfbb      	ittet	lt
 8008bfa:	425b      	neglt	r3, r3
 8008bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8008c00:	9307      	strge	r3, [sp, #28]
 8008c02:	9307      	strlt	r3, [sp, #28]
 8008c04:	bfb8      	it	lt
 8008c06:	9204      	strlt	r2, [sp, #16]
 8008c08:	7823      	ldrb	r3, [r4, #0]
 8008c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0c:	d10c      	bne.n	8008c28 <_svfiprintf_r+0x130>
 8008c0e:	7863      	ldrb	r3, [r4, #1]
 8008c10:	2b2a      	cmp	r3, #42	; 0x2a
 8008c12:	d135      	bne.n	8008c80 <_svfiprintf_r+0x188>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	1d1a      	adds	r2, r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	9203      	str	r2, [sp, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfb8      	it	lt
 8008c20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c24:	3402      	adds	r4, #2
 8008c26:	9305      	str	r3, [sp, #20]
 8008c28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cf4 <_svfiprintf_r+0x1fc>
 8008c2c:	7821      	ldrb	r1, [r4, #0]
 8008c2e:	2203      	movs	r2, #3
 8008c30:	4650      	mov	r0, sl
 8008c32:	f7f7 fad5 	bl	80001e0 <memchr>
 8008c36:	b140      	cbz	r0, 8008c4a <_svfiprintf_r+0x152>
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	eba0 000a 	sub.w	r0, r0, sl
 8008c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c42:	9b04      	ldr	r3, [sp, #16]
 8008c44:	4303      	orrs	r3, r0
 8008c46:	3401      	adds	r4, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4e:	4826      	ldr	r0, [pc, #152]	; (8008ce8 <_svfiprintf_r+0x1f0>)
 8008c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c54:	2206      	movs	r2, #6
 8008c56:	f7f7 fac3 	bl	80001e0 <memchr>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d038      	beq.n	8008cd0 <_svfiprintf_r+0x1d8>
 8008c5e:	4b23      	ldr	r3, [pc, #140]	; (8008cec <_svfiprintf_r+0x1f4>)
 8008c60:	bb1b      	cbnz	r3, 8008caa <_svfiprintf_r+0x1b2>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	3307      	adds	r3, #7
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	4433      	add	r3, r6
 8008c72:	9309      	str	r3, [sp, #36]	; 0x24
 8008c74:	e767      	b.n	8008b46 <_svfiprintf_r+0x4e>
 8008c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e7a5      	b.n	8008bcc <_svfiprintf_r+0xd4>
 8008c80:	2300      	movs	r3, #0
 8008c82:	3401      	adds	r4, #1
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0c0a 	mov.w	ip, #10
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c92:	3a30      	subs	r2, #48	; 0x30
 8008c94:	2a09      	cmp	r2, #9
 8008c96:	d903      	bls.n	8008ca0 <_svfiprintf_r+0x1a8>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d0c5      	beq.n	8008c28 <_svfiprintf_r+0x130>
 8008c9c:	9105      	str	r1, [sp, #20]
 8008c9e:	e7c3      	b.n	8008c28 <_svfiprintf_r+0x130>
 8008ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7f0      	b.n	8008c8c <_svfiprintf_r+0x194>
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <_svfiprintf_r+0x1f8>)
 8008cb2:	a904      	add	r1, sp, #16
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7fd fdbf 	bl	8006838 <_printf_float>
 8008cba:	1c42      	adds	r2, r0, #1
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	d1d6      	bne.n	8008c6e <_svfiprintf_r+0x176>
 8008cc0:	89ab      	ldrh	r3, [r5, #12]
 8008cc2:	065b      	lsls	r3, r3, #25
 8008cc4:	f53f af2c 	bmi.w	8008b20 <_svfiprintf_r+0x28>
 8008cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cca:	b01d      	add	sp, #116	; 0x74
 8008ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd0:	ab03      	add	r3, sp, #12
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	462a      	mov	r2, r5
 8008cd6:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <_svfiprintf_r+0x1f8>)
 8008cd8:	a904      	add	r1, sp, #16
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7fe f850 	bl	8006d80 <_printf_i>
 8008ce0:	e7eb      	b.n	8008cba <_svfiprintf_r+0x1c2>
 8008ce2:	bf00      	nop
 8008ce4:	0800aca4 	.word	0x0800aca4
 8008ce8:	0800acae 	.word	0x0800acae
 8008cec:	08006839 	.word	0x08006839
 8008cf0:	08008a41 	.word	0x08008a41
 8008cf4:	0800acaa 	.word	0x0800acaa

08008cf8 <__sfputc_r>:
 8008cf8:	6893      	ldr	r3, [r2, #8]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	b410      	push	{r4}
 8008d00:	6093      	str	r3, [r2, #8]
 8008d02:	da08      	bge.n	8008d16 <__sfputc_r+0x1e>
 8008d04:	6994      	ldr	r4, [r2, #24]
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	db01      	blt.n	8008d0e <__sfputc_r+0x16>
 8008d0a:	290a      	cmp	r1, #10
 8008d0c:	d103      	bne.n	8008d16 <__sfputc_r+0x1e>
 8008d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d12:	f7fe b9cf 	b.w	80070b4 <__swbuf_r>
 8008d16:	6813      	ldr	r3, [r2, #0]
 8008d18:	1c58      	adds	r0, r3, #1
 8008d1a:	6010      	str	r0, [r2, #0]
 8008d1c:	7019      	strb	r1, [r3, #0]
 8008d1e:	4608      	mov	r0, r1
 8008d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <__sfputs_r>:
 8008d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	18d5      	adds	r5, r2, r3
 8008d30:	42ac      	cmp	r4, r5
 8008d32:	d101      	bne.n	8008d38 <__sfputs_r+0x12>
 8008d34:	2000      	movs	r0, #0
 8008d36:	e007      	b.n	8008d48 <__sfputs_r+0x22>
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	463a      	mov	r2, r7
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff ffda 	bl	8008cf8 <__sfputc_r>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d1f3      	bne.n	8008d30 <__sfputs_r+0xa>
 8008d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d4c <_vfiprintf_r>:
 8008d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d50:	460d      	mov	r5, r1
 8008d52:	b09d      	sub	sp, #116	; 0x74
 8008d54:	4614      	mov	r4, r2
 8008d56:	4698      	mov	r8, r3
 8008d58:	4606      	mov	r6, r0
 8008d5a:	b118      	cbz	r0, 8008d64 <_vfiprintf_r+0x18>
 8008d5c:	6983      	ldr	r3, [r0, #24]
 8008d5e:	b90b      	cbnz	r3, 8008d64 <_vfiprintf_r+0x18>
 8008d60:	f7fd fb5a 	bl	8006418 <__sinit>
 8008d64:	4b89      	ldr	r3, [pc, #548]	; (8008f8c <_vfiprintf_r+0x240>)
 8008d66:	429d      	cmp	r5, r3
 8008d68:	d11b      	bne.n	8008da2 <_vfiprintf_r+0x56>
 8008d6a:	6875      	ldr	r5, [r6, #4]
 8008d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d6e:	07d9      	lsls	r1, r3, #31
 8008d70:	d405      	bmi.n	8008d7e <_vfiprintf_r+0x32>
 8008d72:	89ab      	ldrh	r3, [r5, #12]
 8008d74:	059a      	lsls	r2, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <_vfiprintf_r+0x32>
 8008d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d7a:	f7fd fc10 	bl	800659e <__retarget_lock_acquire_recursive>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	071b      	lsls	r3, r3, #28
 8008d82:	d501      	bpl.n	8008d88 <_vfiprintf_r+0x3c>
 8008d84:	692b      	ldr	r3, [r5, #16]
 8008d86:	b9eb      	cbnz	r3, 8008dc4 <_vfiprintf_r+0x78>
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7fe f9f6 	bl	800717c <__swsetup_r>
 8008d90:	b1c0      	cbz	r0, 8008dc4 <_vfiprintf_r+0x78>
 8008d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d94:	07dc      	lsls	r4, r3, #31
 8008d96:	d50e      	bpl.n	8008db6 <_vfiprintf_r+0x6a>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d9c:	b01d      	add	sp, #116	; 0x74
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	4b7b      	ldr	r3, [pc, #492]	; (8008f90 <_vfiprintf_r+0x244>)
 8008da4:	429d      	cmp	r5, r3
 8008da6:	d101      	bne.n	8008dac <_vfiprintf_r+0x60>
 8008da8:	68b5      	ldr	r5, [r6, #8]
 8008daa:	e7df      	b.n	8008d6c <_vfiprintf_r+0x20>
 8008dac:	4b79      	ldr	r3, [pc, #484]	; (8008f94 <_vfiprintf_r+0x248>)
 8008dae:	429d      	cmp	r5, r3
 8008db0:	bf08      	it	eq
 8008db2:	68f5      	ldreq	r5, [r6, #12]
 8008db4:	e7da      	b.n	8008d6c <_vfiprintf_r+0x20>
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	0598      	lsls	r0, r3, #22
 8008dba:	d4ed      	bmi.n	8008d98 <_vfiprintf_r+0x4c>
 8008dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dbe:	f7fd fbef 	bl	80065a0 <__retarget_lock_release_recursive>
 8008dc2:	e7e9      	b.n	8008d98 <_vfiprintf_r+0x4c>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd2:	2330      	movs	r3, #48	; 0x30
 8008dd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f98 <_vfiprintf_r+0x24c>
 8008dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ddc:	f04f 0901 	mov.w	r9, #1
 8008de0:	4623      	mov	r3, r4
 8008de2:	469a      	mov	sl, r3
 8008de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de8:	b10a      	cbz	r2, 8008dee <_vfiprintf_r+0xa2>
 8008dea:	2a25      	cmp	r2, #37	; 0x25
 8008dec:	d1f9      	bne.n	8008de2 <_vfiprintf_r+0x96>
 8008dee:	ebba 0b04 	subs.w	fp, sl, r4
 8008df2:	d00b      	beq.n	8008e0c <_vfiprintf_r+0xc0>
 8008df4:	465b      	mov	r3, fp
 8008df6:	4622      	mov	r2, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff ff93 	bl	8008d26 <__sfputs_r>
 8008e00:	3001      	adds	r0, #1
 8008e02:	f000 80aa 	beq.w	8008f5a <_vfiprintf_r+0x20e>
 8008e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e08:	445a      	add	r2, fp
 8008e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80a2 	beq.w	8008f5a <_vfiprintf_r+0x20e>
 8008e16:	2300      	movs	r3, #0
 8008e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e20:	f10a 0a01 	add.w	sl, sl, #1
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	9307      	str	r3, [sp, #28]
 8008e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e2e:	4654      	mov	r4, sl
 8008e30:	2205      	movs	r2, #5
 8008e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e36:	4858      	ldr	r0, [pc, #352]	; (8008f98 <_vfiprintf_r+0x24c>)
 8008e38:	f7f7 f9d2 	bl	80001e0 <memchr>
 8008e3c:	9a04      	ldr	r2, [sp, #16]
 8008e3e:	b9d8      	cbnz	r0, 8008e78 <_vfiprintf_r+0x12c>
 8008e40:	06d1      	lsls	r1, r2, #27
 8008e42:	bf44      	itt	mi
 8008e44:	2320      	movmi	r3, #32
 8008e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e4a:	0713      	lsls	r3, r2, #28
 8008e4c:	bf44      	itt	mi
 8008e4e:	232b      	movmi	r3, #43	; 0x2b
 8008e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e54:	f89a 3000 	ldrb.w	r3, [sl]
 8008e58:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5a:	d015      	beq.n	8008e88 <_vfiprintf_r+0x13c>
 8008e5c:	9a07      	ldr	r2, [sp, #28]
 8008e5e:	4654      	mov	r4, sl
 8008e60:	2000      	movs	r0, #0
 8008e62:	f04f 0c0a 	mov.w	ip, #10
 8008e66:	4621      	mov	r1, r4
 8008e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e6c:	3b30      	subs	r3, #48	; 0x30
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d94e      	bls.n	8008f10 <_vfiprintf_r+0x1c4>
 8008e72:	b1b0      	cbz	r0, 8008ea2 <_vfiprintf_r+0x156>
 8008e74:	9207      	str	r2, [sp, #28]
 8008e76:	e014      	b.n	8008ea2 <_vfiprintf_r+0x156>
 8008e78:	eba0 0308 	sub.w	r3, r0, r8
 8008e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e80:	4313      	orrs	r3, r2
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	46a2      	mov	sl, r4
 8008e86:	e7d2      	b.n	8008e2e <_vfiprintf_r+0xe2>
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	1d19      	adds	r1, r3, #4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	9103      	str	r1, [sp, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bfbb      	ittet	lt
 8008e94:	425b      	neglt	r3, r3
 8008e96:	f042 0202 	orrlt.w	r2, r2, #2
 8008e9a:	9307      	strge	r3, [sp, #28]
 8008e9c:	9307      	strlt	r3, [sp, #28]
 8008e9e:	bfb8      	it	lt
 8008ea0:	9204      	strlt	r2, [sp, #16]
 8008ea2:	7823      	ldrb	r3, [r4, #0]
 8008ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea6:	d10c      	bne.n	8008ec2 <_vfiprintf_r+0x176>
 8008ea8:	7863      	ldrb	r3, [r4, #1]
 8008eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8008eac:	d135      	bne.n	8008f1a <_vfiprintf_r+0x1ce>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	1d1a      	adds	r2, r3, #4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	9203      	str	r2, [sp, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bfb8      	it	lt
 8008eba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ebe:	3402      	adds	r4, #2
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fa8 <_vfiprintf_r+0x25c>
 8008ec6:	7821      	ldrb	r1, [r4, #0]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	4650      	mov	r0, sl
 8008ecc:	f7f7 f988 	bl	80001e0 <memchr>
 8008ed0:	b140      	cbz	r0, 8008ee4 <_vfiprintf_r+0x198>
 8008ed2:	2340      	movs	r3, #64	; 0x40
 8008ed4:	eba0 000a 	sub.w	r0, r0, sl
 8008ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8008edc:	9b04      	ldr	r3, [sp, #16]
 8008ede:	4303      	orrs	r3, r0
 8008ee0:	3401      	adds	r4, #1
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee8:	482c      	ldr	r0, [pc, #176]	; (8008f9c <_vfiprintf_r+0x250>)
 8008eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eee:	2206      	movs	r2, #6
 8008ef0:	f7f7 f976 	bl	80001e0 <memchr>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d03f      	beq.n	8008f78 <_vfiprintf_r+0x22c>
 8008ef8:	4b29      	ldr	r3, [pc, #164]	; (8008fa0 <_vfiprintf_r+0x254>)
 8008efa:	bb1b      	cbnz	r3, 8008f44 <_vfiprintf_r+0x1f8>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	3307      	adds	r3, #7
 8008f00:	f023 0307 	bic.w	r3, r3, #7
 8008f04:	3308      	adds	r3, #8
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0a:	443b      	add	r3, r7
 8008f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0e:	e767      	b.n	8008de0 <_vfiprintf_r+0x94>
 8008f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f14:	460c      	mov	r4, r1
 8008f16:	2001      	movs	r0, #1
 8008f18:	e7a5      	b.n	8008e66 <_vfiprintf_r+0x11a>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	3401      	adds	r4, #1
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f04f 0c0a 	mov.w	ip, #10
 8008f26:	4620      	mov	r0, r4
 8008f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f2c:	3a30      	subs	r2, #48	; 0x30
 8008f2e:	2a09      	cmp	r2, #9
 8008f30:	d903      	bls.n	8008f3a <_vfiprintf_r+0x1ee>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0c5      	beq.n	8008ec2 <_vfiprintf_r+0x176>
 8008f36:	9105      	str	r1, [sp, #20]
 8008f38:	e7c3      	b.n	8008ec2 <_vfiprintf_r+0x176>
 8008f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3e:	4604      	mov	r4, r0
 8008f40:	2301      	movs	r3, #1
 8008f42:	e7f0      	b.n	8008f26 <_vfiprintf_r+0x1da>
 8008f44:	ab03      	add	r3, sp, #12
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4b16      	ldr	r3, [pc, #88]	; (8008fa4 <_vfiprintf_r+0x258>)
 8008f4c:	a904      	add	r1, sp, #16
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f7fd fc72 	bl	8006838 <_printf_float>
 8008f54:	4607      	mov	r7, r0
 8008f56:	1c78      	adds	r0, r7, #1
 8008f58:	d1d6      	bne.n	8008f08 <_vfiprintf_r+0x1bc>
 8008f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f5c:	07d9      	lsls	r1, r3, #31
 8008f5e:	d405      	bmi.n	8008f6c <_vfiprintf_r+0x220>
 8008f60:	89ab      	ldrh	r3, [r5, #12]
 8008f62:	059a      	lsls	r2, r3, #22
 8008f64:	d402      	bmi.n	8008f6c <_vfiprintf_r+0x220>
 8008f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f68:	f7fd fb1a 	bl	80065a0 <__retarget_lock_release_recursive>
 8008f6c:	89ab      	ldrh	r3, [r5, #12]
 8008f6e:	065b      	lsls	r3, r3, #25
 8008f70:	f53f af12 	bmi.w	8008d98 <_vfiprintf_r+0x4c>
 8008f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f76:	e711      	b.n	8008d9c <_vfiprintf_r+0x50>
 8008f78:	ab03      	add	r3, sp, #12
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <_vfiprintf_r+0x258>)
 8008f80:	a904      	add	r1, sp, #16
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7fd fefc 	bl	8006d80 <_printf_i>
 8008f88:	e7e4      	b.n	8008f54 <_vfiprintf_r+0x208>
 8008f8a:	bf00      	nop
 8008f8c:	0800aa04 	.word	0x0800aa04
 8008f90:	0800aa24 	.word	0x0800aa24
 8008f94:	0800a9e4 	.word	0x0800a9e4
 8008f98:	0800aca4 	.word	0x0800aca4
 8008f9c:	0800acae 	.word	0x0800acae
 8008fa0:	08006839 	.word	0x08006839
 8008fa4:	08008d27 	.word	0x08008d27
 8008fa8:	0800acaa 	.word	0x0800acaa

08008fac <_read_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_read_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7fd f8bf 	bl	800613e <_read>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_read_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_read_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	200004a4 	.word	0x200004a4

08008fd0 <abort>:
 8008fd0:	b508      	push	{r3, lr}
 8008fd2:	2006      	movs	r0, #6
 8008fd4:	f000 f8aa 	bl	800912c <raise>
 8008fd8:	2001      	movs	r0, #1
 8008fda:	f001 f84b 	bl	800a074 <_exit>
	...

08008fe0 <_fstat_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4d07      	ldr	r5, [pc, #28]	; (8009000 <_fstat_r+0x20>)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4611      	mov	r1, r2
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	f7fd f98a 	bl	8006306 <_fstat>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d102      	bne.n	8008ffc <_fstat_r+0x1c>
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	b103      	cbz	r3, 8008ffc <_fstat_r+0x1c>
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	bd38      	pop	{r3, r4, r5, pc}
 8008ffe:	bf00      	nop
 8009000:	200004a4 	.word	0x200004a4

08009004 <_isatty_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4d06      	ldr	r5, [pc, #24]	; (8009020 <_isatty_r+0x1c>)
 8009008:	2300      	movs	r3, #0
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	f7fd f987 	bl	8006322 <_isatty>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_isatty_r+0x1a>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_isatty_r+0x1a>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	200004a4 	.word	0x200004a4

08009024 <__ascii_mbtowc>:
 8009024:	b082      	sub	sp, #8
 8009026:	b901      	cbnz	r1, 800902a <__ascii_mbtowc+0x6>
 8009028:	a901      	add	r1, sp, #4
 800902a:	b142      	cbz	r2, 800903e <__ascii_mbtowc+0x1a>
 800902c:	b14b      	cbz	r3, 8009042 <__ascii_mbtowc+0x1e>
 800902e:	7813      	ldrb	r3, [r2, #0]
 8009030:	600b      	str	r3, [r1, #0]
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	1e10      	subs	r0, r2, #0
 8009036:	bf18      	it	ne
 8009038:	2001      	movne	r0, #1
 800903a:	b002      	add	sp, #8
 800903c:	4770      	bx	lr
 800903e:	4610      	mov	r0, r2
 8009040:	e7fb      	b.n	800903a <__ascii_mbtowc+0x16>
 8009042:	f06f 0001 	mvn.w	r0, #1
 8009046:	e7f8      	b.n	800903a <__ascii_mbtowc+0x16>

08009048 <memmove>:
 8009048:	4288      	cmp	r0, r1
 800904a:	b510      	push	{r4, lr}
 800904c:	eb01 0402 	add.w	r4, r1, r2
 8009050:	d902      	bls.n	8009058 <memmove+0x10>
 8009052:	4284      	cmp	r4, r0
 8009054:	4623      	mov	r3, r4
 8009056:	d807      	bhi.n	8009068 <memmove+0x20>
 8009058:	1e43      	subs	r3, r0, #1
 800905a:	42a1      	cmp	r1, r4
 800905c:	d008      	beq.n	8009070 <memmove+0x28>
 800905e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009066:	e7f8      	b.n	800905a <memmove+0x12>
 8009068:	4402      	add	r2, r0
 800906a:	4601      	mov	r1, r0
 800906c:	428a      	cmp	r2, r1
 800906e:	d100      	bne.n	8009072 <memmove+0x2a>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800907a:	e7f7      	b.n	800906c <memmove+0x24>

0800907c <_realloc_r>:
 800907c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	4680      	mov	r8, r0
 8009082:	4614      	mov	r4, r2
 8009084:	460e      	mov	r6, r1
 8009086:	b921      	cbnz	r1, 8009092 <_realloc_r+0x16>
 8009088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	4611      	mov	r1, r2
 800908e:	f7fd babf 	b.w	8006610 <_malloc_r>
 8009092:	b92a      	cbnz	r2, 80090a0 <_realloc_r+0x24>
 8009094:	f7ff fc88 	bl	80089a8 <_free_r>
 8009098:	4625      	mov	r5, r4
 800909a:	4628      	mov	r0, r5
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	f000 f86d 	bl	800917e <_malloc_usable_size_r>
 80090a4:	4284      	cmp	r4, r0
 80090a6:	4607      	mov	r7, r0
 80090a8:	d802      	bhi.n	80090b0 <_realloc_r+0x34>
 80090aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090ae:	d812      	bhi.n	80090d6 <_realloc_r+0x5a>
 80090b0:	4621      	mov	r1, r4
 80090b2:	4640      	mov	r0, r8
 80090b4:	f7fd faac 	bl	8006610 <_malloc_r>
 80090b8:	4605      	mov	r5, r0
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0ed      	beq.n	800909a <_realloc_r+0x1e>
 80090be:	42bc      	cmp	r4, r7
 80090c0:	4622      	mov	r2, r4
 80090c2:	4631      	mov	r1, r6
 80090c4:	bf28      	it	cs
 80090c6:	463a      	movcs	r2, r7
 80090c8:	f7fd fa6b 	bl	80065a2 <memcpy>
 80090cc:	4631      	mov	r1, r6
 80090ce:	4640      	mov	r0, r8
 80090d0:	f7ff fc6a 	bl	80089a8 <_free_r>
 80090d4:	e7e1      	b.n	800909a <_realloc_r+0x1e>
 80090d6:	4635      	mov	r5, r6
 80090d8:	e7df      	b.n	800909a <_realloc_r+0x1e>

080090da <_raise_r>:
 80090da:	291f      	cmp	r1, #31
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	d904      	bls.n	80090ee <_raise_r+0x14>
 80090e4:	2316      	movs	r3, #22
 80090e6:	6003      	str	r3, [r0, #0]
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090f0:	b112      	cbz	r2, 80090f8 <_raise_r+0x1e>
 80090f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090f6:	b94b      	cbnz	r3, 800910c <_raise_r+0x32>
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f831 	bl	8009160 <_getpid_r>
 80090fe:	462a      	mov	r2, r5
 8009100:	4601      	mov	r1, r0
 8009102:	4620      	mov	r0, r4
 8009104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009108:	f000 b818 	b.w	800913c <_kill_r>
 800910c:	2b01      	cmp	r3, #1
 800910e:	d00a      	beq.n	8009126 <_raise_r+0x4c>
 8009110:	1c59      	adds	r1, r3, #1
 8009112:	d103      	bne.n	800911c <_raise_r+0x42>
 8009114:	2316      	movs	r3, #22
 8009116:	6003      	str	r3, [r0, #0]
 8009118:	2001      	movs	r0, #1
 800911a:	e7e7      	b.n	80090ec <_raise_r+0x12>
 800911c:	2400      	movs	r4, #0
 800911e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009122:	4628      	mov	r0, r5
 8009124:	4798      	blx	r3
 8009126:	2000      	movs	r0, #0
 8009128:	e7e0      	b.n	80090ec <_raise_r+0x12>
	...

0800912c <raise>:
 800912c:	4b02      	ldr	r3, [pc, #8]	; (8009138 <raise+0xc>)
 800912e:	4601      	mov	r1, r0
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	f7ff bfd2 	b.w	80090da <_raise_r>
 8009136:	bf00      	nop
 8009138:	2000010c 	.word	0x2000010c

0800913c <_kill_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d07      	ldr	r5, [pc, #28]	; (800915c <_kill_r+0x20>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	4611      	mov	r1, r2
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	f000 ff8b 	bl	800a064 <_kill>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	d102      	bne.n	8009158 <_kill_r+0x1c>
 8009152:	682b      	ldr	r3, [r5, #0]
 8009154:	b103      	cbz	r3, 8009158 <_kill_r+0x1c>
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	bd38      	pop	{r3, r4, r5, pc}
 800915a:	bf00      	nop
 800915c:	200004a4 	.word	0x200004a4

08009160 <_getpid_r>:
 8009160:	f7fd b8ae 	b.w	80062c0 <_getpid>

08009164 <__ascii_wctomb>:
 8009164:	b149      	cbz	r1, 800917a <__ascii_wctomb+0x16>
 8009166:	2aff      	cmp	r2, #255	; 0xff
 8009168:	bf85      	ittet	hi
 800916a:	238a      	movhi	r3, #138	; 0x8a
 800916c:	6003      	strhi	r3, [r0, #0]
 800916e:	700a      	strbls	r2, [r1, #0]
 8009170:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009174:	bf98      	it	ls
 8009176:	2001      	movls	r0, #1
 8009178:	4770      	bx	lr
 800917a:	4608      	mov	r0, r1
 800917c:	4770      	bx	lr

0800917e <_malloc_usable_size_r>:
 800917e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009182:	1f18      	subs	r0, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	bfbc      	itt	lt
 8009188:	580b      	ldrlt	r3, [r1, r0]
 800918a:	18c0      	addlt	r0, r0, r3
 800918c:	4770      	bx	lr
	...

08009190 <roundf>:
 8009190:	ee10 0a10 	vmov	r0, s0
 8009194:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009198:	3a7f      	subs	r2, #127	; 0x7f
 800919a:	2a16      	cmp	r2, #22
 800919c:	dc15      	bgt.n	80091ca <roundf+0x3a>
 800919e:	2a00      	cmp	r2, #0
 80091a0:	da08      	bge.n	80091b4 <roundf+0x24>
 80091a2:	3201      	adds	r2, #1
 80091a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80091a8:	d101      	bne.n	80091ae <roundf+0x1e>
 80091aa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80091ae:	ee00 3a10 	vmov	s0, r3
 80091b2:	4770      	bx	lr
 80091b4:	4907      	ldr	r1, [pc, #28]	; (80091d4 <roundf+0x44>)
 80091b6:	4111      	asrs	r1, r2
 80091b8:	4208      	tst	r0, r1
 80091ba:	d0fa      	beq.n	80091b2 <roundf+0x22>
 80091bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091c0:	4113      	asrs	r3, r2
 80091c2:	4403      	add	r3, r0
 80091c4:	ea23 0301 	bic.w	r3, r3, r1
 80091c8:	e7f1      	b.n	80091ae <roundf+0x1e>
 80091ca:	2a80      	cmp	r2, #128	; 0x80
 80091cc:	d1f1      	bne.n	80091b2 <roundf+0x22>
 80091ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80091d2:	4770      	bx	lr
 80091d4:	007fffff 	.word	0x007fffff

080091d8 <pow>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	ed2d 8b02 	vpush	{d8}
 80091de:	eeb0 8a40 	vmov.f32	s16, s0
 80091e2:	eef0 8a60 	vmov.f32	s17, s1
 80091e6:	ec55 4b11 	vmov	r4, r5, d1
 80091ea:	f000 f891 	bl	8009310 <__ieee754_pow>
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	ec57 6b10 	vmov	r6, r7, d0
 80091fa:	f7f7 fc97 	bl	8000b2c <__aeabi_dcmpun>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d13b      	bne.n	800927a <pow+0xa2>
 8009202:	ec51 0b18 	vmov	r0, r1, d8
 8009206:	2200      	movs	r2, #0
 8009208:	2300      	movs	r3, #0
 800920a:	f7f7 fc5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800920e:	b1b8      	cbz	r0, 8009240 <pow+0x68>
 8009210:	2200      	movs	r2, #0
 8009212:	2300      	movs	r3, #0
 8009214:	4620      	mov	r0, r4
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800921c:	2800      	cmp	r0, #0
 800921e:	d146      	bne.n	80092ae <pow+0xd6>
 8009220:	ec45 4b10 	vmov	d0, r4, r5
 8009224:	f000 fe8d 	bl	8009f42 <finite>
 8009228:	b338      	cbz	r0, 800927a <pow+0xa2>
 800922a:	2200      	movs	r2, #0
 800922c:	2300      	movs	r3, #0
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 fc53 	bl	8000adc <__aeabi_dcmplt>
 8009236:	b300      	cbz	r0, 800927a <pow+0xa2>
 8009238:	f7fd f890 	bl	800635c <__errno>
 800923c:	2322      	movs	r3, #34	; 0x22
 800923e:	e01b      	b.n	8009278 <pow+0xa0>
 8009240:	ec47 6b10 	vmov	d0, r6, r7
 8009244:	f000 fe7d 	bl	8009f42 <finite>
 8009248:	b9e0      	cbnz	r0, 8009284 <pow+0xac>
 800924a:	eeb0 0a48 	vmov.f32	s0, s16
 800924e:	eef0 0a68 	vmov.f32	s1, s17
 8009252:	f000 fe76 	bl	8009f42 <finite>
 8009256:	b1a8      	cbz	r0, 8009284 <pow+0xac>
 8009258:	ec45 4b10 	vmov	d0, r4, r5
 800925c:	f000 fe71 	bl	8009f42 <finite>
 8009260:	b180      	cbz	r0, 8009284 <pow+0xac>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 fc5f 	bl	8000b2c <__aeabi_dcmpun>
 800926e:	2800      	cmp	r0, #0
 8009270:	d0e2      	beq.n	8009238 <pow+0x60>
 8009272:	f7fd f873 	bl	800635c <__errno>
 8009276:	2321      	movs	r3, #33	; 0x21
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	ecbd 8b02 	vpop	{d8}
 800927e:	ec47 6b10 	vmov	d0, r6, r7
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	2200      	movs	r2, #0
 8009286:	2300      	movs	r3, #0
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009290:	2800      	cmp	r0, #0
 8009292:	d0f2      	beq.n	800927a <pow+0xa2>
 8009294:	eeb0 0a48 	vmov.f32	s0, s16
 8009298:	eef0 0a68 	vmov.f32	s1, s17
 800929c:	f000 fe51 	bl	8009f42 <finite>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d0ea      	beq.n	800927a <pow+0xa2>
 80092a4:	ec45 4b10 	vmov	d0, r4, r5
 80092a8:	f000 fe4b 	bl	8009f42 <finite>
 80092ac:	e7c3      	b.n	8009236 <pow+0x5e>
 80092ae:	4f01      	ldr	r7, [pc, #4]	; (80092b4 <pow+0xdc>)
 80092b0:	2600      	movs	r6, #0
 80092b2:	e7e2      	b.n	800927a <pow+0xa2>
 80092b4:	3ff00000 	.word	0x3ff00000

080092b8 <sqrt>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	ed2d 8b02 	vpush	{d8}
 80092be:	ec55 4b10 	vmov	r4, r5, d0
 80092c2:	f000 fd53 	bl	8009d6c <__ieee754_sqrt>
 80092c6:	4622      	mov	r2, r4
 80092c8:	462b      	mov	r3, r5
 80092ca:	4620      	mov	r0, r4
 80092cc:	4629      	mov	r1, r5
 80092ce:	eeb0 8a40 	vmov.f32	s16, s0
 80092d2:	eef0 8a60 	vmov.f32	s17, s1
 80092d6:	f7f7 fc29 	bl	8000b2c <__aeabi_dcmpun>
 80092da:	b990      	cbnz	r0, 8009302 <sqrt+0x4a>
 80092dc:	2200      	movs	r2, #0
 80092de:	2300      	movs	r3, #0
 80092e0:	4620      	mov	r0, r4
 80092e2:	4629      	mov	r1, r5
 80092e4:	f7f7 fbfa 	bl	8000adc <__aeabi_dcmplt>
 80092e8:	b158      	cbz	r0, 8009302 <sqrt+0x4a>
 80092ea:	f7fd f837 	bl	800635c <__errno>
 80092ee:	2321      	movs	r3, #33	; 0x21
 80092f0:	6003      	str	r3, [r0, #0]
 80092f2:	2200      	movs	r2, #0
 80092f4:	2300      	movs	r3, #0
 80092f6:	4610      	mov	r0, r2
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7f7 faa7 	bl	800084c <__aeabi_ddiv>
 80092fe:	ec41 0b18 	vmov	d8, r0, r1
 8009302:	eeb0 0a48 	vmov.f32	s0, s16
 8009306:	eef0 0a68 	vmov.f32	s1, s17
 800930a:	ecbd 8b02 	vpop	{d8}
 800930e:	bd38      	pop	{r3, r4, r5, pc}

08009310 <__ieee754_pow>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	ed2d 8b06 	vpush	{d8-d10}
 8009318:	b089      	sub	sp, #36	; 0x24
 800931a:	ed8d 1b00 	vstr	d1, [sp]
 800931e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009322:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009326:	ea58 0102 	orrs.w	r1, r8, r2
 800932a:	ec57 6b10 	vmov	r6, r7, d0
 800932e:	d115      	bne.n	800935c <__ieee754_pow+0x4c>
 8009330:	19b3      	adds	r3, r6, r6
 8009332:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009336:	4152      	adcs	r2, r2
 8009338:	4299      	cmp	r1, r3
 800933a:	4b89      	ldr	r3, [pc, #548]	; (8009560 <__ieee754_pow+0x250>)
 800933c:	4193      	sbcs	r3, r2
 800933e:	f080 84d2 	bcs.w	8009ce6 <__ieee754_pow+0x9d6>
 8009342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009346:	4630      	mov	r0, r6
 8009348:	4639      	mov	r1, r7
 800934a:	f7f6 ff9f 	bl	800028c <__adddf3>
 800934e:	ec41 0b10 	vmov	d0, r0, r1
 8009352:	b009      	add	sp, #36	; 0x24
 8009354:	ecbd 8b06 	vpop	{d8-d10}
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	4b81      	ldr	r3, [pc, #516]	; (8009564 <__ieee754_pow+0x254>)
 800935e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009362:	429c      	cmp	r4, r3
 8009364:	ee10 aa10 	vmov	sl, s0
 8009368:	463d      	mov	r5, r7
 800936a:	dc06      	bgt.n	800937a <__ieee754_pow+0x6a>
 800936c:	d101      	bne.n	8009372 <__ieee754_pow+0x62>
 800936e:	2e00      	cmp	r6, #0
 8009370:	d1e7      	bne.n	8009342 <__ieee754_pow+0x32>
 8009372:	4598      	cmp	r8, r3
 8009374:	dc01      	bgt.n	800937a <__ieee754_pow+0x6a>
 8009376:	d10f      	bne.n	8009398 <__ieee754_pow+0x88>
 8009378:	b172      	cbz	r2, 8009398 <__ieee754_pow+0x88>
 800937a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800937e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009382:	ea55 050a 	orrs.w	r5, r5, sl
 8009386:	d1dc      	bne.n	8009342 <__ieee754_pow+0x32>
 8009388:	e9dd 3200 	ldrd	r3, r2, [sp]
 800938c:	18db      	adds	r3, r3, r3
 800938e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009392:	4152      	adcs	r2, r2
 8009394:	429d      	cmp	r5, r3
 8009396:	e7d0      	b.n	800933a <__ieee754_pow+0x2a>
 8009398:	2d00      	cmp	r5, #0
 800939a:	da3b      	bge.n	8009414 <__ieee754_pow+0x104>
 800939c:	4b72      	ldr	r3, [pc, #456]	; (8009568 <__ieee754_pow+0x258>)
 800939e:	4598      	cmp	r8, r3
 80093a0:	dc51      	bgt.n	8009446 <__ieee754_pow+0x136>
 80093a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80093a6:	4598      	cmp	r8, r3
 80093a8:	f340 84ac 	ble.w	8009d04 <__ieee754_pow+0x9f4>
 80093ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093b4:	2b14      	cmp	r3, #20
 80093b6:	dd0f      	ble.n	80093d8 <__ieee754_pow+0xc8>
 80093b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80093bc:	fa22 f103 	lsr.w	r1, r2, r3
 80093c0:	fa01 f303 	lsl.w	r3, r1, r3
 80093c4:	4293      	cmp	r3, r2
 80093c6:	f040 849d 	bne.w	8009d04 <__ieee754_pow+0x9f4>
 80093ca:	f001 0101 	and.w	r1, r1, #1
 80093ce:	f1c1 0302 	rsb	r3, r1, #2
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	b182      	cbz	r2, 80093f8 <__ieee754_pow+0xe8>
 80093d6:	e05f      	b.n	8009498 <__ieee754_pow+0x188>
 80093d8:	2a00      	cmp	r2, #0
 80093da:	d15b      	bne.n	8009494 <__ieee754_pow+0x184>
 80093dc:	f1c3 0314 	rsb	r3, r3, #20
 80093e0:	fa48 f103 	asr.w	r1, r8, r3
 80093e4:	fa01 f303 	lsl.w	r3, r1, r3
 80093e8:	4543      	cmp	r3, r8
 80093ea:	f040 8488 	bne.w	8009cfe <__ieee754_pow+0x9ee>
 80093ee:	f001 0101 	and.w	r1, r1, #1
 80093f2:	f1c1 0302 	rsb	r3, r1, #2
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	4b5c      	ldr	r3, [pc, #368]	; (800956c <__ieee754_pow+0x25c>)
 80093fa:	4598      	cmp	r8, r3
 80093fc:	d132      	bne.n	8009464 <__ieee754_pow+0x154>
 80093fe:	f1b9 0f00 	cmp.w	r9, #0
 8009402:	f280 8478 	bge.w	8009cf6 <__ieee754_pow+0x9e6>
 8009406:	4959      	ldr	r1, [pc, #356]	; (800956c <__ieee754_pow+0x25c>)
 8009408:	4632      	mov	r2, r6
 800940a:	463b      	mov	r3, r7
 800940c:	2000      	movs	r0, #0
 800940e:	f7f7 fa1d 	bl	800084c <__aeabi_ddiv>
 8009412:	e79c      	b.n	800934e <__ieee754_pow+0x3e>
 8009414:	2300      	movs	r3, #0
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	2a00      	cmp	r2, #0
 800941a:	d13d      	bne.n	8009498 <__ieee754_pow+0x188>
 800941c:	4b51      	ldr	r3, [pc, #324]	; (8009564 <__ieee754_pow+0x254>)
 800941e:	4598      	cmp	r8, r3
 8009420:	d1ea      	bne.n	80093f8 <__ieee754_pow+0xe8>
 8009422:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009426:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800942a:	ea53 030a 	orrs.w	r3, r3, sl
 800942e:	f000 845a 	beq.w	8009ce6 <__ieee754_pow+0x9d6>
 8009432:	4b4f      	ldr	r3, [pc, #316]	; (8009570 <__ieee754_pow+0x260>)
 8009434:	429c      	cmp	r4, r3
 8009436:	dd08      	ble.n	800944a <__ieee754_pow+0x13a>
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	f2c0 8457 	blt.w	8009cee <__ieee754_pow+0x9de>
 8009440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009444:	e783      	b.n	800934e <__ieee754_pow+0x3e>
 8009446:	2302      	movs	r3, #2
 8009448:	e7e5      	b.n	8009416 <__ieee754_pow+0x106>
 800944a:	f1b9 0f00 	cmp.w	r9, #0
 800944e:	f04f 0000 	mov.w	r0, #0
 8009452:	f04f 0100 	mov.w	r1, #0
 8009456:	f6bf af7a 	bge.w	800934e <__ieee754_pow+0x3e>
 800945a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800945e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009462:	e774      	b.n	800934e <__ieee754_pow+0x3e>
 8009464:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009468:	d106      	bne.n	8009478 <__ieee754_pow+0x168>
 800946a:	4632      	mov	r2, r6
 800946c:	463b      	mov	r3, r7
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f7 f8c1 	bl	80005f8 <__aeabi_dmul>
 8009476:	e76a      	b.n	800934e <__ieee754_pow+0x3e>
 8009478:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <__ieee754_pow+0x264>)
 800947a:	4599      	cmp	r9, r3
 800947c:	d10c      	bne.n	8009498 <__ieee754_pow+0x188>
 800947e:	2d00      	cmp	r5, #0
 8009480:	db0a      	blt.n	8009498 <__ieee754_pow+0x188>
 8009482:	ec47 6b10 	vmov	d0, r6, r7
 8009486:	b009      	add	sp, #36	; 0x24
 8009488:	ecbd 8b06 	vpop	{d8-d10}
 800948c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	f000 bc6c 	b.w	8009d6c <__ieee754_sqrt>
 8009494:	2300      	movs	r3, #0
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	ec47 6b10 	vmov	d0, r6, r7
 800949c:	f000 fd48 	bl	8009f30 <fabs>
 80094a0:	ec51 0b10 	vmov	r0, r1, d0
 80094a4:	f1ba 0f00 	cmp.w	sl, #0
 80094a8:	d129      	bne.n	80094fe <__ieee754_pow+0x1ee>
 80094aa:	b124      	cbz	r4, 80094b6 <__ieee754_pow+0x1a6>
 80094ac:	4b2f      	ldr	r3, [pc, #188]	; (800956c <__ieee754_pow+0x25c>)
 80094ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d123      	bne.n	80094fe <__ieee754_pow+0x1ee>
 80094b6:	f1b9 0f00 	cmp.w	r9, #0
 80094ba:	da05      	bge.n	80094c8 <__ieee754_pow+0x1b8>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	2000      	movs	r0, #0
 80094c2:	492a      	ldr	r1, [pc, #168]	; (800956c <__ieee754_pow+0x25c>)
 80094c4:	f7f7 f9c2 	bl	800084c <__aeabi_ddiv>
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	f6bf af40 	bge.w	800934e <__ieee754_pow+0x3e>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094d8:	4323      	orrs	r3, r4
 80094da:	d108      	bne.n	80094ee <__ieee754_pow+0x1de>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4610      	mov	r0, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	f7f6 fed0 	bl	8000288 <__aeabi_dsub>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	e78f      	b.n	800940e <__ieee754_pow+0xfe>
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	f47f af2c 	bne.w	800934e <__ieee754_pow+0x3e>
 80094f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094fa:	4619      	mov	r1, r3
 80094fc:	e727      	b.n	800934e <__ieee754_pow+0x3e>
 80094fe:	0feb      	lsrs	r3, r5, #31
 8009500:	3b01      	subs	r3, #1
 8009502:	9306      	str	r3, [sp, #24]
 8009504:	9a06      	ldr	r2, [sp, #24]
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	d102      	bne.n	8009512 <__ieee754_pow+0x202>
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	e7e6      	b.n	80094e0 <__ieee754_pow+0x1d0>
 8009512:	4b19      	ldr	r3, [pc, #100]	; (8009578 <__ieee754_pow+0x268>)
 8009514:	4598      	cmp	r8, r3
 8009516:	f340 80fb 	ble.w	8009710 <__ieee754_pow+0x400>
 800951a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800951e:	4598      	cmp	r8, r3
 8009520:	4b13      	ldr	r3, [pc, #76]	; (8009570 <__ieee754_pow+0x260>)
 8009522:	dd0c      	ble.n	800953e <__ieee754_pow+0x22e>
 8009524:	429c      	cmp	r4, r3
 8009526:	dc0f      	bgt.n	8009548 <__ieee754_pow+0x238>
 8009528:	f1b9 0f00 	cmp.w	r9, #0
 800952c:	da0f      	bge.n	800954e <__ieee754_pow+0x23e>
 800952e:	2000      	movs	r0, #0
 8009530:	b009      	add	sp, #36	; 0x24
 8009532:	ecbd 8b06 	vpop	{d8-d10}
 8009536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	f000 bcf0 	b.w	8009f1e <__math_oflow>
 800953e:	429c      	cmp	r4, r3
 8009540:	dbf2      	blt.n	8009528 <__ieee754_pow+0x218>
 8009542:	4b0a      	ldr	r3, [pc, #40]	; (800956c <__ieee754_pow+0x25c>)
 8009544:	429c      	cmp	r4, r3
 8009546:	dd19      	ble.n	800957c <__ieee754_pow+0x26c>
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	dcef      	bgt.n	800952e <__ieee754_pow+0x21e>
 800954e:	2000      	movs	r0, #0
 8009550:	b009      	add	sp, #36	; 0x24
 8009552:	ecbd 8b06 	vpop	{d8-d10}
 8009556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	f000 bcd7 	b.w	8009f0c <__math_uflow>
 800955e:	bf00      	nop
 8009560:	fff00000 	.word	0xfff00000
 8009564:	7ff00000 	.word	0x7ff00000
 8009568:	433fffff 	.word	0x433fffff
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	3fefffff 	.word	0x3fefffff
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	41e00000 	.word	0x41e00000
 800957c:	4b60      	ldr	r3, [pc, #384]	; (8009700 <__ieee754_pow+0x3f0>)
 800957e:	2200      	movs	r2, #0
 8009580:	f7f6 fe82 	bl	8000288 <__aeabi_dsub>
 8009584:	a354      	add	r3, pc, #336	; (adr r3, 80096d8 <__ieee754_pow+0x3c8>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	4604      	mov	r4, r0
 800958c:	460d      	mov	r5, r1
 800958e:	f7f7 f833 	bl	80005f8 <__aeabi_dmul>
 8009592:	a353      	add	r3, pc, #332	; (adr r3, 80096e0 <__ieee754_pow+0x3d0>)
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	4606      	mov	r6, r0
 800959a:	460f      	mov	r7, r1
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f7 f82a 	bl	80005f8 <__aeabi_dmul>
 80095a4:	4b57      	ldr	r3, [pc, #348]	; (8009704 <__ieee754_pow+0x3f4>)
 80095a6:	4682      	mov	sl, r0
 80095a8:	468b      	mov	fp, r1
 80095aa:	2200      	movs	r2, #0
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	a14b      	add	r1, pc, #300	; (adr r1, 80096e8 <__ieee754_pow+0x3d8>)
 80095ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095be:	f7f6 fe63 	bl	8000288 <__aeabi_dsub>
 80095c2:	4622      	mov	r2, r4
 80095c4:	462b      	mov	r3, r5
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	2000      	movs	r0, #0
 80095d0:	494d      	ldr	r1, [pc, #308]	; (8009708 <__ieee754_pow+0x3f8>)
 80095d2:	f7f6 fe59 	bl	8000288 <__aeabi_dsub>
 80095d6:	4622      	mov	r2, r4
 80095d8:	4680      	mov	r8, r0
 80095da:	4689      	mov	r9, r1
 80095dc:	462b      	mov	r3, r5
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f7 f809 	bl	80005f8 <__aeabi_dmul>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	a33f      	add	r3, pc, #252	; (adr r3, 80096f0 <__ieee754_pow+0x3e0>)
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	f7f6 fe40 	bl	8000288 <__aeabi_dsub>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f6 fe3a 	bl	800028c <__adddf3>
 8009618:	2000      	movs	r0, #0
 800961a:	4632      	mov	r2, r6
 800961c:	463b      	mov	r3, r7
 800961e:	4604      	mov	r4, r0
 8009620:	460d      	mov	r5, r1
 8009622:	f7f6 fe31 	bl	8000288 <__aeabi_dsub>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4640      	mov	r0, r8
 800962c:	4649      	mov	r1, r9
 800962e:	f7f6 fe2b 	bl	8000288 <__aeabi_dsub>
 8009632:	9b04      	ldr	r3, [sp, #16]
 8009634:	9a06      	ldr	r2, [sp, #24]
 8009636:	3b01      	subs	r3, #1
 8009638:	4313      	orrs	r3, r2
 800963a:	4682      	mov	sl, r0
 800963c:	468b      	mov	fp, r1
 800963e:	f040 81e7 	bne.w	8009a10 <__ieee754_pow+0x700>
 8009642:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80096f8 <__ieee754_pow+0x3e8>
 8009646:	eeb0 8a47 	vmov.f32	s16, s14
 800964a:	eef0 8a67 	vmov.f32	s17, s15
 800964e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009652:	2600      	movs	r6, #0
 8009654:	4632      	mov	r2, r6
 8009656:	463b      	mov	r3, r7
 8009658:	e9dd 0100 	ldrd	r0, r1, [sp]
 800965c:	f7f6 fe14 	bl	8000288 <__aeabi_dsub>
 8009660:	4622      	mov	r2, r4
 8009662:	462b      	mov	r3, r5
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	4650      	mov	r0, sl
 8009672:	4659      	mov	r1, fp
 8009674:	f7f6 ffc0 	bl	80005f8 <__aeabi_dmul>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4640      	mov	r0, r8
 800967e:	4649      	mov	r1, r9
 8009680:	f7f6 fe04 	bl	800028c <__adddf3>
 8009684:	4632      	mov	r2, r6
 8009686:	463b      	mov	r3, r7
 8009688:	4680      	mov	r8, r0
 800968a:	4689      	mov	r9, r1
 800968c:	4620      	mov	r0, r4
 800968e:	4629      	mov	r1, r5
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	460b      	mov	r3, r1
 8009696:	4604      	mov	r4, r0
 8009698:	460d      	mov	r5, r1
 800969a:	4602      	mov	r2, r0
 800969c:	4649      	mov	r1, r9
 800969e:	4640      	mov	r0, r8
 80096a0:	f7f6 fdf4 	bl	800028c <__adddf3>
 80096a4:	4b19      	ldr	r3, [pc, #100]	; (800970c <__ieee754_pow+0x3fc>)
 80096a6:	4299      	cmp	r1, r3
 80096a8:	ec45 4b19 	vmov	d9, r4, r5
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	468b      	mov	fp, r1
 80096b2:	f340 82f1 	ble.w	8009c98 <__ieee754_pow+0x988>
 80096b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80096ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80096be:	4303      	orrs	r3, r0
 80096c0:	f000 81e4 	beq.w	8009a8c <__ieee754_pow+0x77c>
 80096c4:	ec51 0b18 	vmov	r0, r1, d8
 80096c8:	2200      	movs	r2, #0
 80096ca:	2300      	movs	r3, #0
 80096cc:	f7f7 fa06 	bl	8000adc <__aeabi_dcmplt>
 80096d0:	3800      	subs	r0, #0
 80096d2:	bf18      	it	ne
 80096d4:	2001      	movne	r0, #1
 80096d6:	e72b      	b.n	8009530 <__ieee754_pow+0x220>
 80096d8:	60000000 	.word	0x60000000
 80096dc:	3ff71547 	.word	0x3ff71547
 80096e0:	f85ddf44 	.word	0xf85ddf44
 80096e4:	3e54ae0b 	.word	0x3e54ae0b
 80096e8:	55555555 	.word	0x55555555
 80096ec:	3fd55555 	.word	0x3fd55555
 80096f0:	652b82fe 	.word	0x652b82fe
 80096f4:	3ff71547 	.word	0x3ff71547
 80096f8:	00000000 	.word	0x00000000
 80096fc:	bff00000 	.word	0xbff00000
 8009700:	3ff00000 	.word	0x3ff00000
 8009704:	3fd00000 	.word	0x3fd00000
 8009708:	3fe00000 	.word	0x3fe00000
 800970c:	408fffff 	.word	0x408fffff
 8009710:	4bd5      	ldr	r3, [pc, #852]	; (8009a68 <__ieee754_pow+0x758>)
 8009712:	402b      	ands	r3, r5
 8009714:	2200      	movs	r2, #0
 8009716:	b92b      	cbnz	r3, 8009724 <__ieee754_pow+0x414>
 8009718:	4bd4      	ldr	r3, [pc, #848]	; (8009a6c <__ieee754_pow+0x75c>)
 800971a:	f7f6 ff6d 	bl	80005f8 <__aeabi_dmul>
 800971e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009722:	460c      	mov	r4, r1
 8009724:	1523      	asrs	r3, r4, #20
 8009726:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800972a:	4413      	add	r3, r2
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	4bd0      	ldr	r3, [pc, #832]	; (8009a70 <__ieee754_pow+0x760>)
 8009730:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009734:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009738:	429c      	cmp	r4, r3
 800973a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800973e:	dd08      	ble.n	8009752 <__ieee754_pow+0x442>
 8009740:	4bcc      	ldr	r3, [pc, #816]	; (8009a74 <__ieee754_pow+0x764>)
 8009742:	429c      	cmp	r4, r3
 8009744:	f340 8162 	ble.w	8009a0c <__ieee754_pow+0x6fc>
 8009748:	9b05      	ldr	r3, [sp, #20]
 800974a:	3301      	adds	r3, #1
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009752:	2400      	movs	r4, #0
 8009754:	00e3      	lsls	r3, r4, #3
 8009756:	9307      	str	r3, [sp, #28]
 8009758:	4bc7      	ldr	r3, [pc, #796]	; (8009a78 <__ieee754_pow+0x768>)
 800975a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800975e:	ed93 7b00 	vldr	d7, [r3]
 8009762:	4629      	mov	r1, r5
 8009764:	ec53 2b17 	vmov	r2, r3, d7
 8009768:	eeb0 9a47 	vmov.f32	s18, s14
 800976c:	eef0 9a67 	vmov.f32	s19, s15
 8009770:	4682      	mov	sl, r0
 8009772:	f7f6 fd89 	bl	8000288 <__aeabi_dsub>
 8009776:	4652      	mov	r2, sl
 8009778:	4606      	mov	r6, r0
 800977a:	460f      	mov	r7, r1
 800977c:	462b      	mov	r3, r5
 800977e:	ec51 0b19 	vmov	r0, r1, d9
 8009782:	f7f6 fd83 	bl	800028c <__adddf3>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	2000      	movs	r0, #0
 800978c:	49bb      	ldr	r1, [pc, #748]	; (8009a7c <__ieee754_pow+0x76c>)
 800978e:	f7f7 f85d 	bl	800084c <__aeabi_ddiv>
 8009792:	ec41 0b1a 	vmov	d10, r0, r1
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f6 ff2b 	bl	80005f8 <__aeabi_dmul>
 80097a2:	2300      	movs	r3, #0
 80097a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a8:	9302      	str	r3, [sp, #8]
 80097aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80097ae:	46ab      	mov	fp, r5
 80097b0:	106d      	asrs	r5, r5, #1
 80097b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80097b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80097ba:	ec41 0b18 	vmov	d8, r0, r1
 80097be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80097c2:	2200      	movs	r2, #0
 80097c4:	4640      	mov	r0, r8
 80097c6:	4649      	mov	r1, r9
 80097c8:	4614      	mov	r4, r2
 80097ca:	461d      	mov	r5, r3
 80097cc:	f7f6 ff14 	bl	80005f8 <__aeabi_dmul>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f6 fd56 	bl	8000288 <__aeabi_dsub>
 80097dc:	ec53 2b19 	vmov	r2, r3, d9
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	f7f6 fd4e 	bl	8000288 <__aeabi_dsub>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4650      	mov	r0, sl
 80097f2:	4659      	mov	r1, fp
 80097f4:	f7f6 fd48 	bl	8000288 <__aeabi_dsub>
 80097f8:	4642      	mov	r2, r8
 80097fa:	464b      	mov	r3, r9
 80097fc:	f7f6 fefc 	bl	80005f8 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4630      	mov	r0, r6
 8009806:	4639      	mov	r1, r7
 8009808:	f7f6 fd3e 	bl	8000288 <__aeabi_dsub>
 800980c:	ec53 2b1a 	vmov	r2, r3, d10
 8009810:	f7f6 fef2 	bl	80005f8 <__aeabi_dmul>
 8009814:	ec53 2b18 	vmov	r2, r3, d8
 8009818:	ec41 0b19 	vmov	d9, r0, r1
 800981c:	ec51 0b18 	vmov	r0, r1, d8
 8009820:	f7f6 feea 	bl	80005f8 <__aeabi_dmul>
 8009824:	a37c      	add	r3, pc, #496	; (adr r3, 8009a18 <__ieee754_pow+0x708>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	a37b      	add	r3, pc, #492	; (adr r3, 8009a20 <__ieee754_pow+0x710>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fd28 	bl	800028c <__adddf3>
 800983c:	4622      	mov	r2, r4
 800983e:	462b      	mov	r3, r5
 8009840:	f7f6 feda 	bl	80005f8 <__aeabi_dmul>
 8009844:	a378      	add	r3, pc, #480	; (adr r3, 8009a28 <__ieee754_pow+0x718>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f6 fd1f 	bl	800028c <__adddf3>
 800984e:	4622      	mov	r2, r4
 8009850:	462b      	mov	r3, r5
 8009852:	f7f6 fed1 	bl	80005f8 <__aeabi_dmul>
 8009856:	a376      	add	r3, pc, #472	; (adr r3, 8009a30 <__ieee754_pow+0x720>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f6 fd16 	bl	800028c <__adddf3>
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	a373      	add	r3, pc, #460	; (adr r3, 8009a38 <__ieee754_pow+0x728>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fd0d 	bl	800028c <__adddf3>
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	f7f6 febf 	bl	80005f8 <__aeabi_dmul>
 800987a:	a371      	add	r3, pc, #452	; (adr r3, 8009a40 <__ieee754_pow+0x730>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fd04 	bl	800028c <__adddf3>
 8009884:	4622      	mov	r2, r4
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	462b      	mov	r3, r5
 800988c:	4620      	mov	r0, r4
 800988e:	4629      	mov	r1, r5
 8009890:	f7f6 feb2 	bl	80005f8 <__aeabi_dmul>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	f7f6 feac 	bl	80005f8 <__aeabi_dmul>
 80098a0:	4642      	mov	r2, r8
 80098a2:	4604      	mov	r4, r0
 80098a4:	460d      	mov	r5, r1
 80098a6:	464b      	mov	r3, r9
 80098a8:	ec51 0b18 	vmov	r0, r1, d8
 80098ac:	f7f6 fcee 	bl	800028c <__adddf3>
 80098b0:	ec53 2b19 	vmov	r2, r3, d9
 80098b4:	f7f6 fea0 	bl	80005f8 <__aeabi_dmul>
 80098b8:	4622      	mov	r2, r4
 80098ba:	462b      	mov	r3, r5
 80098bc:	f7f6 fce6 	bl	800028c <__adddf3>
 80098c0:	4642      	mov	r2, r8
 80098c2:	4682      	mov	sl, r0
 80098c4:	468b      	mov	fp, r1
 80098c6:	464b      	mov	r3, r9
 80098c8:	4640      	mov	r0, r8
 80098ca:	4649      	mov	r1, r9
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	4b6b      	ldr	r3, [pc, #428]	; (8009a80 <__ieee754_pow+0x770>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	f7f6 fcd8 	bl	800028c <__adddf3>
 80098dc:	4652      	mov	r2, sl
 80098de:	465b      	mov	r3, fp
 80098e0:	f7f6 fcd4 	bl	800028c <__adddf3>
 80098e4:	2000      	movs	r0, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4640      	mov	r0, r8
 80098f0:	4649      	mov	r1, r9
 80098f2:	f7f6 fe81 	bl	80005f8 <__aeabi_dmul>
 80098f6:	4b62      	ldr	r3, [pc, #392]	; (8009a80 <__ieee754_pow+0x770>)
 80098f8:	4680      	mov	r8, r0
 80098fa:	4689      	mov	r9, r1
 80098fc:	2200      	movs	r2, #0
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f6 fcc1 	bl	8000288 <__aeabi_dsub>
 8009906:	4632      	mov	r2, r6
 8009908:	463b      	mov	r3, r7
 800990a:	f7f6 fcbd 	bl	8000288 <__aeabi_dsub>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4650      	mov	r0, sl
 8009914:	4659      	mov	r1, fp
 8009916:	f7f6 fcb7 	bl	8000288 <__aeabi_dsub>
 800991a:	ec53 2b18 	vmov	r2, r3, d8
 800991e:	f7f6 fe6b 	bl	80005f8 <__aeabi_dmul>
 8009922:	4622      	mov	r2, r4
 8009924:	4606      	mov	r6, r0
 8009926:	460f      	mov	r7, r1
 8009928:	462b      	mov	r3, r5
 800992a:	ec51 0b19 	vmov	r0, r1, d9
 800992e:	f7f6 fe63 	bl	80005f8 <__aeabi_dmul>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f6 fca7 	bl	800028c <__adddf3>
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4640      	mov	r0, r8
 8009948:	4649      	mov	r1, r9
 800994a:	f7f6 fc9f 	bl	800028c <__adddf3>
 800994e:	a33e      	add	r3, pc, #248	; (adr r3, 8009a48 <__ieee754_pow+0x738>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	2000      	movs	r0, #0
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	f7f6 fe4d 	bl	80005f8 <__aeabi_dmul>
 800995e:	4642      	mov	r2, r8
 8009960:	ec41 0b18 	vmov	d8, r0, r1
 8009964:	464b      	mov	r3, r9
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f6 fc8d 	bl	8000288 <__aeabi_dsub>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4630      	mov	r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	f7f6 fc87 	bl	8000288 <__aeabi_dsub>
 800997a:	a335      	add	r3, pc, #212	; (adr r3, 8009a50 <__ieee754_pow+0x740>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fe3a 	bl	80005f8 <__aeabi_dmul>
 8009984:	a334      	add	r3, pc, #208	; (adr r3, 8009a58 <__ieee754_pow+0x748>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	4606      	mov	r6, r0
 800998c:	460f      	mov	r7, r1
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f6 fe31 	bl	80005f8 <__aeabi_dmul>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4630      	mov	r0, r6
 800999c:	4639      	mov	r1, r7
 800999e:	f7f6 fc75 	bl	800028c <__adddf3>
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	4b37      	ldr	r3, [pc, #220]	; (8009a84 <__ieee754_pow+0x774>)
 80099a6:	4413      	add	r3, r2
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fc6e 	bl	800028c <__adddf3>
 80099b0:	4682      	mov	sl, r0
 80099b2:	9805      	ldr	r0, [sp, #20]
 80099b4:	468b      	mov	fp, r1
 80099b6:	f7f6 fdb5 	bl	8000524 <__aeabi_i2d>
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	4b32      	ldr	r3, [pc, #200]	; (8009a88 <__ieee754_pow+0x778>)
 80099be:	4413      	add	r3, r2
 80099c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099c4:	4606      	mov	r6, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	4652      	mov	r2, sl
 80099ca:	465b      	mov	r3, fp
 80099cc:	ec51 0b18 	vmov	r0, r1, d8
 80099d0:	f7f6 fc5c 	bl	800028c <__adddf3>
 80099d4:	4642      	mov	r2, r8
 80099d6:	464b      	mov	r3, r9
 80099d8:	f7f6 fc58 	bl	800028c <__adddf3>
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	f7f6 fc54 	bl	800028c <__adddf3>
 80099e4:	2000      	movs	r0, #0
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	4642      	mov	r2, r8
 80099f4:	464b      	mov	r3, r9
 80099f6:	f7f6 fc47 	bl	8000288 <__aeabi_dsub>
 80099fa:	ec53 2b18 	vmov	r2, r3, d8
 80099fe:	f7f6 fc43 	bl	8000288 <__aeabi_dsub>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4650      	mov	r0, sl
 8009a08:	4659      	mov	r1, fp
 8009a0a:	e610      	b.n	800962e <__ieee754_pow+0x31e>
 8009a0c:	2401      	movs	r4, #1
 8009a0e:	e6a1      	b.n	8009754 <__ieee754_pow+0x444>
 8009a10:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009a60 <__ieee754_pow+0x750>
 8009a14:	e617      	b.n	8009646 <__ieee754_pow+0x336>
 8009a16:	bf00      	nop
 8009a18:	4a454eef 	.word	0x4a454eef
 8009a1c:	3fca7e28 	.word	0x3fca7e28
 8009a20:	93c9db65 	.word	0x93c9db65
 8009a24:	3fcd864a 	.word	0x3fcd864a
 8009a28:	a91d4101 	.word	0xa91d4101
 8009a2c:	3fd17460 	.word	0x3fd17460
 8009a30:	518f264d 	.word	0x518f264d
 8009a34:	3fd55555 	.word	0x3fd55555
 8009a38:	db6fabff 	.word	0xdb6fabff
 8009a3c:	3fdb6db6 	.word	0x3fdb6db6
 8009a40:	33333303 	.word	0x33333303
 8009a44:	3fe33333 	.word	0x3fe33333
 8009a48:	e0000000 	.word	0xe0000000
 8009a4c:	3feec709 	.word	0x3feec709
 8009a50:	dc3a03fd 	.word	0xdc3a03fd
 8009a54:	3feec709 	.word	0x3feec709
 8009a58:	145b01f5 	.word	0x145b01f5
 8009a5c:	be3e2fe0 	.word	0xbe3e2fe0
 8009a60:	00000000 	.word	0x00000000
 8009a64:	3ff00000 	.word	0x3ff00000
 8009a68:	7ff00000 	.word	0x7ff00000
 8009a6c:	43400000 	.word	0x43400000
 8009a70:	0003988e 	.word	0x0003988e
 8009a74:	000bb679 	.word	0x000bb679
 8009a78:	0800adc0 	.word	0x0800adc0
 8009a7c:	3ff00000 	.word	0x3ff00000
 8009a80:	40080000 	.word	0x40080000
 8009a84:	0800ade0 	.word	0x0800ade0
 8009a88:	0800add0 	.word	0x0800add0
 8009a8c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009d64 <__ieee754_pow+0xa54>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	4640      	mov	r0, r8
 8009a94:	4649      	mov	r1, r9
 8009a96:	f7f6 fbf9 	bl	800028c <__adddf3>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	ec41 0b1a 	vmov	d10, r0, r1
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	f7f6 fbef 	bl	8000288 <__aeabi_dsub>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	ec51 0b1a 	vmov	r0, r1, d10
 8009ab2:	f7f7 f831 	bl	8000b18 <__aeabi_dcmpgt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f47f ae04 	bne.w	80096c4 <__ieee754_pow+0x3b4>
 8009abc:	4aa4      	ldr	r2, [pc, #656]	; (8009d50 <__ieee754_pow+0xa40>)
 8009abe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	f340 8108 	ble.w	8009cd8 <__ieee754_pow+0x9c8>
 8009ac8:	151b      	asrs	r3, r3, #20
 8009aca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009ace:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ad2:	fa4a f303 	asr.w	r3, sl, r3
 8009ad6:	445b      	add	r3, fp
 8009ad8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009adc:	4e9d      	ldr	r6, [pc, #628]	; (8009d54 <__ieee754_pow+0xa44>)
 8009ade:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ae2:	4116      	asrs	r6, r2
 8009ae4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ae8:	2000      	movs	r0, #0
 8009aea:	ea23 0106 	bic.w	r1, r3, r6
 8009aee:	f1c2 0214 	rsb	r2, r2, #20
 8009af2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009af6:	fa4a fa02 	asr.w	sl, sl, r2
 8009afa:	f1bb 0f00 	cmp.w	fp, #0
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4620      	mov	r0, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	bfb8      	it	lt
 8009b08:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b0c:	f7f6 fbbc 	bl	8000288 <__aeabi_dsub>
 8009b10:	ec41 0b19 	vmov	d9, r0, r1
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	ec51 0b19 	vmov	r0, r1, d9
 8009b1c:	f7f6 fbb6 	bl	800028c <__adddf3>
 8009b20:	a37b      	add	r3, pc, #492	; (adr r3, 8009d10 <__ieee754_pow+0xa00>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	2000      	movs	r0, #0
 8009b28:	4604      	mov	r4, r0
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	f7f6 fd64 	bl	80005f8 <__aeabi_dmul>
 8009b30:	ec53 2b19 	vmov	r2, r3, d9
 8009b34:	4606      	mov	r6, r0
 8009b36:	460f      	mov	r7, r1
 8009b38:	4620      	mov	r0, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fba4 	bl	8000288 <__aeabi_dsub>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4640      	mov	r0, r8
 8009b46:	4649      	mov	r1, r9
 8009b48:	f7f6 fb9e 	bl	8000288 <__aeabi_dsub>
 8009b4c:	a372      	add	r3, pc, #456	; (adr r3, 8009d18 <__ieee754_pow+0xa08>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7f6 fd51 	bl	80005f8 <__aeabi_dmul>
 8009b56:	a372      	add	r3, pc, #456	; (adr r3, 8009d20 <__ieee754_pow+0xa10>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	4689      	mov	r9, r1
 8009b60:	4620      	mov	r0, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	4649      	mov	r1, r9
 8009b70:	f7f6 fb8c 	bl	800028c <__adddf3>
 8009b74:	4604      	mov	r4, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f7f6 fb84 	bl	800028c <__adddf3>
 8009b84:	4632      	mov	r2, r6
 8009b86:	463b      	mov	r3, r7
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4689      	mov	r9, r1
 8009b8c:	f7f6 fb7c 	bl	8000288 <__aeabi_dsub>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fb76 	bl	8000288 <__aeabi_dsub>
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460f      	mov	r7, r1
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 fd26 	bl	80005f8 <__aeabi_dmul>
 8009bac:	a35e      	add	r3, pc, #376	; (adr r3, 8009d28 <__ieee754_pow+0xa18>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	f7f6 fd1f 	bl	80005f8 <__aeabi_dmul>
 8009bba:	a35d      	add	r3, pc, #372	; (adr r3, 8009d30 <__ieee754_pow+0xa20>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f7f6 fb62 	bl	8000288 <__aeabi_dsub>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f7f6 fd16 	bl	80005f8 <__aeabi_dmul>
 8009bcc:	a35a      	add	r3, pc, #360	; (adr r3, 8009d38 <__ieee754_pow+0xa28>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fb5b 	bl	800028c <__adddf3>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	462b      	mov	r3, r5
 8009bda:	f7f6 fd0d 	bl	80005f8 <__aeabi_dmul>
 8009bde:	a358      	add	r3, pc, #352	; (adr r3, 8009d40 <__ieee754_pow+0xa30>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fb50 	bl	8000288 <__aeabi_dsub>
 8009be8:	4622      	mov	r2, r4
 8009bea:	462b      	mov	r3, r5
 8009bec:	f7f6 fd04 	bl	80005f8 <__aeabi_dmul>
 8009bf0:	a355      	add	r3, pc, #340	; (adr r3, 8009d48 <__ieee754_pow+0xa38>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 fb49 	bl	800028c <__adddf3>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 fcfb 	bl	80005f8 <__aeabi_dmul>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 fb3d 	bl	8000288 <__aeabi_dsub>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	460d      	mov	r5, r1
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	f7f6 fced 	bl	80005f8 <__aeabi_dmul>
 8009c1e:	2200      	movs	r2, #0
 8009c20:	ec41 0b19 	vmov	d9, r0, r1
 8009c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	f7f6 fb2c 	bl	8000288 <__aeabi_dsub>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	ec51 0b19 	vmov	r0, r1, d9
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	4632      	mov	r2, r6
 8009c3e:	4604      	mov	r4, r0
 8009c40:	460d      	mov	r5, r1
 8009c42:	463b      	mov	r3, r7
 8009c44:	4640      	mov	r0, r8
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	f7f6 fb1c 	bl	800028c <__adddf3>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	f7f6 fb14 	bl	8000288 <__aeabi_dsub>
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	f7f6 fb10 	bl	8000288 <__aeabi_dsub>
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	493a      	ldr	r1, [pc, #232]	; (8009d58 <__ieee754_pow+0xa48>)
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f7f6 fb0a 	bl	8000288 <__aeabi_dsub>
 8009c74:	ec41 0b10 	vmov	d0, r0, r1
 8009c78:	ee10 3a90 	vmov	r3, s1
 8009c7c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c84:	da2b      	bge.n	8009cde <__ieee754_pow+0x9ce>
 8009c86:	4650      	mov	r0, sl
 8009c88:	f000 f966 	bl	8009f58 <scalbn>
 8009c8c:	ec51 0b10 	vmov	r0, r1, d0
 8009c90:	ec53 2b18 	vmov	r2, r3, d8
 8009c94:	f7ff bbed 	b.w	8009472 <__ieee754_pow+0x162>
 8009c98:	4b30      	ldr	r3, [pc, #192]	; (8009d5c <__ieee754_pow+0xa4c>)
 8009c9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c9e:	429e      	cmp	r6, r3
 8009ca0:	f77f af0c 	ble.w	8009abc <__ieee754_pow+0x7ac>
 8009ca4:	4b2e      	ldr	r3, [pc, #184]	; (8009d60 <__ieee754_pow+0xa50>)
 8009ca6:	440b      	add	r3, r1
 8009ca8:	4303      	orrs	r3, r0
 8009caa:	d009      	beq.n	8009cc0 <__ieee754_pow+0x9b0>
 8009cac:	ec51 0b18 	vmov	r0, r1, d8
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f7f6 ff12 	bl	8000adc <__aeabi_dcmplt>
 8009cb8:	3800      	subs	r0, #0
 8009cba:	bf18      	it	ne
 8009cbc:	2001      	movne	r0, #1
 8009cbe:	e447      	b.n	8009550 <__ieee754_pow+0x240>
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	f7f6 fae0 	bl	8000288 <__aeabi_dsub>
 8009cc8:	4642      	mov	r2, r8
 8009cca:	464b      	mov	r3, r9
 8009ccc:	f7f6 ff1a 	bl	8000b04 <__aeabi_dcmpge>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f43f aef3 	beq.w	8009abc <__ieee754_pow+0x7ac>
 8009cd6:	e7e9      	b.n	8009cac <__ieee754_pow+0x99c>
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	e71a      	b.n	8009b14 <__ieee754_pow+0x804>
 8009cde:	ec51 0b10 	vmov	r0, r1, d0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	e7d4      	b.n	8009c90 <__ieee754_pow+0x980>
 8009ce6:	491c      	ldr	r1, [pc, #112]	; (8009d58 <__ieee754_pow+0xa48>)
 8009ce8:	2000      	movs	r0, #0
 8009cea:	f7ff bb30 	b.w	800934e <__ieee754_pow+0x3e>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	f7ff bb2c 	b.w	800934e <__ieee754_pow+0x3e>
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7ff bb28 	b.w	800934e <__ieee754_pow+0x3e>
 8009cfe:	9204      	str	r2, [sp, #16]
 8009d00:	f7ff bb7a 	b.w	80093f8 <__ieee754_pow+0xe8>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f7ff bb64 	b.w	80093d2 <__ieee754_pow+0xc2>
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	00000000 	.word	0x00000000
 8009d14:	3fe62e43 	.word	0x3fe62e43
 8009d18:	fefa39ef 	.word	0xfefa39ef
 8009d1c:	3fe62e42 	.word	0x3fe62e42
 8009d20:	0ca86c39 	.word	0x0ca86c39
 8009d24:	be205c61 	.word	0xbe205c61
 8009d28:	72bea4d0 	.word	0x72bea4d0
 8009d2c:	3e663769 	.word	0x3e663769
 8009d30:	c5d26bf1 	.word	0xc5d26bf1
 8009d34:	3ebbbd41 	.word	0x3ebbbd41
 8009d38:	af25de2c 	.word	0xaf25de2c
 8009d3c:	3f11566a 	.word	0x3f11566a
 8009d40:	16bebd93 	.word	0x16bebd93
 8009d44:	3f66c16c 	.word	0x3f66c16c
 8009d48:	5555553e 	.word	0x5555553e
 8009d4c:	3fc55555 	.word	0x3fc55555
 8009d50:	3fe00000 	.word	0x3fe00000
 8009d54:	000fffff 	.word	0x000fffff
 8009d58:	3ff00000 	.word	0x3ff00000
 8009d5c:	4090cbff 	.word	0x4090cbff
 8009d60:	3f6f3400 	.word	0x3f6f3400
 8009d64:	652b82fe 	.word	0x652b82fe
 8009d68:	3c971547 	.word	0x3c971547

08009d6c <__ieee754_sqrt>:
 8009d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d70:	ec55 4b10 	vmov	r4, r5, d0
 8009d74:	4e55      	ldr	r6, [pc, #340]	; (8009ecc <__ieee754_sqrt+0x160>)
 8009d76:	43ae      	bics	r6, r5
 8009d78:	ee10 0a10 	vmov	r0, s0
 8009d7c:	ee10 3a10 	vmov	r3, s0
 8009d80:	462a      	mov	r2, r5
 8009d82:	4629      	mov	r1, r5
 8009d84:	d110      	bne.n	8009da8 <__ieee754_sqrt+0x3c>
 8009d86:	ee10 2a10 	vmov	r2, s0
 8009d8a:	462b      	mov	r3, r5
 8009d8c:	f7f6 fc34 	bl	80005f8 <__aeabi_dmul>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	ec45 4b10 	vmov	d0, r4, r5
 8009da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	dc10      	bgt.n	8009dce <__ieee754_sqrt+0x62>
 8009dac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009db0:	4330      	orrs	r0, r6
 8009db2:	d0f5      	beq.n	8009da0 <__ieee754_sqrt+0x34>
 8009db4:	b15d      	cbz	r5, 8009dce <__ieee754_sqrt+0x62>
 8009db6:	ee10 2a10 	vmov	r2, s0
 8009dba:	462b      	mov	r3, r5
 8009dbc:	ee10 0a10 	vmov	r0, s0
 8009dc0:	f7f6 fa62 	bl	8000288 <__aeabi_dsub>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	f7f6 fd40 	bl	800084c <__aeabi_ddiv>
 8009dcc:	e7e6      	b.n	8009d9c <__ieee754_sqrt+0x30>
 8009dce:	1512      	asrs	r2, r2, #20
 8009dd0:	d074      	beq.n	8009ebc <__ieee754_sqrt+0x150>
 8009dd2:	07d4      	lsls	r4, r2, #31
 8009dd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009dd8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ddc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009de0:	bf5e      	ittt	pl
 8009de2:	0fda      	lsrpl	r2, r3, #31
 8009de4:	005b      	lslpl	r3, r3, #1
 8009de6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009dea:	2400      	movs	r4, #0
 8009dec:	0fda      	lsrs	r2, r3, #31
 8009dee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009df2:	107f      	asrs	r7, r7, #1
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	2516      	movs	r5, #22
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009dfe:	1886      	adds	r6, r0, r2
 8009e00:	428e      	cmp	r6, r1
 8009e02:	bfde      	ittt	le
 8009e04:	1b89      	suble	r1, r1, r6
 8009e06:	18b0      	addle	r0, r6, r2
 8009e08:	18a4      	addle	r4, r4, r2
 8009e0a:	0049      	lsls	r1, r1, #1
 8009e0c:	3d01      	subs	r5, #1
 8009e0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009e12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009e16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e1a:	d1f0      	bne.n	8009dfe <__ieee754_sqrt+0x92>
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	f04f 0e20 	mov.w	lr, #32
 8009e22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e26:	4281      	cmp	r1, r0
 8009e28:	eb06 0c05 	add.w	ip, r6, r5
 8009e2c:	dc02      	bgt.n	8009e34 <__ieee754_sqrt+0xc8>
 8009e2e:	d113      	bne.n	8009e58 <__ieee754_sqrt+0xec>
 8009e30:	459c      	cmp	ip, r3
 8009e32:	d811      	bhi.n	8009e58 <__ieee754_sqrt+0xec>
 8009e34:	f1bc 0f00 	cmp.w	ip, #0
 8009e38:	eb0c 0506 	add.w	r5, ip, r6
 8009e3c:	da43      	bge.n	8009ec6 <__ieee754_sqrt+0x15a>
 8009e3e:	2d00      	cmp	r5, #0
 8009e40:	db41      	blt.n	8009ec6 <__ieee754_sqrt+0x15a>
 8009e42:	f100 0801 	add.w	r8, r0, #1
 8009e46:	1a09      	subs	r1, r1, r0
 8009e48:	459c      	cmp	ip, r3
 8009e4a:	bf88      	it	hi
 8009e4c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009e50:	eba3 030c 	sub.w	r3, r3, ip
 8009e54:	4432      	add	r2, r6
 8009e56:	4640      	mov	r0, r8
 8009e58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009e5c:	f1be 0e01 	subs.w	lr, lr, #1
 8009e60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009e64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e6c:	d1db      	bne.n	8009e26 <__ieee754_sqrt+0xba>
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	d006      	beq.n	8009e80 <__ieee754_sqrt+0x114>
 8009e72:	1c50      	adds	r0, r2, #1
 8009e74:	bf13      	iteet	ne
 8009e76:	3201      	addne	r2, #1
 8009e78:	3401      	addeq	r4, #1
 8009e7a:	4672      	moveq	r2, lr
 8009e7c:	f022 0201 	bicne.w	r2, r2, #1
 8009e80:	1063      	asrs	r3, r4, #1
 8009e82:	0852      	lsrs	r2, r2, #1
 8009e84:	07e1      	lsls	r1, r4, #31
 8009e86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009e8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009e8e:	bf48      	it	mi
 8009e90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009e94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009e98:	4614      	mov	r4, r2
 8009e9a:	e781      	b.n	8009da0 <__ieee754_sqrt+0x34>
 8009e9c:	0ad9      	lsrs	r1, r3, #11
 8009e9e:	3815      	subs	r0, #21
 8009ea0:	055b      	lsls	r3, r3, #21
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	d0fa      	beq.n	8009e9c <__ieee754_sqrt+0x130>
 8009ea6:	02cd      	lsls	r5, r1, #11
 8009ea8:	d50a      	bpl.n	8009ec0 <__ieee754_sqrt+0x154>
 8009eaa:	f1c2 0420 	rsb	r4, r2, #32
 8009eae:	fa23 f404 	lsr.w	r4, r3, r4
 8009eb2:	1e55      	subs	r5, r2, #1
 8009eb4:	4093      	lsls	r3, r2
 8009eb6:	4321      	orrs	r1, r4
 8009eb8:	1b42      	subs	r2, r0, r5
 8009eba:	e78a      	b.n	8009dd2 <__ieee754_sqrt+0x66>
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	e7f0      	b.n	8009ea2 <__ieee754_sqrt+0x136>
 8009ec0:	0049      	lsls	r1, r1, #1
 8009ec2:	3201      	adds	r2, #1
 8009ec4:	e7ef      	b.n	8009ea6 <__ieee754_sqrt+0x13a>
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	e7bd      	b.n	8009e46 <__ieee754_sqrt+0xda>
 8009eca:	bf00      	nop
 8009ecc:	7ff00000 	.word	0x7ff00000

08009ed0 <with_errno>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	4616      	mov	r6, r2
 8009ed8:	f7fc fa40 	bl	800635c <__errno>
 8009edc:	4629      	mov	r1, r5
 8009ede:	6006      	str	r6, [r0, #0]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <xflow>:
 8009ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	461d      	mov	r5, r3
 8009eea:	b108      	cbz	r0, 8009ef0 <xflow+0xc>
 8009eec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ef0:	e9cd 2300 	strd	r2, r3, [sp]
 8009ef4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	2222      	movs	r2, #34	; 0x22
 8009f02:	b003      	add	sp, #12
 8009f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f08:	f7ff bfe2 	b.w	8009ed0 <with_errno>

08009f0c <__math_uflow>:
 8009f0c:	b508      	push	{r3, lr}
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f14:	f7ff ffe6 	bl	8009ee4 <xflow>
 8009f18:	ec41 0b10 	vmov	d0, r0, r1
 8009f1c:	bd08      	pop	{r3, pc}

08009f1e <__math_oflow>:
 8009f1e:	b508      	push	{r3, lr}
 8009f20:	2200      	movs	r2, #0
 8009f22:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009f26:	f7ff ffdd 	bl	8009ee4 <xflow>
 8009f2a:	ec41 0b10 	vmov	d0, r0, r1
 8009f2e:	bd08      	pop	{r3, pc}

08009f30 <fabs>:
 8009f30:	ec51 0b10 	vmov	r0, r1, d0
 8009f34:	ee10 2a10 	vmov	r2, s0
 8009f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f3c:	ec43 2b10 	vmov	d0, r2, r3
 8009f40:	4770      	bx	lr

08009f42 <finite>:
 8009f42:	b082      	sub	sp, #8
 8009f44:	ed8d 0b00 	vstr	d0, [sp]
 8009f48:	9801      	ldr	r0, [sp, #4]
 8009f4a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009f4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f52:	0fc0      	lsrs	r0, r0, #31
 8009f54:	b002      	add	sp, #8
 8009f56:	4770      	bx	lr

08009f58 <scalbn>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	ec55 4b10 	vmov	r4, r5, d0
 8009f5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009f62:	4606      	mov	r6, r0
 8009f64:	462b      	mov	r3, r5
 8009f66:	b99a      	cbnz	r2, 8009f90 <scalbn+0x38>
 8009f68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f6c:	4323      	orrs	r3, r4
 8009f6e:	d036      	beq.n	8009fde <scalbn+0x86>
 8009f70:	4b39      	ldr	r3, [pc, #228]	; (800a058 <scalbn+0x100>)
 8009f72:	4629      	mov	r1, r5
 8009f74:	ee10 0a10 	vmov	r0, s0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f7f6 fb3d 	bl	80005f8 <__aeabi_dmul>
 8009f7e:	4b37      	ldr	r3, [pc, #220]	; (800a05c <scalbn+0x104>)
 8009f80:	429e      	cmp	r6, r3
 8009f82:	4604      	mov	r4, r0
 8009f84:	460d      	mov	r5, r1
 8009f86:	da10      	bge.n	8009faa <scalbn+0x52>
 8009f88:	a32b      	add	r3, pc, #172	; (adr r3, 800a038 <scalbn+0xe0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	e03a      	b.n	800a006 <scalbn+0xae>
 8009f90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f94:	428a      	cmp	r2, r1
 8009f96:	d10c      	bne.n	8009fb2 <scalbn+0x5a>
 8009f98:	ee10 2a10 	vmov	r2, s0
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	f7f6 f974 	bl	800028c <__adddf3>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	460d      	mov	r5, r1
 8009fa8:	e019      	b.n	8009fde <scalbn+0x86>
 8009faa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009fae:	460b      	mov	r3, r1
 8009fb0:	3a36      	subs	r2, #54	; 0x36
 8009fb2:	4432      	add	r2, r6
 8009fb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009fb8:	428a      	cmp	r2, r1
 8009fba:	dd08      	ble.n	8009fce <scalbn+0x76>
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	a120      	add	r1, pc, #128	; (adr r1, 800a040 <scalbn+0xe8>)
 8009fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc4:	da1c      	bge.n	800a000 <scalbn+0xa8>
 8009fc6:	a120      	add	r1, pc, #128	; (adr r1, 800a048 <scalbn+0xf0>)
 8009fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fcc:	e018      	b.n	800a000 <scalbn+0xa8>
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	dd08      	ble.n	8009fe4 <scalbn+0x8c>
 8009fd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fde:	ec45 4b10 	vmov	d0, r4, r5
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
 8009fe4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009fe8:	da19      	bge.n	800a01e <scalbn+0xc6>
 8009fea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009fee:	429e      	cmp	r6, r3
 8009ff0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009ff4:	dd0a      	ble.n	800a00c <scalbn+0xb4>
 8009ff6:	a112      	add	r1, pc, #72	; (adr r1, 800a040 <scalbn+0xe8>)
 8009ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e2      	bne.n	8009fc6 <scalbn+0x6e>
 800a000:	a30f      	add	r3, pc, #60	; (adr r3, 800a040 <scalbn+0xe8>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 faf7 	bl	80005f8 <__aeabi_dmul>
 800a00a:	e7cb      	b.n	8009fa4 <scalbn+0x4c>
 800a00c:	a10a      	add	r1, pc, #40	; (adr r1, 800a038 <scalbn+0xe0>)
 800a00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0b8      	beq.n	8009f88 <scalbn+0x30>
 800a016:	a10e      	add	r1, pc, #56	; (adr r1, 800a050 <scalbn+0xf8>)
 800a018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a01c:	e7b4      	b.n	8009f88 <scalbn+0x30>
 800a01e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a022:	3236      	adds	r2, #54	; 0x36
 800a024:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a028:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a02c:	4620      	mov	r0, r4
 800a02e:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <scalbn+0x108>)
 800a030:	2200      	movs	r2, #0
 800a032:	e7e8      	b.n	800a006 <scalbn+0xae>
 800a034:	f3af 8000 	nop.w
 800a038:	c2f8f359 	.word	0xc2f8f359
 800a03c:	01a56e1f 	.word	0x01a56e1f
 800a040:	8800759c 	.word	0x8800759c
 800a044:	7e37e43c 	.word	0x7e37e43c
 800a048:	8800759c 	.word	0x8800759c
 800a04c:	fe37e43c 	.word	0xfe37e43c
 800a050:	c2f8f359 	.word	0xc2f8f359
 800a054:	81a56e1f 	.word	0x81a56e1f
 800a058:	43500000 	.word	0x43500000
 800a05c:	ffff3cb0 	.word	0xffff3cb0
 800a060:	3c900000 	.word	0x3c900000

0800a064 <_kill>:
 800a064:	4b02      	ldr	r3, [pc, #8]	; (800a070 <_kill+0xc>)
 800a066:	2258      	movs	r2, #88	; 0x58
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a06e:	4770      	bx	lr
 800a070:	200004a4 	.word	0x200004a4

0800a074 <_exit>:
 800a074:	e7fe      	b.n	800a074 <_exit>
	...

0800a078 <_init>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr

0800a084 <_fini>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr
